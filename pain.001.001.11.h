/* pain.001.001.11.h
   Generated by wsdl2h 2.8.117 from pain.001.001.11.xsd and typemap.dat
   2021-11-23 16:53:13 GMT

   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE.

gSOAP XML Web services tools
Copyright (C) 2000-2021, Robert van Engelen, Genivia Inc. All Rights Reserved.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

/**

@page page_notes Notes

@note HINTS:
 - Run soapcpp2 on pain.001.001.11.h to generate the SOAP/XML processing logic:
   Use soapcpp2 -I to specify paths for #import
   Use soapcpp2 -j to generate improved proxy and server classes.
   Use soapcpp2 -r to generate a report.
 - Edit 'typemap.dat' to control namespace bindings and type mappings:
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Run Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -c to generate pure C code.
 - Use wsdl2h -R to include the REST operations defined by the WSDLs.
 - Use wsdl2h -O3 or -O4 to optimize by removing unused schema components.
 - Use wsdl2h -d to enable DOM support for xsd:any and xsd:anyType.
 - Use wsdl2h -F to simulate struct-type derivation in C (also works in C++).
 - Use wsdl2h -f to generate flat C++ class hierarchy, removes type derivation.
 - Use wsdl2h -g to generate top-level root elements with readers and writers.
 - Use wsdl2h -U to map XML names to C++ Unicode identifiers instead of _xNNNN.
 - Use wsdl2h -u to disable the generation of unions.
 - Use wsdl2h -L to remove this @note and all other @note comments.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE GENERATED soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2021, Robert van Engelen, Genivia Inc. All Rights Reserved.
The wsdl2h tool and its generated software are released under the GPL.
This software is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt c++,w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   urn:iso:std:iso:20022:tech:xsd:pain.001.001.11                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * $CONTAINER typemap variable:                                               *
 *   std::vector                                                              *
 *                                                                            *
\******************************************************************************/

#include <vector>
template <class T> class std::vector;

/******************************************************************************\
 *                                                                            *
 * $SIZE typemap variable:                                                    *
 *   int                                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to 'typemap.dat' then rerun wsdl2h (use wsdl2h -t typemap.dat):

ns1 = "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11"

*/

#define SOAP_NAMESPACE_OF_ns1	"urn:iso:std:iso:20022:tech:xsd:pain.001.001.11"
//gsoap ns1   schema namespace:	urn:iso:std:iso:20022:tech:xsd:pain.001.001.11
//gsoap ns1   schema elementForm:	qualified
//gsoap ns1   schema attributeForm:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/

/// Built-in type "xs:base64Binary".
class xsd__base64Binary
{ public:
    unsigned char *__ptr;
    int __size;
    char *id, *type, *options; // NOTE: non-NULL for DIME/MIME/MTOM XOP attachments only
};

/// Primitive built-in type "xs:date".
typedef std::string xsd__date;

/// Primitive built-in type "xs:decimal".
typedef std::string xsd__decimal;

/// Primitive built-in type "xs:gYear".
typedef std::string xsd__gYear;


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/


class ns1__AccountIdentification4Choice;

class ns1__AccountSchemeName1Choice;

class ns1__ActiveOrHistoricCurrencyAndAmount;

class ns1__AddressType3Choice;

class ns1__AdviceType1;

class ns1__AdviceType1Choice;

class ns1__AmountType4Choice;

class ns1__Authorisation1Choice;

class ns1__BranchAndFinancialInstitutionIdentification6;

class ns1__BranchData3;

class ns1__CashAccount40;

class ns1__CashAccountType2Choice;

class ns1__CategoryPurpose1Choice;

class ns1__Cheque11;

class ns1__ChequeDeliveryMethod1Choice;

class ns1__ClearingSystemIdentification2Choice;

class ns1__ClearingSystemMemberIdentification2;

class ns1__Contact4;

class ns1__CreditTransferMandateData1;

class ns1__CreditTransferTransaction54;

class ns1__CreditorReferenceInformation2;

class ns1__CreditorReferenceType1Choice;

class ns1__CreditorReferenceType2;

class ns1__CustomerCreditTransferInitiationV11;

class ns1__DateAndDateTime2Choice;

class ns1__DateAndPlaceOfBirth1;

class ns1__DatePeriod2;

class ns1__DiscountAmountAndType1;

class ns1__DiscountAmountType1Choice;

class ns1__Document;

class ns1__DocumentAdjustment1;

class ns1__DocumentLineIdentification1;

class ns1__DocumentLineInformation1;

class ns1__DocumentLineType1;

class ns1__DocumentLineType1Choice;

class ns1__EquivalentAmount2;

class ns1__ExchangeRate1;

class ns1__FinancialIdentificationSchemeName1Choice;

class ns1__FinancialInstitutionIdentification18;

class ns1__Frequency36Choice;

class ns1__FrequencyAndMoment1;

class ns1__FrequencyPeriod1;

class ns1__Garnishment3;

class ns1__GarnishmentType1;

class ns1__GarnishmentType1Choice;

class ns1__GenericAccountIdentification1;

class ns1__GenericFinancialIdentification1;

class ns1__GenericIdentification30;

class ns1__GenericOrganisationIdentification1;

class ns1__GenericPersonIdentification1;

class ns1__GroupHeader95;

class ns1__InstructionForCreditorAgent3;

class ns1__InstructionForDebtorAgent1;

class ns1__LocalInstrument2Choice;

class ns1__MandateClassification1Choice;

class ns1__MandateSetupReason1Choice;

class ns1__MandateTypeInformation2;

class ns1__NameAndAddress16;

class ns1__OrganisationIdentification29;

class ns1__OrganisationIdentificationSchemeName1Choice;

class ns1__OtherContact1;

class ns1__Party38Choice;

class ns1__PartyIdentification135;

class ns1__PaymentIdentification6;

class ns1__PaymentInitiationSource1;

class ns1__PaymentInstruction40;

class ns1__PaymentTypeInformation26;

class ns1__PersonIdentification13;

class ns1__PersonIdentificationSchemeName1Choice;

class ns1__PostalAddress24;

class ns1__ProxyAccountIdentification1;

class ns1__ProxyAccountType1Choice;

class ns1__Purpose2Choice;

class ns1__ReferredDocumentInformation7;

class ns1__ReferredDocumentType3Choice;

class ns1__ReferredDocumentType4;

class ns1__RegulatoryAuthority2;

class ns1__RegulatoryReporting3;

class ns1__RemittanceAmount2;

class ns1__RemittanceAmount3;

class ns1__RemittanceInformation21;

class ns1__RemittanceLocation7;

class ns1__RemittanceLocationData1;

class ns1__ServiceLevel8Choice;

class ns1__StructuredRegulatoryReporting3;

class ns1__StructuredRemittanceInformation17;

class ns1__SupplementaryData1;

class ns1__SupplementaryDataEnvelope1;

class ns1__TaxAmount3;

class ns1__TaxAmountAndType1;

class ns1__TaxAmountType1Choice;

class ns1__TaxAuthorisation1;

class ns1__TaxData1;

class ns1__TaxInformation10;

class ns1__TaxParty1;

class ns1__TaxParty2;

class ns1__TaxPeriod3;

class ns1__TaxRecord3;

class ns1__TaxRecordDetails3;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   urn:iso:std:iso:20022:tech:xsd:pain.001.001.11                           *
 *                                                                            *
\******************************************************************************/

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ActiveOrHistoricCurrencyAndAmount_SimpleType is a simpleType restriction of type xs:decimal.
///
/// Number of total digits is 18.
/// Number of fraction digits is 5.
/// Value range is 0 to highest.
typedef xsd__decimal ns1__ActiveOrHistoricCurrencyAndAmount_USCORESimpleType /* from 0 (inclusive) @warning: could not determine if this type is numeric */;

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ActiveOrHistoricCurrencyCode is a simpleType restriction of type xs:string.
///
/// Content pattern is "[A-Z]{3,3}".
typedef std::string ns1__ActiveOrHistoricCurrencyCode "[A-Z]{3,3}";

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":AddressType2Code is a simpleType restriction of type xs:string.
///
/// @note The enum values are prefixed with "ns1__AddressType2Code__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns1__AddressType2Code
{
	ns1__AddressType2Code__ADDR,	///< xs:string value="ADDR"
	ns1__AddressType2Code__PBOX,	///< xs:string value="PBOX"
	ns1__AddressType2Code__HOME,	///< xs:string value="HOME"
	ns1__AddressType2Code__BIZZ,	///< xs:string value="BIZZ"
	ns1__AddressType2Code__MLTO,	///< xs:string value="MLTO"
	ns1__AddressType2Code__DLVY,	///< xs:string value="DLVY"
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":AdviceType1Code is a simpleType restriction of type xs:string.
///
/// @note The enum values are prefixed with "ns1__AdviceType1Code__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns1__AdviceType1Code
{
	ns1__AdviceType1Code__ADWD,	///< xs:string value="ADWD"
	ns1__AdviceType1Code__ADND,	///< xs:string value="ADND"
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":AnyBICDec2014Identifier is a simpleType restriction of type xs:string.
///
/// Content pattern is "[A-Z0-9]{4,4}[A-Z]{2,2}[A-Z0-9]{2,2}([A-Z0-9]{3,3}){0,1}".
typedef std::string ns1__AnyBICDec2014Identifier "[A-Z0-9]{4,4}[A-Z]{2,2}[A-Z0-9]{2,2}([A-Z0-9]{3,3}){0,1}";

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Authorisation1Code is a simpleType restriction of type xs:string.
///
/// @note The enum values are prefixed with "ns1__Authorisation1Code__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns1__Authorisation1Code
{
	ns1__Authorisation1Code__AUTH,	///< xs:string value="AUTH"
	ns1__Authorisation1Code__FDET,	///< xs:string value="FDET"
	ns1__Authorisation1Code__FSUM,	///< xs:string value="FSUM"
	ns1__Authorisation1Code__ILEV,	///< xs:string value="ILEV"
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":BICFIDec2014Identifier is a simpleType restriction of type xs:string.
///
/// Content pattern is "[A-Z0-9]{4,4}[A-Z]{2,2}[A-Z0-9]{2,2}([A-Z0-9]{3,3}){0,1}".
typedef std::string ns1__BICFIDec2014Identifier "[A-Z0-9]{4,4}[A-Z]{2,2}[A-Z0-9]{2,2}([A-Z0-9]{3,3}){0,1}";

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":BaseOneRate is a simpleType restriction of type xs:decimal.
///
/// Number of total digits is 11.
/// Number of fraction digits is 10.
typedef xsd__decimal ns1__BaseOneRate;

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":BatchBookingIndicator is a simpleType restriction of type xs:boolean.
///
typedef bool ns1__BatchBookingIndicator;

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ChargeBearerType1Code is a simpleType restriction of type xs:string.
///
/// @note The enum values are prefixed with "ns1__ChargeBearerType1Code__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns1__ChargeBearerType1Code
{
	ns1__ChargeBearerType1Code__DEBT,	///< xs:string value="DEBT"
	ns1__ChargeBearerType1Code__CRED,	///< xs:string value="CRED"
	ns1__ChargeBearerType1Code__SHAR,	///< xs:string value="SHAR"
	ns1__ChargeBearerType1Code__SLEV,	///< xs:string value="SLEV"
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ChequeDelivery1Code is a simpleType restriction of type xs:string.
///
/// @note The enum values are prefixed with "ns1__ChequeDelivery1Code__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns1__ChequeDelivery1Code
{
	ns1__ChequeDelivery1Code__MLDB,	///< xs:string value="MLDB"
	ns1__ChequeDelivery1Code__MLCD,	///< xs:string value="MLCD"
	ns1__ChequeDelivery1Code__MLFA,	///< xs:string value="MLFA"
	ns1__ChequeDelivery1Code__CRDB,	///< xs:string value="CRDB"
	ns1__ChequeDelivery1Code__CRCD,	///< xs:string value="CRCD"
	ns1__ChequeDelivery1Code__CRFA,	///< xs:string value="CRFA"
	ns1__ChequeDelivery1Code__PUDB,	///< xs:string value="PUDB"
	ns1__ChequeDelivery1Code__PUCD,	///< xs:string value="PUCD"
	ns1__ChequeDelivery1Code__PUFA,	///< xs:string value="PUFA"
	ns1__ChequeDelivery1Code__RGDB,	///< xs:string value="RGDB"
	ns1__ChequeDelivery1Code__RGCD,	///< xs:string value="RGCD"
	ns1__ChequeDelivery1Code__RGFA,	///< xs:string value="RGFA"
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ChequeType2Code is a simpleType restriction of type xs:string.
///
/// @note The enum values are prefixed with "ns1__ChequeType2Code__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns1__ChequeType2Code
{
	ns1__ChequeType2Code__CCHQ,	///< xs:string value="CCHQ"
	ns1__ChequeType2Code__CCCH,	///< xs:string value="CCCH"
	ns1__ChequeType2Code__BCHQ,	///< xs:string value="BCHQ"
	ns1__ChequeType2Code__DRFT,	///< xs:string value="DRFT"
	ns1__ChequeType2Code__ELDR,	///< xs:string value="ELDR"
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":CountryCode is a simpleType restriction of type xs:string.
///
/// Content pattern is "[A-Z]{2,2}".
typedef std::string ns1__CountryCode "[A-Z]{2,2}";

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":CreditDebitCode is a simpleType restriction of type xs:string.
///
/// @note The enum values are prefixed with "ns1__CreditDebitCode__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns1__CreditDebitCode
{
	ns1__CreditDebitCode__CRDT,	///< xs:string value="CRDT"
	ns1__CreditDebitCode__DBIT,	///< xs:string value="DBIT"
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":DecimalNumber is a simpleType restriction of type xs:decimal.
///
/// Number of total digits is 18.
/// Number of fraction digits is 17.
typedef xsd__decimal ns1__DecimalNumber;

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":DocumentType3Code is a simpleType restriction of type xs:string.
///
/// @note The enum values are prefixed with "ns1__DocumentType3Code__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns1__DocumentType3Code
{
	ns1__DocumentType3Code__RADM,	///< xs:string value="RADM"
	ns1__DocumentType3Code__RPIN,	///< xs:string value="RPIN"
	ns1__DocumentType3Code__FXDR,	///< xs:string value="FXDR"
	ns1__DocumentType3Code__DISP,	///< xs:string value="DISP"
	ns1__DocumentType3Code__PUOR,	///< xs:string value="PUOR"
	ns1__DocumentType3Code__SCOR,	///< xs:string value="SCOR"
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":DocumentType6Code is a simpleType restriction of type xs:string.
///
/// @note The enum values are prefixed with "ns1__DocumentType6Code__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns1__DocumentType6Code
{
	ns1__DocumentType6Code__MSIN,	///< xs:string value="MSIN"
	ns1__DocumentType6Code__CNFA,	///< xs:string value="CNFA"
	ns1__DocumentType6Code__DNFA,	///< xs:string value="DNFA"
	ns1__DocumentType6Code__CINV,	///< xs:string value="CINV"
	ns1__DocumentType6Code__CREN,	///< xs:string value="CREN"
	ns1__DocumentType6Code__DEBN,	///< xs:string value="DEBN"
	ns1__DocumentType6Code__HIRI,	///< xs:string value="HIRI"
	ns1__DocumentType6Code__SBIN,	///< xs:string value="SBIN"
	ns1__DocumentType6Code__CMCN,	///< xs:string value="CMCN"
	ns1__DocumentType6Code__SOAC,	///< xs:string value="SOAC"
	ns1__DocumentType6Code__DISP,	///< xs:string value="DISP"
	ns1__DocumentType6Code__BOLD,	///< xs:string value="BOLD"
	ns1__DocumentType6Code__VCHR,	///< xs:string value="VCHR"
	ns1__DocumentType6Code__AROI,	///< xs:string value="AROI"
	ns1__DocumentType6Code__TSUT,	///< xs:string value="TSUT"
	ns1__DocumentType6Code__PUOR,	///< xs:string value="PUOR"
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Exact2NumericText is a simpleType restriction of type xs:string.
///
/// Content pattern is "[0-9]{2}".
typedef std::string ns1__Exact2NumericText "[0-9]{2}";

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Exact4AlphaNumericText is a simpleType restriction of type xs:string.
///
/// Content pattern is "[a-zA-Z0-9]{4}".
typedef std::string ns1__Exact4AlphaNumericText "[a-zA-Z0-9]{4}";

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ExchangeRateType1Code is a simpleType restriction of type xs:string.
///
/// @note The enum values are prefixed with "ns1__ExchangeRateType1Code__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns1__ExchangeRateType1Code
{
	ns1__ExchangeRateType1Code__SPOT,	///< xs:string value="SPOT"
	ns1__ExchangeRateType1Code__SALE,	///< xs:string value="SALE"
	ns1__ExchangeRateType1Code__AGRD,	///< xs:string value="AGRD"
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ExternalAccountIdentification1Code is a simpleType restriction of type xs:string.
///
/// Length of this content is 1 to 4.
typedef std::string ns1__ExternalAccountIdentification1Code 1 : 4;

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ExternalCashAccountType1Code is a simpleType restriction of type xs:string.
///
/// Length of this content is 1 to 4.
typedef std::string ns1__ExternalCashAccountType1Code 1 : 4;

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ExternalCategoryPurpose1Code is a simpleType restriction of type xs:string.
///
/// Length of this content is 1 to 4.
typedef std::string ns1__ExternalCategoryPurpose1Code 1 : 4;

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ExternalClearingSystemIdentification1Code is a simpleType restriction of type xs:string.
///
/// Length of this content is 1 to 5.
typedef std::string ns1__ExternalClearingSystemIdentification1Code 1 : 5;

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ExternalCreditorAgentInstruction1Code is a simpleType restriction of type xs:string.
///
/// Length of this content is 1 to 4.
typedef std::string ns1__ExternalCreditorAgentInstruction1Code 1 : 4;

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ExternalDebtorAgentInstruction1Code is a simpleType restriction of type xs:string.
///
/// Length of this content is 1 to 4.
typedef std::string ns1__ExternalDebtorAgentInstruction1Code 1 : 4;

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ExternalDiscountAmountType1Code is a simpleType restriction of type xs:string.
///
/// Length of this content is 1 to 4.
typedef std::string ns1__ExternalDiscountAmountType1Code 1 : 4;

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ExternalDocumentLineType1Code is a simpleType restriction of type xs:string.
///
/// Length of this content is 1 to 4.
typedef std::string ns1__ExternalDocumentLineType1Code 1 : 4;

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ExternalFinancialInstitutionIdentification1Code is a simpleType restriction of type xs:string.
///
/// Length of this content is 1 to 4.
typedef std::string ns1__ExternalFinancialInstitutionIdentification1Code 1 : 4;

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ExternalGarnishmentType1Code is a simpleType restriction of type xs:string.
///
/// Length of this content is 1 to 4.
typedef std::string ns1__ExternalGarnishmentType1Code 1 : 4;

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ExternalLocalInstrument1Code is a simpleType restriction of type xs:string.
///
/// Length of this content is 1 to 35.
typedef std::string ns1__ExternalLocalInstrument1Code 1 : 35;

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ExternalMandateSetupReason1Code is a simpleType restriction of type xs:string.
///
/// Length of this content is 1 to 4.
typedef std::string ns1__ExternalMandateSetupReason1Code 1 : 4;

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ExternalOrganisationIdentification1Code is a simpleType restriction of type xs:string.
///
/// Length of this content is 1 to 4.
typedef std::string ns1__ExternalOrganisationIdentification1Code 1 : 4;

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ExternalPersonIdentification1Code is a simpleType restriction of type xs:string.
///
/// Length of this content is 1 to 4.
typedef std::string ns1__ExternalPersonIdentification1Code 1 : 4;

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ExternalProxyAccountType1Code is a simpleType restriction of type xs:string.
///
/// Length of this content is 1 to 4.
typedef std::string ns1__ExternalProxyAccountType1Code 1 : 4;

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ExternalPurpose1Code is a simpleType restriction of type xs:string.
///
/// Length of this content is 1 to 4.
typedef std::string ns1__ExternalPurpose1Code 1 : 4;

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ExternalServiceLevel1Code is a simpleType restriction of type xs:string.
///
/// Length of this content is 1 to 4.
typedef std::string ns1__ExternalServiceLevel1Code 1 : 4;

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ExternalTaxAmountType1Code is a simpleType restriction of type xs:string.
///
/// Length of this content is 1 to 4.
typedef std::string ns1__ExternalTaxAmountType1Code 1 : 4;

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Frequency6Code is a simpleType restriction of type xs:string.
///
/// @note The enum values are prefixed with "ns1__Frequency6Code__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns1__Frequency6Code
{
	ns1__Frequency6Code__YEAR,	///< xs:string value="YEAR"
	ns1__Frequency6Code__MNTH,	///< xs:string value="MNTH"
	ns1__Frequency6Code__QURT,	///< xs:string value="QURT"
	ns1__Frequency6Code__MIAN,	///< xs:string value="MIAN"
	ns1__Frequency6Code__WEEK,	///< xs:string value="WEEK"
	ns1__Frequency6Code__DAIL,	///< xs:string value="DAIL"
	ns1__Frequency6Code__ADHO,	///< xs:string value="ADHO"
	ns1__Frequency6Code__INDA,	///< xs:string value="INDA"
	ns1__Frequency6Code__FRTN,	///< xs:string value="FRTN"
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":IBAN2007Identifier is a simpleType restriction of type xs:string.
///
/// Content pattern is "[A-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}".
typedef std::string ns1__IBAN2007Identifier "[A-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}";

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ISODate is a simpleType restriction of type xs:date.
///
typedef xsd__date ns1__ISODate;

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ISODateTime is a simpleType restriction of type xs:dateTime.
///
typedef time_t ns1__ISODateTime;

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ISOYear is a simpleType restriction of type xs:gYear.
///
typedef xsd__gYear ns1__ISOYear;

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":LEIIdentifier is a simpleType restriction of type xs:string.
///
/// Content pattern is "[A-Z0-9]{18,18}[0-9]{2,2}".
typedef std::string ns1__LEIIdentifier "[A-Z0-9]{18,18}[0-9]{2,2}";

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":MandateClassification1Code is a simpleType restriction of type xs:string.
///
/// @note The enum values are prefixed with "ns1__MandateClassification1Code__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns1__MandateClassification1Code
{
	ns1__MandateClassification1Code__FIXE,	///< xs:string value="FIXE"
	ns1__MandateClassification1Code__USGB,	///< xs:string value="USGB"
	ns1__MandateClassification1Code__VARI,	///< xs:string value="VARI"
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max10KBinary is a simpleType restriction of type xs:base64Binary.
///
/// Length of this content is 1 to 10240.
typedef xsd__base64Binary ns1__Max10KBinary 1 : 10240;

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max10Text is a simpleType restriction of type xs:string.
///
/// Length of this content is 1 to 10.
typedef std::string ns1__Max10Text 1 : 10;

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max128Text is a simpleType restriction of type xs:string.
///
/// Length of this content is 1 to 128.
typedef std::string ns1__Max128Text 1 : 128;

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max140Text is a simpleType restriction of type xs:string.
///
/// Length of this content is 1 to 140.
typedef std::string ns1__Max140Text 1 : 140;

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max15NumericText is a simpleType restriction of type xs:string.
///
/// Content pattern is "[0-9]{1,15}".
typedef std::string ns1__Max15NumericText "[0-9]{1,15}";

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max16Text is a simpleType restriction of type xs:string.
///
/// Length of this content is 1 to 16.
typedef std::string ns1__Max16Text 1 : 16;

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max2048Text is a simpleType restriction of type xs:string.
///
/// Length of this content is 1 to 2048.
typedef std::string ns1__Max2048Text 1 : 2048;

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max34Text is a simpleType restriction of type xs:string.
///
/// Length of this content is 1 to 34.
typedef std::string ns1__Max34Text 1 : 34;

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max350Text is a simpleType restriction of type xs:string.
///
/// Length of this content is 1 to 350.
typedef std::string ns1__Max350Text 1 : 350;

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text is a simpleType restriction of type xs:string.
///
/// Length of this content is 1 to 35.
typedef std::string ns1__Max35Text 1 : 35;

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max4Text is a simpleType restriction of type xs:string.
///
/// Length of this content is 1 to 4.
typedef std::string ns1__Max4Text 1 : 4;

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max70Text is a simpleType restriction of type xs:string.
///
/// Length of this content is 1 to 70.
typedef std::string ns1__Max70Text 1 : 70;

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":NamePrefix2Code is a simpleType restriction of type xs:string.
///
/// @note The enum values are prefixed with "ns1__NamePrefix2Code__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns1__NamePrefix2Code
{
	ns1__NamePrefix2Code__DOCT,	///< xs:string value="DOCT"
	ns1__NamePrefix2Code__MADM,	///< xs:string value="MADM"
	ns1__NamePrefix2Code__MISS,	///< xs:string value="MISS"
	ns1__NamePrefix2Code__MIST,	///< xs:string value="MIST"
	ns1__NamePrefix2Code__MIKS,	///< xs:string value="MIKS"
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Number is a simpleType restriction of type xs:decimal.
///
/// Number of total digits is 18.
/// Number of fraction digits is 0.
typedef xsd__decimal ns1__Number;

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":PaymentMethod3Code is a simpleType restriction of type xs:string.
///
/// @note The enum values are prefixed with "ns1__PaymentMethod3Code__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns1__PaymentMethod3Code
{
	ns1__PaymentMethod3Code__CHK,	///< xs:string value="CHK"
	ns1__PaymentMethod3Code__TRF,	///< xs:string value="TRF"
	ns1__PaymentMethod3Code__TRA,	///< xs:string value="TRA"
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":PercentageRate is a simpleType restriction of type xs:decimal.
///
/// Number of total digits is 11.
/// Number of fraction digits is 10.
typedef xsd__decimal ns1__PercentageRate;

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":PhoneNumber is a simpleType restriction of type xs:string.
///
/// Content pattern is "\\+[0-9]{1,3}-[0-9()+\\-]{1,30}".
typedef std::string ns1__PhoneNumber "\\+[0-9]{1,3}-[0-9()+\\-]{1,30}";

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":PreferredContactMethod1Code is a simpleType restriction of type xs:string.
///
/// @note The enum values are prefixed with "ns1__PreferredContactMethod1Code__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns1__PreferredContactMethod1Code
{
	ns1__PreferredContactMethod1Code__LETT,	///< xs:string value="LETT"
	ns1__PreferredContactMethod1Code__MAIL,	///< xs:string value="MAIL"
	ns1__PreferredContactMethod1Code__PHON,	///< xs:string value="PHON"
	ns1__PreferredContactMethod1Code__FAXX,	///< xs:string value="FAXX"
	ns1__PreferredContactMethod1Code__CELL,	///< xs:string value="CELL"
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Priority2Code is a simpleType restriction of type xs:string.
///
/// @note The enum values are prefixed with "ns1__Priority2Code__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns1__Priority2Code
{
	ns1__Priority2Code__HIGH,	///< xs:string value="HIGH"
	ns1__Priority2Code__NORM,	///< xs:string value="NORM"
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":RegulatoryReportingType1Code is a simpleType restriction of type xs:string.
///
/// @note The enum values are prefixed with "ns1__RegulatoryReportingType1Code__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns1__RegulatoryReportingType1Code
{
	ns1__RegulatoryReportingType1Code__CRED,	///< xs:string value="CRED"
	ns1__RegulatoryReportingType1Code__DEBT,	///< xs:string value="DEBT"
	ns1__RegulatoryReportingType1Code__BOTH,	///< xs:string value="BOTH"
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":RemittanceLocationMethod2Code is a simpleType restriction of type xs:string.
///
/// @note The enum values are prefixed with "ns1__RemittanceLocationMethod2Code__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns1__RemittanceLocationMethod2Code
{
	ns1__RemittanceLocationMethod2Code__FAXI,	///< xs:string value="FAXI"
	ns1__RemittanceLocationMethod2Code__EDIC,	///< xs:string value="EDIC"
	ns1__RemittanceLocationMethod2Code__URID,	///< xs:string value="URID"
	ns1__RemittanceLocationMethod2Code__EMAL,	///< xs:string value="EMAL"
	ns1__RemittanceLocationMethod2Code__POST,	///< xs:string value="POST"
	ns1__RemittanceLocationMethod2Code__SMSM,	///< xs:string value="SMSM"
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":TaxRecordPeriod1Code is a simpleType restriction of type xs:string.
///
/// @note The enum values are prefixed with "ns1__TaxRecordPeriod1Code__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns1__TaxRecordPeriod1Code
{
	ns1__TaxRecordPeriod1Code__MM01,	///< xs:string value="MM01"
	ns1__TaxRecordPeriod1Code__MM02,	///< xs:string value="MM02"
	ns1__TaxRecordPeriod1Code__MM03,	///< xs:string value="MM03"
	ns1__TaxRecordPeriod1Code__MM04,	///< xs:string value="MM04"
	ns1__TaxRecordPeriod1Code__MM05,	///< xs:string value="MM05"
	ns1__TaxRecordPeriod1Code__MM06,	///< xs:string value="MM06"
	ns1__TaxRecordPeriod1Code__MM07,	///< xs:string value="MM07"
	ns1__TaxRecordPeriod1Code__MM08,	///< xs:string value="MM08"
	ns1__TaxRecordPeriod1Code__MM09,	///< xs:string value="MM09"
	ns1__TaxRecordPeriod1Code__MM10,	///< xs:string value="MM10"
	ns1__TaxRecordPeriod1Code__MM11,	///< xs:string value="MM11"
	ns1__TaxRecordPeriod1Code__MM12,	///< xs:string value="MM12"
	ns1__TaxRecordPeriod1Code__QTR1,	///< xs:string value="QTR1"
	ns1__TaxRecordPeriod1Code__QTR2,	///< xs:string value="QTR2"
	ns1__TaxRecordPeriod1Code__QTR3,	///< xs:string value="QTR3"
	ns1__TaxRecordPeriod1Code__QTR4,	///< xs:string value="QTR4"
	ns1__TaxRecordPeriod1Code__HLF1,	///< xs:string value="HLF1"
	ns1__TaxRecordPeriod1Code__HLF2,	///< xs:string value="HLF2"
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":TrueFalseIndicator is a simpleType restriction of type xs:boolean.
///
typedef bool ns1__TrueFalseIndicator;

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":UUIDv4Identifier is a simpleType restriction of type xs:string.
///
/// Content pattern is "[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89ab][a-f0-9]{3}-[a-f0-9]{12}".
typedef std::string ns1__UUIDv4Identifier "[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89ab][a-f0-9]{3}-[a-f0-9]{12}";


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   urn:iso:std:iso:20022:tech:xsd:pain.001.001.11                           *
 *                                                                            *
\******************************************************************************/

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":AccountIdentification4Choice is a complexType.
///
/// @note class ns1__AccountIdentification4Choice operations:
/// - ns1__AccountIdentification4Choice* soap_new_ns1__AccountIdentification4Choice(soap*) allocate and default initialize
/// - ns1__AccountIdentification4Choice* soap_new_ns1__AccountIdentification4Choice(soap*, int num) allocate and default initialize an array
/// - ns1__AccountIdentification4Choice* soap_new_req_ns1__AccountIdentification4Choice(soap*, ...) allocate, set required members
/// - ns1__AccountIdentification4Choice* soap_new_set_ns1__AccountIdentification4Choice(soap*, ...) allocate, set all public members
/// - ns1__AccountIdentification4Choice::soap_default(soap*) default initialize members
/// - int soap_read_ns1__AccountIdentification4Choice(soap*, ns1__AccountIdentification4Choice*) deserialize from a stream
/// - int soap_write_ns1__AccountIdentification4Choice(soap*, ns1__AccountIdentification4Choice*) serialize to a stream
/// - ns1__AccountIdentification4Choice* ns1__AccountIdentification4Choice::soap_dup(soap*) returns deep copy of ns1__AccountIdentification4Choice, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__AccountIdentification4Choice::soap_del() deep deletes ns1__AccountIdentification4Choice data members, use only after ns1__AccountIdentification4Choice::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__AccountIdentification4Choice::soap_type() returns SOAP_TYPE_ns1__AccountIdentification4Choice or derived type identifier
class ns1__AccountIdentification4Choice
{ public:
//  BEGIN CHOICE <xs:choice>
  $ int                                  __union_AccountIdentification4Choice;	///< Union _ns1__union_AccountIdentification4Choice selector: set to SOAP_UNION__ns1__union_AccountIdentification4Choice_<fieldname>
/// Union for choice in ns1__AccountIdentification4Choice.
    union _ns1__union_AccountIdentification4Choice
    {
/// Element "IBAN" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":IBAN2007Identifier.
    ns1__IBAN2007Identifier*             IBAN                          ;	///< Choice of element (one of multiple choices).
/// Element "Othr" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":GenericAccountIdentification1.
    ns1__GenericAccountIdentification1*  Othr                          ;	///< Choice of element (one of multiple choices).
    }                                    union_AccountIdentification4Choice;
//  END OF CHOICE
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":AccountSchemeName1Choice is a complexType.
///
/// @note class ns1__AccountSchemeName1Choice operations:
/// - ns1__AccountSchemeName1Choice* soap_new_ns1__AccountSchemeName1Choice(soap*) allocate and default initialize
/// - ns1__AccountSchemeName1Choice* soap_new_ns1__AccountSchemeName1Choice(soap*, int num) allocate and default initialize an array
/// - ns1__AccountSchemeName1Choice* soap_new_req_ns1__AccountSchemeName1Choice(soap*, ...) allocate, set required members
/// - ns1__AccountSchemeName1Choice* soap_new_set_ns1__AccountSchemeName1Choice(soap*, ...) allocate, set all public members
/// - ns1__AccountSchemeName1Choice::soap_default(soap*) default initialize members
/// - int soap_read_ns1__AccountSchemeName1Choice(soap*, ns1__AccountSchemeName1Choice*) deserialize from a stream
/// - int soap_write_ns1__AccountSchemeName1Choice(soap*, ns1__AccountSchemeName1Choice*) serialize to a stream
/// - ns1__AccountSchemeName1Choice* ns1__AccountSchemeName1Choice::soap_dup(soap*) returns deep copy of ns1__AccountSchemeName1Choice, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__AccountSchemeName1Choice::soap_del() deep deletes ns1__AccountSchemeName1Choice data members, use only after ns1__AccountSchemeName1Choice::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__AccountSchemeName1Choice::soap_type() returns SOAP_TYPE_ns1__AccountSchemeName1Choice or derived type identifier
class ns1__AccountSchemeName1Choice
{ public:
//  BEGIN CHOICE <xs:choice>
  $ int                                  __union_AccountSchemeName1Choice;	///< Union _ns1__union_AccountSchemeName1Choice selector: set to SOAP_UNION__ns1__union_AccountSchemeName1Choice_<fieldname>
/// Union for choice in ns1__AccountSchemeName1Choice.
    union _ns1__union_AccountSchemeName1Choice
    {
/// Element "Cd" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ExternalAccountIdentification1Code.
    ns1__ExternalAccountIdentification1Code*  Cd                            ;	///< Choice of element (one of multiple choices).
/// Element "Prtry" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text*                      Prtry                         ;	///< Choice of element (one of multiple choices).
    }                                    union_AccountSchemeName1Choice;
//  END OF CHOICE
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":AddressType3Choice is a complexType.
///
/// @note class ns1__AddressType3Choice operations:
/// - ns1__AddressType3Choice* soap_new_ns1__AddressType3Choice(soap*) allocate and default initialize
/// - ns1__AddressType3Choice* soap_new_ns1__AddressType3Choice(soap*, int num) allocate and default initialize an array
/// - ns1__AddressType3Choice* soap_new_req_ns1__AddressType3Choice(soap*, ...) allocate, set required members
/// - ns1__AddressType3Choice* soap_new_set_ns1__AddressType3Choice(soap*, ...) allocate, set all public members
/// - ns1__AddressType3Choice::soap_default(soap*) default initialize members
/// - int soap_read_ns1__AddressType3Choice(soap*, ns1__AddressType3Choice*) deserialize from a stream
/// - int soap_write_ns1__AddressType3Choice(soap*, ns1__AddressType3Choice*) serialize to a stream
/// - ns1__AddressType3Choice* ns1__AddressType3Choice::soap_dup(soap*) returns deep copy of ns1__AddressType3Choice, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__AddressType3Choice::soap_del() deep deletes ns1__AddressType3Choice data members, use only after ns1__AddressType3Choice::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__AddressType3Choice::soap_type() returns SOAP_TYPE_ns1__AddressType3Choice or derived type identifier
class ns1__AddressType3Choice
{ public:
//  BEGIN CHOICE <xs:choice>
  $ int                                  __union_AddressType3Choice    ;	///< Union _ns1__union_AddressType3Choice selector: set to SOAP_UNION__ns1__union_AddressType3Choice_<fieldname>
/// Union for choice in ns1__AddressType3Choice.
    union _ns1__union_AddressType3Choice
    {
/// Element "Cd" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":AddressType2Code.
    enum ns1__AddressType2Code           Cd                            ;	///< Choice of element (one of multiple choices).
/// Element "Prtry" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":GenericIdentification30.
    ns1__GenericIdentification30*        Prtry                         ;	///< Choice of element (one of multiple choices).
    }                                    union_AddressType3Choice      ;
//  END OF CHOICE
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":AdviceType1 is a complexType.
///
/// @note class ns1__AdviceType1 operations:
/// - ns1__AdviceType1* soap_new_ns1__AdviceType1(soap*) allocate and default initialize
/// - ns1__AdviceType1* soap_new_ns1__AdviceType1(soap*, int num) allocate and default initialize an array
/// - ns1__AdviceType1* soap_new_req_ns1__AdviceType1(soap*, ...) allocate, set required members
/// - ns1__AdviceType1* soap_new_set_ns1__AdviceType1(soap*, ...) allocate, set all public members
/// - ns1__AdviceType1::soap_default(soap*) default initialize members
/// - int soap_read_ns1__AdviceType1(soap*, ns1__AdviceType1*) deserialize from a stream
/// - int soap_write_ns1__AdviceType1(soap*, ns1__AdviceType1*) serialize to a stream
/// - ns1__AdviceType1* ns1__AdviceType1::soap_dup(soap*) returns deep copy of ns1__AdviceType1, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__AdviceType1::soap_del() deep deletes ns1__AdviceType1 data members, use only after ns1__AdviceType1::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__AdviceType1::soap_type() returns SOAP_TYPE_ns1__AdviceType1 or derived type identifier
class ns1__AdviceType1
{ public:
/// Element "CdtAdvc" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":AdviceType1Choice.
    ns1__AdviceType1Choice*              CdtAdvc                        0;	///< Optional element.
/// Element "DbtAdvc" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":AdviceType1Choice.
    ns1__AdviceType1Choice*              DbtAdvc                        0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":AdviceType1Choice is a complexType.
///
/// @note class ns1__AdviceType1Choice operations:
/// - ns1__AdviceType1Choice* soap_new_ns1__AdviceType1Choice(soap*) allocate and default initialize
/// - ns1__AdviceType1Choice* soap_new_ns1__AdviceType1Choice(soap*, int num) allocate and default initialize an array
/// - ns1__AdviceType1Choice* soap_new_req_ns1__AdviceType1Choice(soap*, ...) allocate, set required members
/// - ns1__AdviceType1Choice* soap_new_set_ns1__AdviceType1Choice(soap*, ...) allocate, set all public members
/// - ns1__AdviceType1Choice::soap_default(soap*) default initialize members
/// - int soap_read_ns1__AdviceType1Choice(soap*, ns1__AdviceType1Choice*) deserialize from a stream
/// - int soap_write_ns1__AdviceType1Choice(soap*, ns1__AdviceType1Choice*) serialize to a stream
/// - ns1__AdviceType1Choice* ns1__AdviceType1Choice::soap_dup(soap*) returns deep copy of ns1__AdviceType1Choice, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__AdviceType1Choice::soap_del() deep deletes ns1__AdviceType1Choice data members, use only after ns1__AdviceType1Choice::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__AdviceType1Choice::soap_type() returns SOAP_TYPE_ns1__AdviceType1Choice or derived type identifier
class ns1__AdviceType1Choice
{ public:
//  BEGIN CHOICE <xs:choice>
  $ int                                  __union_AdviceType1Choice     ;	///< Union _ns1__union_AdviceType1Choice selector: set to SOAP_UNION__ns1__union_AdviceType1Choice_<fieldname>
/// Union for choice in ns1__AdviceType1Choice.
    union _ns1__union_AdviceType1Choice
    {
/// Element "Cd" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":AdviceType1Code.
    enum ns1__AdviceType1Code            Cd                            ;	///< Choice of element (one of multiple choices).
/// Element "Prtry" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text*                      Prtry                         ;	///< Choice of element (one of multiple choices).
    }                                    union_AdviceType1Choice       ;
//  END OF CHOICE
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":AmountType4Choice is a complexType.
///
/// @note class ns1__AmountType4Choice operations:
/// - ns1__AmountType4Choice* soap_new_ns1__AmountType4Choice(soap*) allocate and default initialize
/// - ns1__AmountType4Choice* soap_new_ns1__AmountType4Choice(soap*, int num) allocate and default initialize an array
/// - ns1__AmountType4Choice* soap_new_req_ns1__AmountType4Choice(soap*, ...) allocate, set required members
/// - ns1__AmountType4Choice* soap_new_set_ns1__AmountType4Choice(soap*, ...) allocate, set all public members
/// - ns1__AmountType4Choice::soap_default(soap*) default initialize members
/// - int soap_read_ns1__AmountType4Choice(soap*, ns1__AmountType4Choice*) deserialize from a stream
/// - int soap_write_ns1__AmountType4Choice(soap*, ns1__AmountType4Choice*) serialize to a stream
/// - ns1__AmountType4Choice* ns1__AmountType4Choice::soap_dup(soap*) returns deep copy of ns1__AmountType4Choice, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__AmountType4Choice::soap_del() deep deletes ns1__AmountType4Choice data members, use only after ns1__AmountType4Choice::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__AmountType4Choice::soap_type() returns SOAP_TYPE_ns1__AmountType4Choice or derived type identifier
class ns1__AmountType4Choice
{ public:
//  BEGIN CHOICE <xs:choice>
  $ int                                  __union_AmountType4Choice     ;	///< Union _ns1__union_AmountType4Choice selector: set to SOAP_UNION__ns1__union_AmountType4Choice_<fieldname>
/// Union for choice in ns1__AmountType4Choice.
    union _ns1__union_AmountType4Choice
    {
/// Element "InstdAmt" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ActiveOrHistoricCurrencyAndAmount.
    ns1__ActiveOrHistoricCurrencyAndAmount*  InstdAmt                      ;	///< Choice of element (one of multiple choices).
/// Element "EqvtAmt" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":EquivalentAmount2.
    ns1__EquivalentAmount2*              EqvtAmt                       ;	///< Choice of element (one of multiple choices).
    }                                    union_AmountType4Choice       ;
//  END OF CHOICE
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Authorisation1Choice is a complexType.
///
/// @note class ns1__Authorisation1Choice operations:
/// - ns1__Authorisation1Choice* soap_new_ns1__Authorisation1Choice(soap*) allocate and default initialize
/// - ns1__Authorisation1Choice* soap_new_ns1__Authorisation1Choice(soap*, int num) allocate and default initialize an array
/// - ns1__Authorisation1Choice* soap_new_req_ns1__Authorisation1Choice(soap*, ...) allocate, set required members
/// - ns1__Authorisation1Choice* soap_new_set_ns1__Authorisation1Choice(soap*, ...) allocate, set all public members
/// - ns1__Authorisation1Choice::soap_default(soap*) default initialize members
/// - int soap_read_ns1__Authorisation1Choice(soap*, ns1__Authorisation1Choice*) deserialize from a stream
/// - int soap_write_ns1__Authorisation1Choice(soap*, ns1__Authorisation1Choice*) serialize to a stream
/// - ns1__Authorisation1Choice* ns1__Authorisation1Choice::soap_dup(soap*) returns deep copy of ns1__Authorisation1Choice, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__Authorisation1Choice::soap_del() deep deletes ns1__Authorisation1Choice data members, use only after ns1__Authorisation1Choice::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__Authorisation1Choice::soap_type() returns SOAP_TYPE_ns1__Authorisation1Choice or derived type identifier
class ns1__Authorisation1Choice
{ public:
//  BEGIN CHOICE <xs:choice>
  $ int                                  __union_Authorisation1Choice  ;	///< Union _ns1__union_Authorisation1Choice selector: set to SOAP_UNION__ns1__union_Authorisation1Choice_<fieldname>
/// Union for choice in ns1__Authorisation1Choice.
    union _ns1__union_Authorisation1Choice
    {
/// Element "Cd" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Authorisation1Code.
    enum ns1__Authorisation1Code         Cd                            ;	///< Choice of element (one of multiple choices).
/// Element "Prtry" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max128Text.
    ns1__Max128Text*                     Prtry                         ;	///< Choice of element (one of multiple choices).
    }                                    union_Authorisation1Choice    ;
//  END OF CHOICE
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":BranchAndFinancialInstitutionIdentification6 is a complexType.
///
/// @note class ns1__BranchAndFinancialInstitutionIdentification6 operations:
/// - ns1__BranchAndFinancialInstitutionIdentification6* soap_new_ns1__BranchAndFinancialInstitutionIdentification6(soap*) allocate and default initialize
/// - ns1__BranchAndFinancialInstitutionIdentification6* soap_new_ns1__BranchAndFinancialInstitutionIdentification6(soap*, int num) allocate and default initialize an array
/// - ns1__BranchAndFinancialInstitutionIdentification6* soap_new_req_ns1__BranchAndFinancialInstitutionIdentification6(soap*, ...) allocate, set required members
/// - ns1__BranchAndFinancialInstitutionIdentification6* soap_new_set_ns1__BranchAndFinancialInstitutionIdentification6(soap*, ...) allocate, set all public members
/// - ns1__BranchAndFinancialInstitutionIdentification6::soap_default(soap*) default initialize members
/// - int soap_read_ns1__BranchAndFinancialInstitutionIdentification6(soap*, ns1__BranchAndFinancialInstitutionIdentification6*) deserialize from a stream
/// - int soap_write_ns1__BranchAndFinancialInstitutionIdentification6(soap*, ns1__BranchAndFinancialInstitutionIdentification6*) serialize to a stream
/// - ns1__BranchAndFinancialInstitutionIdentification6* ns1__BranchAndFinancialInstitutionIdentification6::soap_dup(soap*) returns deep copy of ns1__BranchAndFinancialInstitutionIdentification6, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__BranchAndFinancialInstitutionIdentification6::soap_del() deep deletes ns1__BranchAndFinancialInstitutionIdentification6 data members, use only after ns1__BranchAndFinancialInstitutionIdentification6::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__BranchAndFinancialInstitutionIdentification6::soap_type() returns SOAP_TYPE_ns1__BranchAndFinancialInstitutionIdentification6 or derived type identifier
class ns1__BranchAndFinancialInstitutionIdentification6
{ public:
/// Element "FinInstnId" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":FinancialInstitutionIdentification18.
    ns1__FinancialInstitutionIdentification18*  FinInstnId                     1;	///< Required element.
/// Element "BrnchId" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":BranchData3.
    ns1__BranchData3*                    BrnchId                        0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":BranchData3 is a complexType.
///
/// @note class ns1__BranchData3 operations:
/// - ns1__BranchData3* soap_new_ns1__BranchData3(soap*) allocate and default initialize
/// - ns1__BranchData3* soap_new_ns1__BranchData3(soap*, int num) allocate and default initialize an array
/// - ns1__BranchData3* soap_new_req_ns1__BranchData3(soap*, ...) allocate, set required members
/// - ns1__BranchData3* soap_new_set_ns1__BranchData3(soap*, ...) allocate, set all public members
/// - ns1__BranchData3::soap_default(soap*) default initialize members
/// - int soap_read_ns1__BranchData3(soap*, ns1__BranchData3*) deserialize from a stream
/// - int soap_write_ns1__BranchData3(soap*, ns1__BranchData3*) serialize to a stream
/// - ns1__BranchData3* ns1__BranchData3::soap_dup(soap*) returns deep copy of ns1__BranchData3, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__BranchData3::soap_del() deep deletes ns1__BranchData3 data members, use only after ns1__BranchData3::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__BranchData3::soap_type() returns SOAP_TYPE_ns1__BranchData3 or derived type identifier
class ns1__BranchData3
{ public:
/// Element "Id" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text*                      Id                             0;	///< Optional element.
/// Element "LEI" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":LEIIdentifier.
    ns1__LEIIdentifier*                  LEI                            0;	///< Optional element.
/// Element "Nm" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max140Text.
    ns1__Max140Text*                     Nm                             0;	///< Optional element.
/// Element "PstlAdr" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":PostalAddress24.
    ns1__PostalAddress24*                PstlAdr                        0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":CashAccount40 is a complexType.
///
/// @note class ns1__CashAccount40 operations:
/// - ns1__CashAccount40* soap_new_ns1__CashAccount40(soap*) allocate and default initialize
/// - ns1__CashAccount40* soap_new_ns1__CashAccount40(soap*, int num) allocate and default initialize an array
/// - ns1__CashAccount40* soap_new_req_ns1__CashAccount40(soap*, ...) allocate, set required members
/// - ns1__CashAccount40* soap_new_set_ns1__CashAccount40(soap*, ...) allocate, set all public members
/// - ns1__CashAccount40::soap_default(soap*) default initialize members
/// - int soap_read_ns1__CashAccount40(soap*, ns1__CashAccount40*) deserialize from a stream
/// - int soap_write_ns1__CashAccount40(soap*, ns1__CashAccount40*) serialize to a stream
/// - ns1__CashAccount40* ns1__CashAccount40::soap_dup(soap*) returns deep copy of ns1__CashAccount40, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__CashAccount40::soap_del() deep deletes ns1__CashAccount40 data members, use only after ns1__CashAccount40::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__CashAccount40::soap_type() returns SOAP_TYPE_ns1__CashAccount40 or derived type identifier
class ns1__CashAccount40
{ public:
/// Element "Id" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":AccountIdentification4Choice.
    ns1__AccountIdentification4Choice*   Id                             0;	///< Optional element.
/// Element "Tp" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":CashAccountType2Choice.
    ns1__CashAccountType2Choice*         Tp                             0;	///< Optional element.
/// Element "Ccy" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ActiveOrHistoricCurrencyCode.
    ns1__ActiveOrHistoricCurrencyCode*   Ccy                            0;	///< Optional element.
/// Element "Nm" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max70Text.
    ns1__Max70Text*                      Nm                             0;	///< Optional element.
/// Element "Prxy" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ProxyAccountIdentification1.
    ns1__ProxyAccountIdentification1*    Prxy                           0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":CashAccountType2Choice is a complexType.
///
/// @note class ns1__CashAccountType2Choice operations:
/// - ns1__CashAccountType2Choice* soap_new_ns1__CashAccountType2Choice(soap*) allocate and default initialize
/// - ns1__CashAccountType2Choice* soap_new_ns1__CashAccountType2Choice(soap*, int num) allocate and default initialize an array
/// - ns1__CashAccountType2Choice* soap_new_req_ns1__CashAccountType2Choice(soap*, ...) allocate, set required members
/// - ns1__CashAccountType2Choice* soap_new_set_ns1__CashAccountType2Choice(soap*, ...) allocate, set all public members
/// - ns1__CashAccountType2Choice::soap_default(soap*) default initialize members
/// - int soap_read_ns1__CashAccountType2Choice(soap*, ns1__CashAccountType2Choice*) deserialize from a stream
/// - int soap_write_ns1__CashAccountType2Choice(soap*, ns1__CashAccountType2Choice*) serialize to a stream
/// - ns1__CashAccountType2Choice* ns1__CashAccountType2Choice::soap_dup(soap*) returns deep copy of ns1__CashAccountType2Choice, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__CashAccountType2Choice::soap_del() deep deletes ns1__CashAccountType2Choice data members, use only after ns1__CashAccountType2Choice::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__CashAccountType2Choice::soap_type() returns SOAP_TYPE_ns1__CashAccountType2Choice or derived type identifier
class ns1__CashAccountType2Choice
{ public:
//  BEGIN CHOICE <xs:choice>
  $ int                                  __union_CashAccountType2Choice;	///< Union _ns1__union_CashAccountType2Choice selector: set to SOAP_UNION__ns1__union_CashAccountType2Choice_<fieldname>
/// Union for choice in ns1__CashAccountType2Choice.
    union _ns1__union_CashAccountType2Choice
    {
/// Element "Cd" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ExternalCashAccountType1Code.
    ns1__ExternalCashAccountType1Code*   Cd                            ;	///< Choice of element (one of multiple choices).
/// Element "Prtry" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text*                      Prtry                         ;	///< Choice of element (one of multiple choices).
    }                                    union_CashAccountType2Choice  ;
//  END OF CHOICE
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":CategoryPurpose1Choice is a complexType.
///
/// @note class ns1__CategoryPurpose1Choice operations:
/// - ns1__CategoryPurpose1Choice* soap_new_ns1__CategoryPurpose1Choice(soap*) allocate and default initialize
/// - ns1__CategoryPurpose1Choice* soap_new_ns1__CategoryPurpose1Choice(soap*, int num) allocate and default initialize an array
/// - ns1__CategoryPurpose1Choice* soap_new_req_ns1__CategoryPurpose1Choice(soap*, ...) allocate, set required members
/// - ns1__CategoryPurpose1Choice* soap_new_set_ns1__CategoryPurpose1Choice(soap*, ...) allocate, set all public members
/// - ns1__CategoryPurpose1Choice::soap_default(soap*) default initialize members
/// - int soap_read_ns1__CategoryPurpose1Choice(soap*, ns1__CategoryPurpose1Choice*) deserialize from a stream
/// - int soap_write_ns1__CategoryPurpose1Choice(soap*, ns1__CategoryPurpose1Choice*) serialize to a stream
/// - ns1__CategoryPurpose1Choice* ns1__CategoryPurpose1Choice::soap_dup(soap*) returns deep copy of ns1__CategoryPurpose1Choice, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__CategoryPurpose1Choice::soap_del() deep deletes ns1__CategoryPurpose1Choice data members, use only after ns1__CategoryPurpose1Choice::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__CategoryPurpose1Choice::soap_type() returns SOAP_TYPE_ns1__CategoryPurpose1Choice or derived type identifier
class ns1__CategoryPurpose1Choice
{ public:
//  BEGIN CHOICE <xs:choice>
  $ int                                  __union_CategoryPurpose1Choice;	///< Union _ns1__union_CategoryPurpose1Choice selector: set to SOAP_UNION__ns1__union_CategoryPurpose1Choice_<fieldname>
/// Union for choice in ns1__CategoryPurpose1Choice.
    union _ns1__union_CategoryPurpose1Choice
    {
/// Element "Cd" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ExternalCategoryPurpose1Code.
    ns1__ExternalCategoryPurpose1Code*   Cd                            ;	///< Choice of element (one of multiple choices).
/// Element "Prtry" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text*                      Prtry                         ;	///< Choice of element (one of multiple choices).
    }                                    union_CategoryPurpose1Choice  ;
//  END OF CHOICE
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Cheque11 is a complexType.
///
/// @note class ns1__Cheque11 operations:
/// - ns1__Cheque11* soap_new_ns1__Cheque11(soap*) allocate and default initialize
/// - ns1__Cheque11* soap_new_ns1__Cheque11(soap*, int num) allocate and default initialize an array
/// - ns1__Cheque11* soap_new_req_ns1__Cheque11(soap*, ...) allocate, set required members
/// - ns1__Cheque11* soap_new_set_ns1__Cheque11(soap*, ...) allocate, set all public members
/// - ns1__Cheque11::soap_default(soap*) default initialize members
/// - int soap_read_ns1__Cheque11(soap*, ns1__Cheque11*) deserialize from a stream
/// - int soap_write_ns1__Cheque11(soap*, ns1__Cheque11*) serialize to a stream
/// - ns1__Cheque11* ns1__Cheque11::soap_dup(soap*) returns deep copy of ns1__Cheque11, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__Cheque11::soap_del() deep deletes ns1__Cheque11 data members, use only after ns1__Cheque11::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__Cheque11::soap_type() returns SOAP_TYPE_ns1__Cheque11 or derived type identifier
class ns1__Cheque11
{ public:
/// Element "ChqTp" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ChequeType2Code.
    enum ns1__ChequeType2Code*           ChqTp                          0;	///< Optional element.
/// Element "ChqNb" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text*                      ChqNb                          0;	///< Optional element.
/// Element "ChqFr" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":NameAndAddress16.
    ns1__NameAndAddress16*               ChqFr                          0;	///< Optional element.
/// Element "DlvryMtd" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ChequeDeliveryMethod1Choice.
    ns1__ChequeDeliveryMethod1Choice*    DlvryMtd                       0;	///< Optional element.
/// Element "DlvrTo" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":NameAndAddress16.
    ns1__NameAndAddress16*               DlvrTo                         0;	///< Optional element.
/// Element "InstrPrty" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Priority2Code.
    enum ns1__Priority2Code*             InstrPrty                      0;	///< Optional element.
/// Element "ChqMtrtyDt" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ISODate.
    ns1__ISODate*                        ChqMtrtyDt                     0;	///< Optional element.
/// Element "FrmsCd" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text*                      FrmsCd                         0;	///< Optional element.
/// Vector of ns1__Max35Text of length 0..2.
    std::vector<ns1__Max35Text         > MemoFld                        0:2;	///< Multiple elements.
/// Element "RgnlClrZone" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text*                      RgnlClrZone                    0;	///< Optional element.
/// Element "PrtLctn" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text*                      PrtLctn                        0;	///< Optional element.
/// Vector of ns1__Max70Text of length 0..5.
    std::vector<ns1__Max70Text         > Sgntr                          0:5;	///< Multiple elements.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ChequeDeliveryMethod1Choice is a complexType.
///
/// @note class ns1__ChequeDeliveryMethod1Choice operations:
/// - ns1__ChequeDeliveryMethod1Choice* soap_new_ns1__ChequeDeliveryMethod1Choice(soap*) allocate and default initialize
/// - ns1__ChequeDeliveryMethod1Choice* soap_new_ns1__ChequeDeliveryMethod1Choice(soap*, int num) allocate and default initialize an array
/// - ns1__ChequeDeliveryMethod1Choice* soap_new_req_ns1__ChequeDeliveryMethod1Choice(soap*, ...) allocate, set required members
/// - ns1__ChequeDeliveryMethod1Choice* soap_new_set_ns1__ChequeDeliveryMethod1Choice(soap*, ...) allocate, set all public members
/// - ns1__ChequeDeliveryMethod1Choice::soap_default(soap*) default initialize members
/// - int soap_read_ns1__ChequeDeliveryMethod1Choice(soap*, ns1__ChequeDeliveryMethod1Choice*) deserialize from a stream
/// - int soap_write_ns1__ChequeDeliveryMethod1Choice(soap*, ns1__ChequeDeliveryMethod1Choice*) serialize to a stream
/// - ns1__ChequeDeliveryMethod1Choice* ns1__ChequeDeliveryMethod1Choice::soap_dup(soap*) returns deep copy of ns1__ChequeDeliveryMethod1Choice, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__ChequeDeliveryMethod1Choice::soap_del() deep deletes ns1__ChequeDeliveryMethod1Choice data members, use only after ns1__ChequeDeliveryMethod1Choice::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__ChequeDeliveryMethod1Choice::soap_type() returns SOAP_TYPE_ns1__ChequeDeliveryMethod1Choice or derived type identifier
class ns1__ChequeDeliveryMethod1Choice
{ public:
//  BEGIN CHOICE <xs:choice>
  $ int                                  __union_ChequeDeliveryMethod1Choice;	///< Union _ns1__union_ChequeDeliveryMethod1Choice selector: set to SOAP_UNION__ns1__union_ChequeDeliveryMethod1Choice_<fieldname>
/// Union for choice in ns1__ChequeDeliveryMethod1Choice.
    union _ns1__union_ChequeDeliveryMethod1Choice
    {
/// Element "Cd" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ChequeDelivery1Code.
    enum ns1__ChequeDelivery1Code        Cd                            ;	///< Choice of element (one of multiple choices).
/// Element "Prtry" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text*                      Prtry                         ;	///< Choice of element (one of multiple choices).
    }                                    union_ChequeDeliveryMethod1Choice;
//  END OF CHOICE
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ClearingSystemIdentification2Choice is a complexType.
///
/// @note class ns1__ClearingSystemIdentification2Choice operations:
/// - ns1__ClearingSystemIdentification2Choice* soap_new_ns1__ClearingSystemIdentification2Choice(soap*) allocate and default initialize
/// - ns1__ClearingSystemIdentification2Choice* soap_new_ns1__ClearingSystemIdentification2Choice(soap*, int num) allocate and default initialize an array
/// - ns1__ClearingSystemIdentification2Choice* soap_new_req_ns1__ClearingSystemIdentification2Choice(soap*, ...) allocate, set required members
/// - ns1__ClearingSystemIdentification2Choice* soap_new_set_ns1__ClearingSystemIdentification2Choice(soap*, ...) allocate, set all public members
/// - ns1__ClearingSystemIdentification2Choice::soap_default(soap*) default initialize members
/// - int soap_read_ns1__ClearingSystemIdentification2Choice(soap*, ns1__ClearingSystemIdentification2Choice*) deserialize from a stream
/// - int soap_write_ns1__ClearingSystemIdentification2Choice(soap*, ns1__ClearingSystemIdentification2Choice*) serialize to a stream
/// - ns1__ClearingSystemIdentification2Choice* ns1__ClearingSystemIdentification2Choice::soap_dup(soap*) returns deep copy of ns1__ClearingSystemIdentification2Choice, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__ClearingSystemIdentification2Choice::soap_del() deep deletes ns1__ClearingSystemIdentification2Choice data members, use only after ns1__ClearingSystemIdentification2Choice::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__ClearingSystemIdentification2Choice::soap_type() returns SOAP_TYPE_ns1__ClearingSystemIdentification2Choice or derived type identifier
class ns1__ClearingSystemIdentification2Choice
{ public:
//  BEGIN CHOICE <xs:choice>
  $ int                                  __union_ClearingSystemIdentification2Choice;	///< Union _ns1__union_ClearingSystemIdentification2Choice selector: set to SOAP_UNION__ns1__union_ClearingSystemIdentification2Choice_<fieldname>
/// Union for choice in ns1__ClearingSystemIdentification2Choice.
    union _ns1__union_ClearingSystemIdentification2Choice
    {
/// Element "Cd" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ExternalClearingSystemIdentification1Code.
    ns1__ExternalClearingSystemIdentification1Code*  Cd                            ;	///< Choice of element (one of multiple choices).
/// Element "Prtry" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text*                      Prtry                         ;	///< Choice of element (one of multiple choices).
    }                                    union_ClearingSystemIdentification2Choice;
//  END OF CHOICE
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ClearingSystemMemberIdentification2 is a complexType.
///
/// @note class ns1__ClearingSystemMemberIdentification2 operations:
/// - ns1__ClearingSystemMemberIdentification2* soap_new_ns1__ClearingSystemMemberIdentification2(soap*) allocate and default initialize
/// - ns1__ClearingSystemMemberIdentification2* soap_new_ns1__ClearingSystemMemberIdentification2(soap*, int num) allocate and default initialize an array
/// - ns1__ClearingSystemMemberIdentification2* soap_new_req_ns1__ClearingSystemMemberIdentification2(soap*, ...) allocate, set required members
/// - ns1__ClearingSystemMemberIdentification2* soap_new_set_ns1__ClearingSystemMemberIdentification2(soap*, ...) allocate, set all public members
/// - ns1__ClearingSystemMemberIdentification2::soap_default(soap*) default initialize members
/// - int soap_read_ns1__ClearingSystemMemberIdentification2(soap*, ns1__ClearingSystemMemberIdentification2*) deserialize from a stream
/// - int soap_write_ns1__ClearingSystemMemberIdentification2(soap*, ns1__ClearingSystemMemberIdentification2*) serialize to a stream
/// - ns1__ClearingSystemMemberIdentification2* ns1__ClearingSystemMemberIdentification2::soap_dup(soap*) returns deep copy of ns1__ClearingSystemMemberIdentification2, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__ClearingSystemMemberIdentification2::soap_del() deep deletes ns1__ClearingSystemMemberIdentification2 data members, use only after ns1__ClearingSystemMemberIdentification2::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__ClearingSystemMemberIdentification2::soap_type() returns SOAP_TYPE_ns1__ClearingSystemMemberIdentification2 or derived type identifier
class ns1__ClearingSystemMemberIdentification2
{ public:
/// Element "ClrSysId" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ClearingSystemIdentification2Choice.
    ns1__ClearingSystemIdentification2Choice*  ClrSysId                       0;	///< Optional element.
/// Element "MmbId" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text                       MmbId                          1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Contact4 is a complexType.
///
/// @note class ns1__Contact4 operations:
/// - ns1__Contact4* soap_new_ns1__Contact4(soap*) allocate and default initialize
/// - ns1__Contact4* soap_new_ns1__Contact4(soap*, int num) allocate and default initialize an array
/// - ns1__Contact4* soap_new_req_ns1__Contact4(soap*, ...) allocate, set required members
/// - ns1__Contact4* soap_new_set_ns1__Contact4(soap*, ...) allocate, set all public members
/// - ns1__Contact4::soap_default(soap*) default initialize members
/// - int soap_read_ns1__Contact4(soap*, ns1__Contact4*) deserialize from a stream
/// - int soap_write_ns1__Contact4(soap*, ns1__Contact4*) serialize to a stream
/// - ns1__Contact4* ns1__Contact4::soap_dup(soap*) returns deep copy of ns1__Contact4, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__Contact4::soap_del() deep deletes ns1__Contact4 data members, use only after ns1__Contact4::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__Contact4::soap_type() returns SOAP_TYPE_ns1__Contact4 or derived type identifier
class ns1__Contact4
{ public:
/// Element "NmPrfx" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":NamePrefix2Code.
    enum ns1__NamePrefix2Code*           NmPrfx                         0;	///< Optional element.
/// Element "Nm" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max140Text.
    ns1__Max140Text*                     Nm                             0;	///< Optional element.
/// Element "PhneNb" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":PhoneNumber.
    ns1__PhoneNumber*                    PhneNb                         0;	///< Optional element.
/// Element "MobNb" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":PhoneNumber.
    ns1__PhoneNumber*                    MobNb                          0;	///< Optional element.
/// Element "FaxNb" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":PhoneNumber.
    ns1__PhoneNumber*                    FaxNb                          0;	///< Optional element.
/// Element "EmailAdr" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max2048Text.
    ns1__Max2048Text*                    EmailAdr                       0;	///< Optional element.
/// Element "EmailPurp" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text*                      EmailPurp                      0;	///< Optional element.
/// Element "JobTitl" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text*                      JobTitl                        0;	///< Optional element.
/// Element "Rspnsblty" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text*                      Rspnsblty                      0;	///< Optional element.
/// Element "Dept" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max70Text.
    ns1__Max70Text*                      Dept                           0;	///< Optional element.
/// Vector of ns1__OtherContact1* of length 0..unbounded.
    std::vector<ns1__OtherContact1*    > Othr                           0;	///< Multiple elements.
/// Element "PrefrdMtd" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":PreferredContactMethod1Code.
    enum ns1__PreferredContactMethod1Code*  PrefrdMtd                      0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":CreditTransferMandateData1 is a complexType.
///
/// @note class ns1__CreditTransferMandateData1 operations:
/// - ns1__CreditTransferMandateData1* soap_new_ns1__CreditTransferMandateData1(soap*) allocate and default initialize
/// - ns1__CreditTransferMandateData1* soap_new_ns1__CreditTransferMandateData1(soap*, int num) allocate and default initialize an array
/// - ns1__CreditTransferMandateData1* soap_new_req_ns1__CreditTransferMandateData1(soap*, ...) allocate, set required members
/// - ns1__CreditTransferMandateData1* soap_new_set_ns1__CreditTransferMandateData1(soap*, ...) allocate, set all public members
/// - ns1__CreditTransferMandateData1::soap_default(soap*) default initialize members
/// - int soap_read_ns1__CreditTransferMandateData1(soap*, ns1__CreditTransferMandateData1*) deserialize from a stream
/// - int soap_write_ns1__CreditTransferMandateData1(soap*, ns1__CreditTransferMandateData1*) serialize to a stream
/// - ns1__CreditTransferMandateData1* ns1__CreditTransferMandateData1::soap_dup(soap*) returns deep copy of ns1__CreditTransferMandateData1, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__CreditTransferMandateData1::soap_del() deep deletes ns1__CreditTransferMandateData1 data members, use only after ns1__CreditTransferMandateData1::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__CreditTransferMandateData1::soap_type() returns SOAP_TYPE_ns1__CreditTransferMandateData1 or derived type identifier
class ns1__CreditTransferMandateData1
{ public:
/// Element "MndtId" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text*                      MndtId                         0;	///< Optional element.
/// Element "Tp" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":MandateTypeInformation2.
    ns1__MandateTypeInformation2*        Tp                             0;	///< Optional element.
/// Element "DtOfSgntr" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ISODate.
    ns1__ISODate*                        DtOfSgntr                      0;	///< Optional element.
/// Element "DtOfVrfctn" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ISODateTime.
    ns1__ISODateTime*                    DtOfVrfctn                     0;	///< Optional element.
/// Element "ElctrncSgntr" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max10KBinary.
    ns1__Max10KBinary*                   ElctrncSgntr                   0;	///< Optional element.
/// Element "FrstPmtDt" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ISODate.
    ns1__ISODate*                        FrstPmtDt                      0;	///< Optional element.
/// Element "FnlPmtDt" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ISODate.
    ns1__ISODate*                        FnlPmtDt                       0;	///< Optional element.
/// Element "Frqcy" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Frequency36Choice.
    ns1__Frequency36Choice*              Frqcy                          0;	///< Optional element.
/// Element "Rsn" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":MandateSetupReason1Choice.
    ns1__MandateSetupReason1Choice*      Rsn                            0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":CreditTransferTransaction54 is a complexType.
///
/// @note class ns1__CreditTransferTransaction54 operations:
/// - ns1__CreditTransferTransaction54* soap_new_ns1__CreditTransferTransaction54(soap*) allocate and default initialize
/// - ns1__CreditTransferTransaction54* soap_new_ns1__CreditTransferTransaction54(soap*, int num) allocate and default initialize an array
/// - ns1__CreditTransferTransaction54* soap_new_req_ns1__CreditTransferTransaction54(soap*, ...) allocate, set required members
/// - ns1__CreditTransferTransaction54* soap_new_set_ns1__CreditTransferTransaction54(soap*, ...) allocate, set all public members
/// - ns1__CreditTransferTransaction54::soap_default(soap*) default initialize members
/// - int soap_read_ns1__CreditTransferTransaction54(soap*, ns1__CreditTransferTransaction54*) deserialize from a stream
/// - int soap_write_ns1__CreditTransferTransaction54(soap*, ns1__CreditTransferTransaction54*) serialize to a stream
/// - ns1__CreditTransferTransaction54* ns1__CreditTransferTransaction54::soap_dup(soap*) returns deep copy of ns1__CreditTransferTransaction54, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__CreditTransferTransaction54::soap_del() deep deletes ns1__CreditTransferTransaction54 data members, use only after ns1__CreditTransferTransaction54::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__CreditTransferTransaction54::soap_type() returns SOAP_TYPE_ns1__CreditTransferTransaction54 or derived type identifier
class ns1__CreditTransferTransaction54
{ public:
/// Element "PmtId" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":PaymentIdentification6.
    ns1__PaymentIdentification6*         PmtId                          1;	///< Required element.
/// Element "PmtTpInf" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":PaymentTypeInformation26.
    ns1__PaymentTypeInformation26*       PmtTpInf                       0;	///< Optional element.
/// Element "Amt" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":AmountType4Choice.
    ns1__AmountType4Choice*              Amt                            1;	///< Required element.
/// Element "XchgRateInf" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ExchangeRate1.
    ns1__ExchangeRate1*                  XchgRateInf                    0;	///< Optional element.
/// Element "ChrgBr" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ChargeBearerType1Code.
    enum ns1__ChargeBearerType1Code*     ChrgBr                         0;	///< Optional element.
/// Element "MndtRltdInf" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":CreditTransferMandateData1.
    ns1__CreditTransferMandateData1*     MndtRltdInf                    0;	///< Optional element.
/// Element "ChqInstr" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Cheque11.
    ns1__Cheque11*                       ChqInstr                       0;	///< Optional element.
/// Element "UltmtDbtr" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":PartyIdentification135.
    ns1__PartyIdentification135*         UltmtDbtr                      0;	///< Optional element.
/// Element "IntrmyAgt1" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":BranchAndFinancialInstitutionIdentification6.
    ns1__BranchAndFinancialInstitutionIdentification6*  IntrmyAgt1                     0;	///< Optional element.
/// Element "IntrmyAgt1Acct" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":CashAccount40.
    ns1__CashAccount40*                  IntrmyAgt1Acct                 0;	///< Optional element.
/// Element "IntrmyAgt2" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":BranchAndFinancialInstitutionIdentification6.
    ns1__BranchAndFinancialInstitutionIdentification6*  IntrmyAgt2                     0;	///< Optional element.
/// Element "IntrmyAgt2Acct" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":CashAccount40.
    ns1__CashAccount40*                  IntrmyAgt2Acct                 0;	///< Optional element.
/// Element "IntrmyAgt3" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":BranchAndFinancialInstitutionIdentification6.
    ns1__BranchAndFinancialInstitutionIdentification6*  IntrmyAgt3                     0;	///< Optional element.
/// Element "IntrmyAgt3Acct" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":CashAccount40.
    ns1__CashAccount40*                  IntrmyAgt3Acct                 0;	///< Optional element.
/// Element "CdtrAgt" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":BranchAndFinancialInstitutionIdentification6.
    ns1__BranchAndFinancialInstitutionIdentification6*  CdtrAgt                        0;	///< Optional element.
/// Element "CdtrAgtAcct" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":CashAccount40.
    ns1__CashAccount40*                  CdtrAgtAcct                    0;	///< Optional element.
/// Element "Cdtr" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":PartyIdentification135.
    ns1__PartyIdentification135*         Cdtr                           0;	///< Optional element.
/// Element "CdtrAcct" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":CashAccount40.
    ns1__CashAccount40*                  CdtrAcct                       0;	///< Optional element.
/// Element "UltmtCdtr" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":PartyIdentification135.
    ns1__PartyIdentification135*         UltmtCdtr                      0;	///< Optional element.
/// Vector of ns1__InstructionForCreditorAgent3* of length 0..unbounded.
    std::vector<ns1__InstructionForCreditorAgent3*> InstrForCdtrAgt                0;	///< Multiple elements.
/// Element "InstrForDbtrAgt" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":InstructionForDebtorAgent1.
    ns1__InstructionForDebtorAgent1*     InstrForDbtrAgt                0;	///< Optional element.
/// Element "Purp" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Purpose2Choice.
    ns1__Purpose2Choice*                 Purp                           0;	///< Optional element.
/// Vector of ns1__RegulatoryReporting3* of length 0..10.
    std::vector<ns1__RegulatoryReporting3*> RgltryRptg                     0:10;	///< Multiple elements.
/// Element "Tax" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":TaxInformation10.
    ns1__TaxInformation10*               Tax                            0;	///< Optional element.
/// Vector of ns1__RemittanceLocation7* of length 0..10.
    std::vector<ns1__RemittanceLocation7*> RltdRmtInf                     0:10;	///< Multiple elements.
/// Element "RmtInf" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":RemittanceInformation21.
    ns1__RemittanceInformation21*        RmtInf                         0;	///< Optional element.
/// Vector of ns1__SupplementaryData1* of length 0..unbounded.
    std::vector<ns1__SupplementaryData1*> SplmtryData                    0;	///< Multiple elements.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":CreditorReferenceInformation2 is a complexType.
///
/// @note class ns1__CreditorReferenceInformation2 operations:
/// - ns1__CreditorReferenceInformation2* soap_new_ns1__CreditorReferenceInformation2(soap*) allocate and default initialize
/// - ns1__CreditorReferenceInformation2* soap_new_ns1__CreditorReferenceInformation2(soap*, int num) allocate and default initialize an array
/// - ns1__CreditorReferenceInformation2* soap_new_req_ns1__CreditorReferenceInformation2(soap*, ...) allocate, set required members
/// - ns1__CreditorReferenceInformation2* soap_new_set_ns1__CreditorReferenceInformation2(soap*, ...) allocate, set all public members
/// - ns1__CreditorReferenceInformation2::soap_default(soap*) default initialize members
/// - int soap_read_ns1__CreditorReferenceInformation2(soap*, ns1__CreditorReferenceInformation2*) deserialize from a stream
/// - int soap_write_ns1__CreditorReferenceInformation2(soap*, ns1__CreditorReferenceInformation2*) serialize to a stream
/// - ns1__CreditorReferenceInformation2* ns1__CreditorReferenceInformation2::soap_dup(soap*) returns deep copy of ns1__CreditorReferenceInformation2, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__CreditorReferenceInformation2::soap_del() deep deletes ns1__CreditorReferenceInformation2 data members, use only after ns1__CreditorReferenceInformation2::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__CreditorReferenceInformation2::soap_type() returns SOAP_TYPE_ns1__CreditorReferenceInformation2 or derived type identifier
class ns1__CreditorReferenceInformation2
{ public:
/// Element "Tp" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":CreditorReferenceType2.
    ns1__CreditorReferenceType2*         Tp                             0;	///< Optional element.
/// Element "Ref" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text*                      Ref                            0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":CreditorReferenceType1Choice is a complexType.
///
/// @note class ns1__CreditorReferenceType1Choice operations:
/// - ns1__CreditorReferenceType1Choice* soap_new_ns1__CreditorReferenceType1Choice(soap*) allocate and default initialize
/// - ns1__CreditorReferenceType1Choice* soap_new_ns1__CreditorReferenceType1Choice(soap*, int num) allocate and default initialize an array
/// - ns1__CreditorReferenceType1Choice* soap_new_req_ns1__CreditorReferenceType1Choice(soap*, ...) allocate, set required members
/// - ns1__CreditorReferenceType1Choice* soap_new_set_ns1__CreditorReferenceType1Choice(soap*, ...) allocate, set all public members
/// - ns1__CreditorReferenceType1Choice::soap_default(soap*) default initialize members
/// - int soap_read_ns1__CreditorReferenceType1Choice(soap*, ns1__CreditorReferenceType1Choice*) deserialize from a stream
/// - int soap_write_ns1__CreditorReferenceType1Choice(soap*, ns1__CreditorReferenceType1Choice*) serialize to a stream
/// - ns1__CreditorReferenceType1Choice* ns1__CreditorReferenceType1Choice::soap_dup(soap*) returns deep copy of ns1__CreditorReferenceType1Choice, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__CreditorReferenceType1Choice::soap_del() deep deletes ns1__CreditorReferenceType1Choice data members, use only after ns1__CreditorReferenceType1Choice::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__CreditorReferenceType1Choice::soap_type() returns SOAP_TYPE_ns1__CreditorReferenceType1Choice or derived type identifier
class ns1__CreditorReferenceType1Choice
{ public:
//  BEGIN CHOICE <xs:choice>
  $ int                                  __union_CreditorReferenceType1Choice;	///< Union _ns1__union_CreditorReferenceType1Choice selector: set to SOAP_UNION__ns1__union_CreditorReferenceType1Choice_<fieldname>
/// Union for choice in ns1__CreditorReferenceType1Choice.
    union _ns1__union_CreditorReferenceType1Choice
    {
/// Element "Cd" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":DocumentType3Code.
    enum ns1__DocumentType3Code          Cd                            ;	///< Choice of element (one of multiple choices).
/// Element "Prtry" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text*                      Prtry                         ;	///< Choice of element (one of multiple choices).
    }                                    union_CreditorReferenceType1Choice;
//  END OF CHOICE
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":CreditorReferenceType2 is a complexType.
///
/// @note class ns1__CreditorReferenceType2 operations:
/// - ns1__CreditorReferenceType2* soap_new_ns1__CreditorReferenceType2(soap*) allocate and default initialize
/// - ns1__CreditorReferenceType2* soap_new_ns1__CreditorReferenceType2(soap*, int num) allocate and default initialize an array
/// - ns1__CreditorReferenceType2* soap_new_req_ns1__CreditorReferenceType2(soap*, ...) allocate, set required members
/// - ns1__CreditorReferenceType2* soap_new_set_ns1__CreditorReferenceType2(soap*, ...) allocate, set all public members
/// - ns1__CreditorReferenceType2::soap_default(soap*) default initialize members
/// - int soap_read_ns1__CreditorReferenceType2(soap*, ns1__CreditorReferenceType2*) deserialize from a stream
/// - int soap_write_ns1__CreditorReferenceType2(soap*, ns1__CreditorReferenceType2*) serialize to a stream
/// - ns1__CreditorReferenceType2* ns1__CreditorReferenceType2::soap_dup(soap*) returns deep copy of ns1__CreditorReferenceType2, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__CreditorReferenceType2::soap_del() deep deletes ns1__CreditorReferenceType2 data members, use only after ns1__CreditorReferenceType2::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__CreditorReferenceType2::soap_type() returns SOAP_TYPE_ns1__CreditorReferenceType2 or derived type identifier
class ns1__CreditorReferenceType2
{ public:
/// Element "CdOrPrtry" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":CreditorReferenceType1Choice.
    ns1__CreditorReferenceType1Choice*   CdOrPrtry                      1;	///< Required element.
/// Element "Issr" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text*                      Issr                           0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":CustomerCreditTransferInitiationV11 is a complexType.
///
/// @note class ns1__CustomerCreditTransferInitiationV11 operations:
/// - ns1__CustomerCreditTransferInitiationV11* soap_new_ns1__CustomerCreditTransferInitiationV11(soap*) allocate and default initialize
/// - ns1__CustomerCreditTransferInitiationV11* soap_new_ns1__CustomerCreditTransferInitiationV11(soap*, int num) allocate and default initialize an array
/// - ns1__CustomerCreditTransferInitiationV11* soap_new_req_ns1__CustomerCreditTransferInitiationV11(soap*, ...) allocate, set required members
/// - ns1__CustomerCreditTransferInitiationV11* soap_new_set_ns1__CustomerCreditTransferInitiationV11(soap*, ...) allocate, set all public members
/// - ns1__CustomerCreditTransferInitiationV11::soap_default(soap*) default initialize members
/// - int soap_read_ns1__CustomerCreditTransferInitiationV11(soap*, ns1__CustomerCreditTransferInitiationV11*) deserialize from a stream
/// - int soap_write_ns1__CustomerCreditTransferInitiationV11(soap*, ns1__CustomerCreditTransferInitiationV11*) serialize to a stream
/// - ns1__CustomerCreditTransferInitiationV11* ns1__CustomerCreditTransferInitiationV11::soap_dup(soap*) returns deep copy of ns1__CustomerCreditTransferInitiationV11, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__CustomerCreditTransferInitiationV11::soap_del() deep deletes ns1__CustomerCreditTransferInitiationV11 data members, use only after ns1__CustomerCreditTransferInitiationV11::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__CustomerCreditTransferInitiationV11::soap_type() returns SOAP_TYPE_ns1__CustomerCreditTransferInitiationV11 or derived type identifier
class ns1__CustomerCreditTransferInitiationV11
{ public:
/// Element "GrpHdr" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":GroupHeader95.
    ns1__GroupHeader95*                  GrpHdr                         1;	///< Required element.
/// Vector of ns1__PaymentInstruction40* of length 1..unbounded.
    std::vector<ns1__PaymentInstruction40*> PmtInf                         1;	///< Multiple elements.
/// Vector of ns1__SupplementaryData1* of length 0..unbounded.
    std::vector<ns1__SupplementaryData1*> SplmtryData                    0;	///< Multiple elements.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":DateAndDateTime2Choice is a complexType.
///
/// @note class ns1__DateAndDateTime2Choice operations:
/// - ns1__DateAndDateTime2Choice* soap_new_ns1__DateAndDateTime2Choice(soap*) allocate and default initialize
/// - ns1__DateAndDateTime2Choice* soap_new_ns1__DateAndDateTime2Choice(soap*, int num) allocate and default initialize an array
/// - ns1__DateAndDateTime2Choice* soap_new_req_ns1__DateAndDateTime2Choice(soap*, ...) allocate, set required members
/// - ns1__DateAndDateTime2Choice* soap_new_set_ns1__DateAndDateTime2Choice(soap*, ...) allocate, set all public members
/// - ns1__DateAndDateTime2Choice::soap_default(soap*) default initialize members
/// - int soap_read_ns1__DateAndDateTime2Choice(soap*, ns1__DateAndDateTime2Choice*) deserialize from a stream
/// - int soap_write_ns1__DateAndDateTime2Choice(soap*, ns1__DateAndDateTime2Choice*) serialize to a stream
/// - ns1__DateAndDateTime2Choice* ns1__DateAndDateTime2Choice::soap_dup(soap*) returns deep copy of ns1__DateAndDateTime2Choice, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__DateAndDateTime2Choice::soap_del() deep deletes ns1__DateAndDateTime2Choice data members, use only after ns1__DateAndDateTime2Choice::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__DateAndDateTime2Choice::soap_type() returns SOAP_TYPE_ns1__DateAndDateTime2Choice or derived type identifier
class ns1__DateAndDateTime2Choice
{ public:
//  BEGIN CHOICE <xs:choice>
  $ int                                  __union_DateAndDateTime2Choice;	///< Union _ns1__union_DateAndDateTime2Choice selector: set to SOAP_UNION__ns1__union_DateAndDateTime2Choice_<fieldname>
/// Union for choice in ns1__DateAndDateTime2Choice.
    union _ns1__union_DateAndDateTime2Choice
    {
/// Element "Dt" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ISODate.
    ns1__ISODate*                        Dt                            ;	///< Choice of element (one of multiple choices).
/// Element "DtTm" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ISODateTime.
    ns1__ISODateTime*                    DtTm                          ;	///< Choice of element (one of multiple choices).
    }                                    union_DateAndDateTime2Choice  ;
//  END OF CHOICE
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":DateAndPlaceOfBirth1 is a complexType.
///
/// @note class ns1__DateAndPlaceOfBirth1 operations:
/// - ns1__DateAndPlaceOfBirth1* soap_new_ns1__DateAndPlaceOfBirth1(soap*) allocate and default initialize
/// - ns1__DateAndPlaceOfBirth1* soap_new_ns1__DateAndPlaceOfBirth1(soap*, int num) allocate and default initialize an array
/// - ns1__DateAndPlaceOfBirth1* soap_new_req_ns1__DateAndPlaceOfBirth1(soap*, ...) allocate, set required members
/// - ns1__DateAndPlaceOfBirth1* soap_new_set_ns1__DateAndPlaceOfBirth1(soap*, ...) allocate, set all public members
/// - ns1__DateAndPlaceOfBirth1::soap_default(soap*) default initialize members
/// - int soap_read_ns1__DateAndPlaceOfBirth1(soap*, ns1__DateAndPlaceOfBirth1*) deserialize from a stream
/// - int soap_write_ns1__DateAndPlaceOfBirth1(soap*, ns1__DateAndPlaceOfBirth1*) serialize to a stream
/// - ns1__DateAndPlaceOfBirth1* ns1__DateAndPlaceOfBirth1::soap_dup(soap*) returns deep copy of ns1__DateAndPlaceOfBirth1, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__DateAndPlaceOfBirth1::soap_del() deep deletes ns1__DateAndPlaceOfBirth1 data members, use only after ns1__DateAndPlaceOfBirth1::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__DateAndPlaceOfBirth1::soap_type() returns SOAP_TYPE_ns1__DateAndPlaceOfBirth1 or derived type identifier
class ns1__DateAndPlaceOfBirth1
{ public:
/// Element "BirthDt" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ISODate.
    ns1__ISODate                         BirthDt                        1;	///< Required element.
/// Element "PrvcOfBirth" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text*                      PrvcOfBirth                    0;	///< Optional element.
/// Element "CityOfBirth" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text                       CityOfBirth                    1;	///< Required element.
/// Element "CtryOfBirth" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":CountryCode.
    ns1__CountryCode                     CtryOfBirth                    1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":DatePeriod2 is a complexType.
///
/// @note class ns1__DatePeriod2 operations:
/// - ns1__DatePeriod2* soap_new_ns1__DatePeriod2(soap*) allocate and default initialize
/// - ns1__DatePeriod2* soap_new_ns1__DatePeriod2(soap*, int num) allocate and default initialize an array
/// - ns1__DatePeriod2* soap_new_req_ns1__DatePeriod2(soap*, ...) allocate, set required members
/// - ns1__DatePeriod2* soap_new_set_ns1__DatePeriod2(soap*, ...) allocate, set all public members
/// - ns1__DatePeriod2::soap_default(soap*) default initialize members
/// - int soap_read_ns1__DatePeriod2(soap*, ns1__DatePeriod2*) deserialize from a stream
/// - int soap_write_ns1__DatePeriod2(soap*, ns1__DatePeriod2*) serialize to a stream
/// - ns1__DatePeriod2* ns1__DatePeriod2::soap_dup(soap*) returns deep copy of ns1__DatePeriod2, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__DatePeriod2::soap_del() deep deletes ns1__DatePeriod2 data members, use only after ns1__DatePeriod2::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__DatePeriod2::soap_type() returns SOAP_TYPE_ns1__DatePeriod2 or derived type identifier
class ns1__DatePeriod2
{ public:
/// Element "FrDt" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ISODate.
    ns1__ISODate                         FrDt                           1;	///< Required element.
/// Element "ToDt" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ISODate.
    ns1__ISODate                         ToDt                           1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":DiscountAmountAndType1 is a complexType.
///
/// @note class ns1__DiscountAmountAndType1 operations:
/// - ns1__DiscountAmountAndType1* soap_new_ns1__DiscountAmountAndType1(soap*) allocate and default initialize
/// - ns1__DiscountAmountAndType1* soap_new_ns1__DiscountAmountAndType1(soap*, int num) allocate and default initialize an array
/// - ns1__DiscountAmountAndType1* soap_new_req_ns1__DiscountAmountAndType1(soap*, ...) allocate, set required members
/// - ns1__DiscountAmountAndType1* soap_new_set_ns1__DiscountAmountAndType1(soap*, ...) allocate, set all public members
/// - ns1__DiscountAmountAndType1::soap_default(soap*) default initialize members
/// - int soap_read_ns1__DiscountAmountAndType1(soap*, ns1__DiscountAmountAndType1*) deserialize from a stream
/// - int soap_write_ns1__DiscountAmountAndType1(soap*, ns1__DiscountAmountAndType1*) serialize to a stream
/// - ns1__DiscountAmountAndType1* ns1__DiscountAmountAndType1::soap_dup(soap*) returns deep copy of ns1__DiscountAmountAndType1, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__DiscountAmountAndType1::soap_del() deep deletes ns1__DiscountAmountAndType1 data members, use only after ns1__DiscountAmountAndType1::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__DiscountAmountAndType1::soap_type() returns SOAP_TYPE_ns1__DiscountAmountAndType1 or derived type identifier
class ns1__DiscountAmountAndType1
{ public:
/// Element "Tp" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":DiscountAmountType1Choice.
    ns1__DiscountAmountType1Choice*      Tp                             0;	///< Optional element.
/// Element "Amt" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ActiveOrHistoricCurrencyAndAmount.
    ns1__ActiveOrHistoricCurrencyAndAmount*  Amt                            1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":DiscountAmountType1Choice is a complexType.
///
/// @note class ns1__DiscountAmountType1Choice operations:
/// - ns1__DiscountAmountType1Choice* soap_new_ns1__DiscountAmountType1Choice(soap*) allocate and default initialize
/// - ns1__DiscountAmountType1Choice* soap_new_ns1__DiscountAmountType1Choice(soap*, int num) allocate and default initialize an array
/// - ns1__DiscountAmountType1Choice* soap_new_req_ns1__DiscountAmountType1Choice(soap*, ...) allocate, set required members
/// - ns1__DiscountAmountType1Choice* soap_new_set_ns1__DiscountAmountType1Choice(soap*, ...) allocate, set all public members
/// - ns1__DiscountAmountType1Choice::soap_default(soap*) default initialize members
/// - int soap_read_ns1__DiscountAmountType1Choice(soap*, ns1__DiscountAmountType1Choice*) deserialize from a stream
/// - int soap_write_ns1__DiscountAmountType1Choice(soap*, ns1__DiscountAmountType1Choice*) serialize to a stream
/// - ns1__DiscountAmountType1Choice* ns1__DiscountAmountType1Choice::soap_dup(soap*) returns deep copy of ns1__DiscountAmountType1Choice, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__DiscountAmountType1Choice::soap_del() deep deletes ns1__DiscountAmountType1Choice data members, use only after ns1__DiscountAmountType1Choice::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__DiscountAmountType1Choice::soap_type() returns SOAP_TYPE_ns1__DiscountAmountType1Choice or derived type identifier
class ns1__DiscountAmountType1Choice
{ public:
//  BEGIN CHOICE <xs:choice>
  $ int                                  __union_DiscountAmountType1Choice;	///< Union _ns1__union_DiscountAmountType1Choice selector: set to SOAP_UNION__ns1__union_DiscountAmountType1Choice_<fieldname>
/// Union for choice in ns1__DiscountAmountType1Choice.
    union _ns1__union_DiscountAmountType1Choice
    {
/// Element "Cd" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ExternalDiscountAmountType1Code.
    ns1__ExternalDiscountAmountType1Code*  Cd                            ;	///< Choice of element (one of multiple choices).
/// Element "Prtry" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text*                      Prtry                         ;	///< Choice of element (one of multiple choices).
    }                                    union_DiscountAmountType1Choice;
//  END OF CHOICE
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Document is a complexType.
///
/// @note class ns1__Document operations:
/// - ns1__Document* soap_new_ns1__Document(soap*) allocate and default initialize
/// - ns1__Document* soap_new_ns1__Document(soap*, int num) allocate and default initialize an array
/// - ns1__Document* soap_new_req_ns1__Document(soap*, ...) allocate, set required members
/// - ns1__Document* soap_new_set_ns1__Document(soap*, ...) allocate, set all public members
/// - ns1__Document::soap_default(soap*) default initialize members
/// - int soap_read_ns1__Document(soap*, ns1__Document*) deserialize from a stream
/// - int soap_write_ns1__Document(soap*, ns1__Document*) serialize to a stream
/// - ns1__Document* ns1__Document::soap_dup(soap*) returns deep copy of ns1__Document, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__Document::soap_del() deep deletes ns1__Document data members, use only after ns1__Document::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__Document::soap_type() returns SOAP_TYPE_ns1__Document or derived type identifier
class ns1__Document
{ public:
/// Element "CstmrCdtTrfInitn" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":CustomerCreditTransferInitiationV11.
    ns1__CustomerCreditTransferInitiationV11*  CstmrCdtTrfInitn               1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":DocumentAdjustment1 is a complexType.
///
/// @note class ns1__DocumentAdjustment1 operations:
/// - ns1__DocumentAdjustment1* soap_new_ns1__DocumentAdjustment1(soap*) allocate and default initialize
/// - ns1__DocumentAdjustment1* soap_new_ns1__DocumentAdjustment1(soap*, int num) allocate and default initialize an array
/// - ns1__DocumentAdjustment1* soap_new_req_ns1__DocumentAdjustment1(soap*, ...) allocate, set required members
/// - ns1__DocumentAdjustment1* soap_new_set_ns1__DocumentAdjustment1(soap*, ...) allocate, set all public members
/// - ns1__DocumentAdjustment1::soap_default(soap*) default initialize members
/// - int soap_read_ns1__DocumentAdjustment1(soap*, ns1__DocumentAdjustment1*) deserialize from a stream
/// - int soap_write_ns1__DocumentAdjustment1(soap*, ns1__DocumentAdjustment1*) serialize to a stream
/// - ns1__DocumentAdjustment1* ns1__DocumentAdjustment1::soap_dup(soap*) returns deep copy of ns1__DocumentAdjustment1, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__DocumentAdjustment1::soap_del() deep deletes ns1__DocumentAdjustment1 data members, use only after ns1__DocumentAdjustment1::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__DocumentAdjustment1::soap_type() returns SOAP_TYPE_ns1__DocumentAdjustment1 or derived type identifier
class ns1__DocumentAdjustment1
{ public:
/// Element "Amt" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ActiveOrHistoricCurrencyAndAmount.
    ns1__ActiveOrHistoricCurrencyAndAmount*  Amt                            1;	///< Required element.
/// Element "CdtDbtInd" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":CreditDebitCode.
    enum ns1__CreditDebitCode*           CdtDbtInd                      0;	///< Optional element.
/// Element "Rsn" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max4Text.
    ns1__Max4Text*                       Rsn                            0;	///< Optional element.
/// Element "AddtlInf" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max140Text.
    ns1__Max140Text*                     AddtlInf                       0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":DocumentLineIdentification1 is a complexType.
///
/// @note class ns1__DocumentLineIdentification1 operations:
/// - ns1__DocumentLineIdentification1* soap_new_ns1__DocumentLineIdentification1(soap*) allocate and default initialize
/// - ns1__DocumentLineIdentification1* soap_new_ns1__DocumentLineIdentification1(soap*, int num) allocate and default initialize an array
/// - ns1__DocumentLineIdentification1* soap_new_req_ns1__DocumentLineIdentification1(soap*, ...) allocate, set required members
/// - ns1__DocumentLineIdentification1* soap_new_set_ns1__DocumentLineIdentification1(soap*, ...) allocate, set all public members
/// - ns1__DocumentLineIdentification1::soap_default(soap*) default initialize members
/// - int soap_read_ns1__DocumentLineIdentification1(soap*, ns1__DocumentLineIdentification1*) deserialize from a stream
/// - int soap_write_ns1__DocumentLineIdentification1(soap*, ns1__DocumentLineIdentification1*) serialize to a stream
/// - ns1__DocumentLineIdentification1* ns1__DocumentLineIdentification1::soap_dup(soap*) returns deep copy of ns1__DocumentLineIdentification1, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__DocumentLineIdentification1::soap_del() deep deletes ns1__DocumentLineIdentification1 data members, use only after ns1__DocumentLineIdentification1::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__DocumentLineIdentification1::soap_type() returns SOAP_TYPE_ns1__DocumentLineIdentification1 or derived type identifier
class ns1__DocumentLineIdentification1
{ public:
/// Element "Tp" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":DocumentLineType1.
    ns1__DocumentLineType1*              Tp                             0;	///< Optional element.
/// Element "Nb" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text*                      Nb                             0;	///< Optional element.
/// Element "RltdDt" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ISODate.
    ns1__ISODate*                        RltdDt                         0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":DocumentLineInformation1 is a complexType.
///
/// @note class ns1__DocumentLineInformation1 operations:
/// - ns1__DocumentLineInformation1* soap_new_ns1__DocumentLineInformation1(soap*) allocate and default initialize
/// - ns1__DocumentLineInformation1* soap_new_ns1__DocumentLineInformation1(soap*, int num) allocate and default initialize an array
/// - ns1__DocumentLineInformation1* soap_new_req_ns1__DocumentLineInformation1(soap*, ...) allocate, set required members
/// - ns1__DocumentLineInformation1* soap_new_set_ns1__DocumentLineInformation1(soap*, ...) allocate, set all public members
/// - ns1__DocumentLineInformation1::soap_default(soap*) default initialize members
/// - int soap_read_ns1__DocumentLineInformation1(soap*, ns1__DocumentLineInformation1*) deserialize from a stream
/// - int soap_write_ns1__DocumentLineInformation1(soap*, ns1__DocumentLineInformation1*) serialize to a stream
/// - ns1__DocumentLineInformation1* ns1__DocumentLineInformation1::soap_dup(soap*) returns deep copy of ns1__DocumentLineInformation1, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__DocumentLineInformation1::soap_del() deep deletes ns1__DocumentLineInformation1 data members, use only after ns1__DocumentLineInformation1::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__DocumentLineInformation1::soap_type() returns SOAP_TYPE_ns1__DocumentLineInformation1 or derived type identifier
class ns1__DocumentLineInformation1
{ public:
/// Vector of ns1__DocumentLineIdentification1* of length 1..unbounded.
    std::vector<ns1__DocumentLineIdentification1*> Id                             1;	///< Multiple elements.
/// Element "Desc" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max2048Text.
    ns1__Max2048Text*                    Desc                           0;	///< Optional element.
/// Element "Amt" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":RemittanceAmount3.
    ns1__RemittanceAmount3*              Amt                            0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":DocumentLineType1 is a complexType.
///
/// @note class ns1__DocumentLineType1 operations:
/// - ns1__DocumentLineType1* soap_new_ns1__DocumentLineType1(soap*) allocate and default initialize
/// - ns1__DocumentLineType1* soap_new_ns1__DocumentLineType1(soap*, int num) allocate and default initialize an array
/// - ns1__DocumentLineType1* soap_new_req_ns1__DocumentLineType1(soap*, ...) allocate, set required members
/// - ns1__DocumentLineType1* soap_new_set_ns1__DocumentLineType1(soap*, ...) allocate, set all public members
/// - ns1__DocumentLineType1::soap_default(soap*) default initialize members
/// - int soap_read_ns1__DocumentLineType1(soap*, ns1__DocumentLineType1*) deserialize from a stream
/// - int soap_write_ns1__DocumentLineType1(soap*, ns1__DocumentLineType1*) serialize to a stream
/// - ns1__DocumentLineType1* ns1__DocumentLineType1::soap_dup(soap*) returns deep copy of ns1__DocumentLineType1, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__DocumentLineType1::soap_del() deep deletes ns1__DocumentLineType1 data members, use only after ns1__DocumentLineType1::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__DocumentLineType1::soap_type() returns SOAP_TYPE_ns1__DocumentLineType1 or derived type identifier
class ns1__DocumentLineType1
{ public:
/// Element "CdOrPrtry" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":DocumentLineType1Choice.
    ns1__DocumentLineType1Choice*        CdOrPrtry                      1;	///< Required element.
/// Element "Issr" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text*                      Issr                           0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":DocumentLineType1Choice is a complexType.
///
/// @note class ns1__DocumentLineType1Choice operations:
/// - ns1__DocumentLineType1Choice* soap_new_ns1__DocumentLineType1Choice(soap*) allocate and default initialize
/// - ns1__DocumentLineType1Choice* soap_new_ns1__DocumentLineType1Choice(soap*, int num) allocate and default initialize an array
/// - ns1__DocumentLineType1Choice* soap_new_req_ns1__DocumentLineType1Choice(soap*, ...) allocate, set required members
/// - ns1__DocumentLineType1Choice* soap_new_set_ns1__DocumentLineType1Choice(soap*, ...) allocate, set all public members
/// - ns1__DocumentLineType1Choice::soap_default(soap*) default initialize members
/// - int soap_read_ns1__DocumentLineType1Choice(soap*, ns1__DocumentLineType1Choice*) deserialize from a stream
/// - int soap_write_ns1__DocumentLineType1Choice(soap*, ns1__DocumentLineType1Choice*) serialize to a stream
/// - ns1__DocumentLineType1Choice* ns1__DocumentLineType1Choice::soap_dup(soap*) returns deep copy of ns1__DocumentLineType1Choice, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__DocumentLineType1Choice::soap_del() deep deletes ns1__DocumentLineType1Choice data members, use only after ns1__DocumentLineType1Choice::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__DocumentLineType1Choice::soap_type() returns SOAP_TYPE_ns1__DocumentLineType1Choice or derived type identifier
class ns1__DocumentLineType1Choice
{ public:
//  BEGIN CHOICE <xs:choice>
  $ int                                  __union_DocumentLineType1Choice;	///< Union _ns1__union_DocumentLineType1Choice selector: set to SOAP_UNION__ns1__union_DocumentLineType1Choice_<fieldname>
/// Union for choice in ns1__DocumentLineType1Choice.
    union _ns1__union_DocumentLineType1Choice
    {
/// Element "Cd" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ExternalDocumentLineType1Code.
    ns1__ExternalDocumentLineType1Code*  Cd                            ;	///< Choice of element (one of multiple choices).
/// Element "Prtry" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text*                      Prtry                         ;	///< Choice of element (one of multiple choices).
    }                                    union_DocumentLineType1Choice ;
//  END OF CHOICE
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":EquivalentAmount2 is a complexType.
///
/// @note class ns1__EquivalentAmount2 operations:
/// - ns1__EquivalentAmount2* soap_new_ns1__EquivalentAmount2(soap*) allocate and default initialize
/// - ns1__EquivalentAmount2* soap_new_ns1__EquivalentAmount2(soap*, int num) allocate and default initialize an array
/// - ns1__EquivalentAmount2* soap_new_req_ns1__EquivalentAmount2(soap*, ...) allocate, set required members
/// - ns1__EquivalentAmount2* soap_new_set_ns1__EquivalentAmount2(soap*, ...) allocate, set all public members
/// - ns1__EquivalentAmount2::soap_default(soap*) default initialize members
/// - int soap_read_ns1__EquivalentAmount2(soap*, ns1__EquivalentAmount2*) deserialize from a stream
/// - int soap_write_ns1__EquivalentAmount2(soap*, ns1__EquivalentAmount2*) serialize to a stream
/// - ns1__EquivalentAmount2* ns1__EquivalentAmount2::soap_dup(soap*) returns deep copy of ns1__EquivalentAmount2, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__EquivalentAmount2::soap_del() deep deletes ns1__EquivalentAmount2 data members, use only after ns1__EquivalentAmount2::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__EquivalentAmount2::soap_type() returns SOAP_TYPE_ns1__EquivalentAmount2 or derived type identifier
class ns1__EquivalentAmount2
{ public:
/// Element "Amt" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ActiveOrHistoricCurrencyAndAmount.
    ns1__ActiveOrHistoricCurrencyAndAmount*  Amt                            1;	///< Required element.
/// Element "CcyOfTrf" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ActiveOrHistoricCurrencyCode.
    ns1__ActiveOrHistoricCurrencyCode    CcyOfTrf                       1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ExchangeRate1 is a complexType.
///
/// @note class ns1__ExchangeRate1 operations:
/// - ns1__ExchangeRate1* soap_new_ns1__ExchangeRate1(soap*) allocate and default initialize
/// - ns1__ExchangeRate1* soap_new_ns1__ExchangeRate1(soap*, int num) allocate and default initialize an array
/// - ns1__ExchangeRate1* soap_new_req_ns1__ExchangeRate1(soap*, ...) allocate, set required members
/// - ns1__ExchangeRate1* soap_new_set_ns1__ExchangeRate1(soap*, ...) allocate, set all public members
/// - ns1__ExchangeRate1::soap_default(soap*) default initialize members
/// - int soap_read_ns1__ExchangeRate1(soap*, ns1__ExchangeRate1*) deserialize from a stream
/// - int soap_write_ns1__ExchangeRate1(soap*, ns1__ExchangeRate1*) serialize to a stream
/// - ns1__ExchangeRate1* ns1__ExchangeRate1::soap_dup(soap*) returns deep copy of ns1__ExchangeRate1, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__ExchangeRate1::soap_del() deep deletes ns1__ExchangeRate1 data members, use only after ns1__ExchangeRate1::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__ExchangeRate1::soap_type() returns SOAP_TYPE_ns1__ExchangeRate1 or derived type identifier
class ns1__ExchangeRate1
{ public:
/// Element "UnitCcy" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ActiveOrHistoricCurrencyCode.
    ns1__ActiveOrHistoricCurrencyCode*   UnitCcy                        0;	///< Optional element.
/// Element "XchgRate" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":BaseOneRate.
    ns1__BaseOneRate*                    XchgRate                       0;	///< Optional element.
/// Element "RateTp" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ExchangeRateType1Code.
    enum ns1__ExchangeRateType1Code*     RateTp                         0;	///< Optional element.
/// Element "CtrctId" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text*                      CtrctId                        0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":FinancialIdentificationSchemeName1Choice is a complexType.
///
/// @note class ns1__FinancialIdentificationSchemeName1Choice operations:
/// - ns1__FinancialIdentificationSchemeName1Choice* soap_new_ns1__FinancialIdentificationSchemeName1Choice(soap*) allocate and default initialize
/// - ns1__FinancialIdentificationSchemeName1Choice* soap_new_ns1__FinancialIdentificationSchemeName1Choice(soap*, int num) allocate and default initialize an array
/// - ns1__FinancialIdentificationSchemeName1Choice* soap_new_req_ns1__FinancialIdentificationSchemeName1Choice(soap*, ...) allocate, set required members
/// - ns1__FinancialIdentificationSchemeName1Choice* soap_new_set_ns1__FinancialIdentificationSchemeName1Choice(soap*, ...) allocate, set all public members
/// - ns1__FinancialIdentificationSchemeName1Choice::soap_default(soap*) default initialize members
/// - int soap_read_ns1__FinancialIdentificationSchemeName1Choice(soap*, ns1__FinancialIdentificationSchemeName1Choice*) deserialize from a stream
/// - int soap_write_ns1__FinancialIdentificationSchemeName1Choice(soap*, ns1__FinancialIdentificationSchemeName1Choice*) serialize to a stream
/// - ns1__FinancialIdentificationSchemeName1Choice* ns1__FinancialIdentificationSchemeName1Choice::soap_dup(soap*) returns deep copy of ns1__FinancialIdentificationSchemeName1Choice, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__FinancialIdentificationSchemeName1Choice::soap_del() deep deletes ns1__FinancialIdentificationSchemeName1Choice data members, use only after ns1__FinancialIdentificationSchemeName1Choice::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__FinancialIdentificationSchemeName1Choice::soap_type() returns SOAP_TYPE_ns1__FinancialIdentificationSchemeName1Choice or derived type identifier
class ns1__FinancialIdentificationSchemeName1Choice
{ public:
//  BEGIN CHOICE <xs:choice>
  $ int                                  __union_FinancialIdentificationSchemeName1Choice;	///< Union _ns1__union_FinancialIdentificationSchemeName1Choice selector: set to SOAP_UNION__ns1__union_FinancialIdentificationSchemeName1Choice_<fieldname>
/// Union for choice in ns1__FinancialIdentificationSchemeName1Choice.
    union _ns1__union_FinancialIdentificationSchemeName1Choice
    {
/// Element "Cd" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ExternalFinancialInstitutionIdentification1Code.
    ns1__ExternalFinancialInstitutionIdentification1Code*  Cd                            ;	///< Choice of element (one of multiple choices).
/// Element "Prtry" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text*                      Prtry                         ;	///< Choice of element (one of multiple choices).
    }                                    union_FinancialIdentificationSchemeName1Choice;
//  END OF CHOICE
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":FinancialInstitutionIdentification18 is a complexType.
///
/// @note class ns1__FinancialInstitutionIdentification18 operations:
/// - ns1__FinancialInstitutionIdentification18* soap_new_ns1__FinancialInstitutionIdentification18(soap*) allocate and default initialize
/// - ns1__FinancialInstitutionIdentification18* soap_new_ns1__FinancialInstitutionIdentification18(soap*, int num) allocate and default initialize an array
/// - ns1__FinancialInstitutionIdentification18* soap_new_req_ns1__FinancialInstitutionIdentification18(soap*, ...) allocate, set required members
/// - ns1__FinancialInstitutionIdentification18* soap_new_set_ns1__FinancialInstitutionIdentification18(soap*, ...) allocate, set all public members
/// - ns1__FinancialInstitutionIdentification18::soap_default(soap*) default initialize members
/// - int soap_read_ns1__FinancialInstitutionIdentification18(soap*, ns1__FinancialInstitutionIdentification18*) deserialize from a stream
/// - int soap_write_ns1__FinancialInstitutionIdentification18(soap*, ns1__FinancialInstitutionIdentification18*) serialize to a stream
/// - ns1__FinancialInstitutionIdentification18* ns1__FinancialInstitutionIdentification18::soap_dup(soap*) returns deep copy of ns1__FinancialInstitutionIdentification18, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__FinancialInstitutionIdentification18::soap_del() deep deletes ns1__FinancialInstitutionIdentification18 data members, use only after ns1__FinancialInstitutionIdentification18::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__FinancialInstitutionIdentification18::soap_type() returns SOAP_TYPE_ns1__FinancialInstitutionIdentification18 or derived type identifier
class ns1__FinancialInstitutionIdentification18
{ public:
/// Element "BICFI" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":BICFIDec2014Identifier.
    ns1__BICFIDec2014Identifier*         BICFI                          0;	///< Optional element.
/// Element "ClrSysMmbId" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ClearingSystemMemberIdentification2.
    ns1__ClearingSystemMemberIdentification2*  ClrSysMmbId                    0;	///< Optional element.
/// Element "LEI" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":LEIIdentifier.
    ns1__LEIIdentifier*                  LEI                            0;	///< Optional element.
/// Element "Nm" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max140Text.
    ns1__Max140Text*                     Nm                             0;	///< Optional element.
/// Element "PstlAdr" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":PostalAddress24.
    ns1__PostalAddress24*                PstlAdr                        0;	///< Optional element.
/// Element "Othr" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":GenericFinancialIdentification1.
    ns1__GenericFinancialIdentification1*  Othr                           0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Frequency36Choice is a complexType.
///
/// @note class ns1__Frequency36Choice operations:
/// - ns1__Frequency36Choice* soap_new_ns1__Frequency36Choice(soap*) allocate and default initialize
/// - ns1__Frequency36Choice* soap_new_ns1__Frequency36Choice(soap*, int num) allocate and default initialize an array
/// - ns1__Frequency36Choice* soap_new_req_ns1__Frequency36Choice(soap*, ...) allocate, set required members
/// - ns1__Frequency36Choice* soap_new_set_ns1__Frequency36Choice(soap*, ...) allocate, set all public members
/// - ns1__Frequency36Choice::soap_default(soap*) default initialize members
/// - int soap_read_ns1__Frequency36Choice(soap*, ns1__Frequency36Choice*) deserialize from a stream
/// - int soap_write_ns1__Frequency36Choice(soap*, ns1__Frequency36Choice*) serialize to a stream
/// - ns1__Frequency36Choice* ns1__Frequency36Choice::soap_dup(soap*) returns deep copy of ns1__Frequency36Choice, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__Frequency36Choice::soap_del() deep deletes ns1__Frequency36Choice data members, use only after ns1__Frequency36Choice::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__Frequency36Choice::soap_type() returns SOAP_TYPE_ns1__Frequency36Choice or derived type identifier
class ns1__Frequency36Choice
{ public:
//  BEGIN CHOICE <xs:choice>
  $ int                                  __union_Frequency36Choice     ;	///< Union _ns1__union_Frequency36Choice selector: set to SOAP_UNION__ns1__union_Frequency36Choice_<fieldname>
/// Union for choice in ns1__Frequency36Choice.
    union _ns1__union_Frequency36Choice
    {
/// Element "Tp" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Frequency6Code.
    enum ns1__Frequency6Code             Tp                            ;	///< Choice of element (one of multiple choices).
/// Element "Prd" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":FrequencyPeriod1.
    ns1__FrequencyPeriod1*               Prd                           ;	///< Choice of element (one of multiple choices).
/// Element "PtInTm" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":FrequencyAndMoment1.
    ns1__FrequencyAndMoment1*            PtInTm                        ;	///< Choice of element (one of multiple choices).
    }                                    union_Frequency36Choice       ;
//  END OF CHOICE
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":FrequencyAndMoment1 is a complexType.
///
/// @note class ns1__FrequencyAndMoment1 operations:
/// - ns1__FrequencyAndMoment1* soap_new_ns1__FrequencyAndMoment1(soap*) allocate and default initialize
/// - ns1__FrequencyAndMoment1* soap_new_ns1__FrequencyAndMoment1(soap*, int num) allocate and default initialize an array
/// - ns1__FrequencyAndMoment1* soap_new_req_ns1__FrequencyAndMoment1(soap*, ...) allocate, set required members
/// - ns1__FrequencyAndMoment1* soap_new_set_ns1__FrequencyAndMoment1(soap*, ...) allocate, set all public members
/// - ns1__FrequencyAndMoment1::soap_default(soap*) default initialize members
/// - int soap_read_ns1__FrequencyAndMoment1(soap*, ns1__FrequencyAndMoment1*) deserialize from a stream
/// - int soap_write_ns1__FrequencyAndMoment1(soap*, ns1__FrequencyAndMoment1*) serialize to a stream
/// - ns1__FrequencyAndMoment1* ns1__FrequencyAndMoment1::soap_dup(soap*) returns deep copy of ns1__FrequencyAndMoment1, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__FrequencyAndMoment1::soap_del() deep deletes ns1__FrequencyAndMoment1 data members, use only after ns1__FrequencyAndMoment1::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__FrequencyAndMoment1::soap_type() returns SOAP_TYPE_ns1__FrequencyAndMoment1 or derived type identifier
class ns1__FrequencyAndMoment1
{ public:
/// Element "Tp" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Frequency6Code.
    enum ns1__Frequency6Code             Tp                             1;	///< Required element.
/// Element "PtInTm" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Exact2NumericText.
    ns1__Exact2NumericText               PtInTm                         1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":FrequencyPeriod1 is a complexType.
///
/// @note class ns1__FrequencyPeriod1 operations:
/// - ns1__FrequencyPeriod1* soap_new_ns1__FrequencyPeriod1(soap*) allocate and default initialize
/// - ns1__FrequencyPeriod1* soap_new_ns1__FrequencyPeriod1(soap*, int num) allocate and default initialize an array
/// - ns1__FrequencyPeriod1* soap_new_req_ns1__FrequencyPeriod1(soap*, ...) allocate, set required members
/// - ns1__FrequencyPeriod1* soap_new_set_ns1__FrequencyPeriod1(soap*, ...) allocate, set all public members
/// - ns1__FrequencyPeriod1::soap_default(soap*) default initialize members
/// - int soap_read_ns1__FrequencyPeriod1(soap*, ns1__FrequencyPeriod1*) deserialize from a stream
/// - int soap_write_ns1__FrequencyPeriod1(soap*, ns1__FrequencyPeriod1*) serialize to a stream
/// - ns1__FrequencyPeriod1* ns1__FrequencyPeriod1::soap_dup(soap*) returns deep copy of ns1__FrequencyPeriod1, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__FrequencyPeriod1::soap_del() deep deletes ns1__FrequencyPeriod1 data members, use only after ns1__FrequencyPeriod1::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__FrequencyPeriod1::soap_type() returns SOAP_TYPE_ns1__FrequencyPeriod1 or derived type identifier
class ns1__FrequencyPeriod1
{ public:
/// Element "Tp" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Frequency6Code.
    enum ns1__Frequency6Code             Tp                             1;	///< Required element.
/// Element "CntPerPrd" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":DecimalNumber.
    ns1__DecimalNumber                   CntPerPrd                      1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Garnishment3 is a complexType.
///
/// @note class ns1__Garnishment3 operations:
/// - ns1__Garnishment3* soap_new_ns1__Garnishment3(soap*) allocate and default initialize
/// - ns1__Garnishment3* soap_new_ns1__Garnishment3(soap*, int num) allocate and default initialize an array
/// - ns1__Garnishment3* soap_new_req_ns1__Garnishment3(soap*, ...) allocate, set required members
/// - ns1__Garnishment3* soap_new_set_ns1__Garnishment3(soap*, ...) allocate, set all public members
/// - ns1__Garnishment3::soap_default(soap*) default initialize members
/// - int soap_read_ns1__Garnishment3(soap*, ns1__Garnishment3*) deserialize from a stream
/// - int soap_write_ns1__Garnishment3(soap*, ns1__Garnishment3*) serialize to a stream
/// - ns1__Garnishment3* ns1__Garnishment3::soap_dup(soap*) returns deep copy of ns1__Garnishment3, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__Garnishment3::soap_del() deep deletes ns1__Garnishment3 data members, use only after ns1__Garnishment3::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__Garnishment3::soap_type() returns SOAP_TYPE_ns1__Garnishment3 or derived type identifier
class ns1__Garnishment3
{ public:
/// Element "Tp" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":GarnishmentType1.
    ns1__GarnishmentType1*               Tp                             1;	///< Required element.
/// Element "Grnshee" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":PartyIdentification135.
    ns1__PartyIdentification135*         Grnshee                        0;	///< Optional element.
/// Element "GrnshmtAdmstr" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":PartyIdentification135.
    ns1__PartyIdentification135*         GrnshmtAdmstr                  0;	///< Optional element.
/// Element "RefNb" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max140Text.
    ns1__Max140Text*                     RefNb                          0;	///< Optional element.
/// Element "Dt" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ISODate.
    ns1__ISODate*                        Dt                             0;	///< Optional element.
/// Element "RmtdAmt" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ActiveOrHistoricCurrencyAndAmount.
    ns1__ActiveOrHistoricCurrencyAndAmount*  RmtdAmt                        0;	///< Optional element.
/// Element "FmlyMdclInsrncInd" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":TrueFalseIndicator.
    ns1__TrueFalseIndicator*             FmlyMdclInsrncInd              0;	///< Optional element.
/// Element "MplyeeTermntnInd" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":TrueFalseIndicator.
    ns1__TrueFalseIndicator*             MplyeeTermntnInd               0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":GarnishmentType1 is a complexType.
///
/// @note class ns1__GarnishmentType1 operations:
/// - ns1__GarnishmentType1* soap_new_ns1__GarnishmentType1(soap*) allocate and default initialize
/// - ns1__GarnishmentType1* soap_new_ns1__GarnishmentType1(soap*, int num) allocate and default initialize an array
/// - ns1__GarnishmentType1* soap_new_req_ns1__GarnishmentType1(soap*, ...) allocate, set required members
/// - ns1__GarnishmentType1* soap_new_set_ns1__GarnishmentType1(soap*, ...) allocate, set all public members
/// - ns1__GarnishmentType1::soap_default(soap*) default initialize members
/// - int soap_read_ns1__GarnishmentType1(soap*, ns1__GarnishmentType1*) deserialize from a stream
/// - int soap_write_ns1__GarnishmentType1(soap*, ns1__GarnishmentType1*) serialize to a stream
/// - ns1__GarnishmentType1* ns1__GarnishmentType1::soap_dup(soap*) returns deep copy of ns1__GarnishmentType1, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__GarnishmentType1::soap_del() deep deletes ns1__GarnishmentType1 data members, use only after ns1__GarnishmentType1::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__GarnishmentType1::soap_type() returns SOAP_TYPE_ns1__GarnishmentType1 or derived type identifier
class ns1__GarnishmentType1
{ public:
/// Element "CdOrPrtry" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":GarnishmentType1Choice.
    ns1__GarnishmentType1Choice*         CdOrPrtry                      1;	///< Required element.
/// Element "Issr" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text*                      Issr                           0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":GarnishmentType1Choice is a complexType.
///
/// @note class ns1__GarnishmentType1Choice operations:
/// - ns1__GarnishmentType1Choice* soap_new_ns1__GarnishmentType1Choice(soap*) allocate and default initialize
/// - ns1__GarnishmentType1Choice* soap_new_ns1__GarnishmentType1Choice(soap*, int num) allocate and default initialize an array
/// - ns1__GarnishmentType1Choice* soap_new_req_ns1__GarnishmentType1Choice(soap*, ...) allocate, set required members
/// - ns1__GarnishmentType1Choice* soap_new_set_ns1__GarnishmentType1Choice(soap*, ...) allocate, set all public members
/// - ns1__GarnishmentType1Choice::soap_default(soap*) default initialize members
/// - int soap_read_ns1__GarnishmentType1Choice(soap*, ns1__GarnishmentType1Choice*) deserialize from a stream
/// - int soap_write_ns1__GarnishmentType1Choice(soap*, ns1__GarnishmentType1Choice*) serialize to a stream
/// - ns1__GarnishmentType1Choice* ns1__GarnishmentType1Choice::soap_dup(soap*) returns deep copy of ns1__GarnishmentType1Choice, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__GarnishmentType1Choice::soap_del() deep deletes ns1__GarnishmentType1Choice data members, use only after ns1__GarnishmentType1Choice::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__GarnishmentType1Choice::soap_type() returns SOAP_TYPE_ns1__GarnishmentType1Choice or derived type identifier
class ns1__GarnishmentType1Choice
{ public:
//  BEGIN CHOICE <xs:choice>
  $ int                                  __union_GarnishmentType1Choice;	///< Union _ns1__union_GarnishmentType1Choice selector: set to SOAP_UNION__ns1__union_GarnishmentType1Choice_<fieldname>
/// Union for choice in ns1__GarnishmentType1Choice.
    union _ns1__union_GarnishmentType1Choice
    {
/// Element "Cd" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ExternalGarnishmentType1Code.
    ns1__ExternalGarnishmentType1Code*   Cd                            ;	///< Choice of element (one of multiple choices).
/// Element "Prtry" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text*                      Prtry                         ;	///< Choice of element (one of multiple choices).
    }                                    union_GarnishmentType1Choice  ;
//  END OF CHOICE
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":GenericAccountIdentification1 is a complexType.
///
/// @note class ns1__GenericAccountIdentification1 operations:
/// - ns1__GenericAccountIdentification1* soap_new_ns1__GenericAccountIdentification1(soap*) allocate and default initialize
/// - ns1__GenericAccountIdentification1* soap_new_ns1__GenericAccountIdentification1(soap*, int num) allocate and default initialize an array
/// - ns1__GenericAccountIdentification1* soap_new_req_ns1__GenericAccountIdentification1(soap*, ...) allocate, set required members
/// - ns1__GenericAccountIdentification1* soap_new_set_ns1__GenericAccountIdentification1(soap*, ...) allocate, set all public members
/// - ns1__GenericAccountIdentification1::soap_default(soap*) default initialize members
/// - int soap_read_ns1__GenericAccountIdentification1(soap*, ns1__GenericAccountIdentification1*) deserialize from a stream
/// - int soap_write_ns1__GenericAccountIdentification1(soap*, ns1__GenericAccountIdentification1*) serialize to a stream
/// - ns1__GenericAccountIdentification1* ns1__GenericAccountIdentification1::soap_dup(soap*) returns deep copy of ns1__GenericAccountIdentification1, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__GenericAccountIdentification1::soap_del() deep deletes ns1__GenericAccountIdentification1 data members, use only after ns1__GenericAccountIdentification1::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__GenericAccountIdentification1::soap_type() returns SOAP_TYPE_ns1__GenericAccountIdentification1 or derived type identifier
class ns1__GenericAccountIdentification1
{ public:
/// Element "Id" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max34Text.
    ns1__Max34Text                       Id                             1;	///< Required element.
/// Element "SchmeNm" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":AccountSchemeName1Choice.
    ns1__AccountSchemeName1Choice*       SchmeNm                        0;	///< Optional element.
/// Element "Issr" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text*                      Issr                           0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":GenericFinancialIdentification1 is a complexType.
///
/// @note class ns1__GenericFinancialIdentification1 operations:
/// - ns1__GenericFinancialIdentification1* soap_new_ns1__GenericFinancialIdentification1(soap*) allocate and default initialize
/// - ns1__GenericFinancialIdentification1* soap_new_ns1__GenericFinancialIdentification1(soap*, int num) allocate and default initialize an array
/// - ns1__GenericFinancialIdentification1* soap_new_req_ns1__GenericFinancialIdentification1(soap*, ...) allocate, set required members
/// - ns1__GenericFinancialIdentification1* soap_new_set_ns1__GenericFinancialIdentification1(soap*, ...) allocate, set all public members
/// - ns1__GenericFinancialIdentification1::soap_default(soap*) default initialize members
/// - int soap_read_ns1__GenericFinancialIdentification1(soap*, ns1__GenericFinancialIdentification1*) deserialize from a stream
/// - int soap_write_ns1__GenericFinancialIdentification1(soap*, ns1__GenericFinancialIdentification1*) serialize to a stream
/// - ns1__GenericFinancialIdentification1* ns1__GenericFinancialIdentification1::soap_dup(soap*) returns deep copy of ns1__GenericFinancialIdentification1, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__GenericFinancialIdentification1::soap_del() deep deletes ns1__GenericFinancialIdentification1 data members, use only after ns1__GenericFinancialIdentification1::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__GenericFinancialIdentification1::soap_type() returns SOAP_TYPE_ns1__GenericFinancialIdentification1 or derived type identifier
class ns1__GenericFinancialIdentification1
{ public:
/// Element "Id" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text                       Id                             1;	///< Required element.
/// Element "SchmeNm" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":FinancialIdentificationSchemeName1Choice.
    ns1__FinancialIdentificationSchemeName1Choice*  SchmeNm                        0;	///< Optional element.
/// Element "Issr" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text*                      Issr                           0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":GenericIdentification30 is a complexType.
///
/// @note class ns1__GenericIdentification30 operations:
/// - ns1__GenericIdentification30* soap_new_ns1__GenericIdentification30(soap*) allocate and default initialize
/// - ns1__GenericIdentification30* soap_new_ns1__GenericIdentification30(soap*, int num) allocate and default initialize an array
/// - ns1__GenericIdentification30* soap_new_req_ns1__GenericIdentification30(soap*, ...) allocate, set required members
/// - ns1__GenericIdentification30* soap_new_set_ns1__GenericIdentification30(soap*, ...) allocate, set all public members
/// - ns1__GenericIdentification30::soap_default(soap*) default initialize members
/// - int soap_read_ns1__GenericIdentification30(soap*, ns1__GenericIdentification30*) deserialize from a stream
/// - int soap_write_ns1__GenericIdentification30(soap*, ns1__GenericIdentification30*) serialize to a stream
/// - ns1__GenericIdentification30* ns1__GenericIdentification30::soap_dup(soap*) returns deep copy of ns1__GenericIdentification30, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__GenericIdentification30::soap_del() deep deletes ns1__GenericIdentification30 data members, use only after ns1__GenericIdentification30::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__GenericIdentification30::soap_type() returns SOAP_TYPE_ns1__GenericIdentification30 or derived type identifier
class ns1__GenericIdentification30
{ public:
/// Element "Id" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Exact4AlphaNumericText.
    ns1__Exact4AlphaNumericText          Id                             1;	///< Required element.
/// Element "Issr" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text                       Issr                           1;	///< Required element.
/// Element "SchmeNm" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text*                      SchmeNm                        0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":GenericOrganisationIdentification1 is a complexType.
///
/// @note class ns1__GenericOrganisationIdentification1 operations:
/// - ns1__GenericOrganisationIdentification1* soap_new_ns1__GenericOrganisationIdentification1(soap*) allocate and default initialize
/// - ns1__GenericOrganisationIdentification1* soap_new_ns1__GenericOrganisationIdentification1(soap*, int num) allocate and default initialize an array
/// - ns1__GenericOrganisationIdentification1* soap_new_req_ns1__GenericOrganisationIdentification1(soap*, ...) allocate, set required members
/// - ns1__GenericOrganisationIdentification1* soap_new_set_ns1__GenericOrganisationIdentification1(soap*, ...) allocate, set all public members
/// - ns1__GenericOrganisationIdentification1::soap_default(soap*) default initialize members
/// - int soap_read_ns1__GenericOrganisationIdentification1(soap*, ns1__GenericOrganisationIdentification1*) deserialize from a stream
/// - int soap_write_ns1__GenericOrganisationIdentification1(soap*, ns1__GenericOrganisationIdentification1*) serialize to a stream
/// - ns1__GenericOrganisationIdentification1* ns1__GenericOrganisationIdentification1::soap_dup(soap*) returns deep copy of ns1__GenericOrganisationIdentification1, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__GenericOrganisationIdentification1::soap_del() deep deletes ns1__GenericOrganisationIdentification1 data members, use only after ns1__GenericOrganisationIdentification1::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__GenericOrganisationIdentification1::soap_type() returns SOAP_TYPE_ns1__GenericOrganisationIdentification1 or derived type identifier
class ns1__GenericOrganisationIdentification1
{ public:
/// Element "Id" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text                       Id                             1;	///< Required element.
/// Element "SchmeNm" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":OrganisationIdentificationSchemeName1Choice.
    ns1__OrganisationIdentificationSchemeName1Choice*  SchmeNm                        0;	///< Optional element.
/// Element "Issr" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text*                      Issr                           0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":GenericPersonIdentification1 is a complexType.
///
/// @note class ns1__GenericPersonIdentification1 operations:
/// - ns1__GenericPersonIdentification1* soap_new_ns1__GenericPersonIdentification1(soap*) allocate and default initialize
/// - ns1__GenericPersonIdentification1* soap_new_ns1__GenericPersonIdentification1(soap*, int num) allocate and default initialize an array
/// - ns1__GenericPersonIdentification1* soap_new_req_ns1__GenericPersonIdentification1(soap*, ...) allocate, set required members
/// - ns1__GenericPersonIdentification1* soap_new_set_ns1__GenericPersonIdentification1(soap*, ...) allocate, set all public members
/// - ns1__GenericPersonIdentification1::soap_default(soap*) default initialize members
/// - int soap_read_ns1__GenericPersonIdentification1(soap*, ns1__GenericPersonIdentification1*) deserialize from a stream
/// - int soap_write_ns1__GenericPersonIdentification1(soap*, ns1__GenericPersonIdentification1*) serialize to a stream
/// - ns1__GenericPersonIdentification1* ns1__GenericPersonIdentification1::soap_dup(soap*) returns deep copy of ns1__GenericPersonIdentification1, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__GenericPersonIdentification1::soap_del() deep deletes ns1__GenericPersonIdentification1 data members, use only after ns1__GenericPersonIdentification1::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__GenericPersonIdentification1::soap_type() returns SOAP_TYPE_ns1__GenericPersonIdentification1 or derived type identifier
class ns1__GenericPersonIdentification1
{ public:
/// Element "Id" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text                       Id                             1;	///< Required element.
/// Element "SchmeNm" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":PersonIdentificationSchemeName1Choice.
    ns1__PersonIdentificationSchemeName1Choice*  SchmeNm                        0;	///< Optional element.
/// Element "Issr" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text*                      Issr                           0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":GroupHeader95 is a complexType.
///
/// @note class ns1__GroupHeader95 operations:
/// - ns1__GroupHeader95* soap_new_ns1__GroupHeader95(soap*) allocate and default initialize
/// - ns1__GroupHeader95* soap_new_ns1__GroupHeader95(soap*, int num) allocate and default initialize an array
/// - ns1__GroupHeader95* soap_new_req_ns1__GroupHeader95(soap*, ...) allocate, set required members
/// - ns1__GroupHeader95* soap_new_set_ns1__GroupHeader95(soap*, ...) allocate, set all public members
/// - ns1__GroupHeader95::soap_default(soap*) default initialize members
/// - int soap_read_ns1__GroupHeader95(soap*, ns1__GroupHeader95*) deserialize from a stream
/// - int soap_write_ns1__GroupHeader95(soap*, ns1__GroupHeader95*) serialize to a stream
/// - ns1__GroupHeader95* ns1__GroupHeader95::soap_dup(soap*) returns deep copy of ns1__GroupHeader95, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__GroupHeader95::soap_del() deep deletes ns1__GroupHeader95 data members, use only after ns1__GroupHeader95::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__GroupHeader95::soap_type() returns SOAP_TYPE_ns1__GroupHeader95 or derived type identifier
class ns1__GroupHeader95
{ public:
/// Element "MsgId" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text                       MsgId                          1;	///< Required element.
/// Element "CreDtTm" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ISODateTime.
    ns1__ISODateTime                     CreDtTm                        1;	///< Required element.
/// Vector of ns1__Authorisation1Choice* of length 0..2.
    std::vector<ns1__Authorisation1Choice*> Authstn                        0:2;	///< Multiple elements.
/// Element "NbOfTxs" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max15NumericText.
    ns1__Max15NumericText                NbOfTxs                        1;	///< Required element.
/// Element "CtrlSum" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":DecimalNumber.
    ns1__DecimalNumber*                  CtrlSum                        0;	///< Optional element.
/// Element "InitgPty" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":PartyIdentification135.
    ns1__PartyIdentification135*         InitgPty                       1;	///< Required element.
/// Element "FwdgAgt" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":BranchAndFinancialInstitutionIdentification6.
    ns1__BranchAndFinancialInstitutionIdentification6*  FwdgAgt                        0;	///< Optional element.
/// Element "InitnSrc" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":PaymentInitiationSource1.
    ns1__PaymentInitiationSource1*       InitnSrc                       0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":InstructionForCreditorAgent3 is a complexType.
///
/// @note class ns1__InstructionForCreditorAgent3 operations:
/// - ns1__InstructionForCreditorAgent3* soap_new_ns1__InstructionForCreditorAgent3(soap*) allocate and default initialize
/// - ns1__InstructionForCreditorAgent3* soap_new_ns1__InstructionForCreditorAgent3(soap*, int num) allocate and default initialize an array
/// - ns1__InstructionForCreditorAgent3* soap_new_req_ns1__InstructionForCreditorAgent3(soap*, ...) allocate, set required members
/// - ns1__InstructionForCreditorAgent3* soap_new_set_ns1__InstructionForCreditorAgent3(soap*, ...) allocate, set all public members
/// - ns1__InstructionForCreditorAgent3::soap_default(soap*) default initialize members
/// - int soap_read_ns1__InstructionForCreditorAgent3(soap*, ns1__InstructionForCreditorAgent3*) deserialize from a stream
/// - int soap_write_ns1__InstructionForCreditorAgent3(soap*, ns1__InstructionForCreditorAgent3*) serialize to a stream
/// - ns1__InstructionForCreditorAgent3* ns1__InstructionForCreditorAgent3::soap_dup(soap*) returns deep copy of ns1__InstructionForCreditorAgent3, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__InstructionForCreditorAgent3::soap_del() deep deletes ns1__InstructionForCreditorAgent3 data members, use only after ns1__InstructionForCreditorAgent3::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__InstructionForCreditorAgent3::soap_type() returns SOAP_TYPE_ns1__InstructionForCreditorAgent3 or derived type identifier
class ns1__InstructionForCreditorAgent3
{ public:
/// Element "Cd" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ExternalCreditorAgentInstruction1Code.
    ns1__ExternalCreditorAgentInstruction1Code*  Cd                             0;	///< Optional element.
/// Element "InstrInf" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max140Text.
    ns1__Max140Text*                     InstrInf                       0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":InstructionForDebtorAgent1 is a complexType.
///
/// @note class ns1__InstructionForDebtorAgent1 operations:
/// - ns1__InstructionForDebtorAgent1* soap_new_ns1__InstructionForDebtorAgent1(soap*) allocate and default initialize
/// - ns1__InstructionForDebtorAgent1* soap_new_ns1__InstructionForDebtorAgent1(soap*, int num) allocate and default initialize an array
/// - ns1__InstructionForDebtorAgent1* soap_new_req_ns1__InstructionForDebtorAgent1(soap*, ...) allocate, set required members
/// - ns1__InstructionForDebtorAgent1* soap_new_set_ns1__InstructionForDebtorAgent1(soap*, ...) allocate, set all public members
/// - ns1__InstructionForDebtorAgent1::soap_default(soap*) default initialize members
/// - int soap_read_ns1__InstructionForDebtorAgent1(soap*, ns1__InstructionForDebtorAgent1*) deserialize from a stream
/// - int soap_write_ns1__InstructionForDebtorAgent1(soap*, ns1__InstructionForDebtorAgent1*) serialize to a stream
/// - ns1__InstructionForDebtorAgent1* ns1__InstructionForDebtorAgent1::soap_dup(soap*) returns deep copy of ns1__InstructionForDebtorAgent1, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__InstructionForDebtorAgent1::soap_del() deep deletes ns1__InstructionForDebtorAgent1 data members, use only after ns1__InstructionForDebtorAgent1::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__InstructionForDebtorAgent1::soap_type() returns SOAP_TYPE_ns1__InstructionForDebtorAgent1 or derived type identifier
class ns1__InstructionForDebtorAgent1
{ public:
/// Element "Cd" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ExternalDebtorAgentInstruction1Code.
    ns1__ExternalDebtorAgentInstruction1Code*  Cd                             0;	///< Optional element.
/// Element "InstrInf" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max140Text.
    ns1__Max140Text*                     InstrInf                       0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":LocalInstrument2Choice is a complexType.
///
/// @note class ns1__LocalInstrument2Choice operations:
/// - ns1__LocalInstrument2Choice* soap_new_ns1__LocalInstrument2Choice(soap*) allocate and default initialize
/// - ns1__LocalInstrument2Choice* soap_new_ns1__LocalInstrument2Choice(soap*, int num) allocate and default initialize an array
/// - ns1__LocalInstrument2Choice* soap_new_req_ns1__LocalInstrument2Choice(soap*, ...) allocate, set required members
/// - ns1__LocalInstrument2Choice* soap_new_set_ns1__LocalInstrument2Choice(soap*, ...) allocate, set all public members
/// - ns1__LocalInstrument2Choice::soap_default(soap*) default initialize members
/// - int soap_read_ns1__LocalInstrument2Choice(soap*, ns1__LocalInstrument2Choice*) deserialize from a stream
/// - int soap_write_ns1__LocalInstrument2Choice(soap*, ns1__LocalInstrument2Choice*) serialize to a stream
/// - ns1__LocalInstrument2Choice* ns1__LocalInstrument2Choice::soap_dup(soap*) returns deep copy of ns1__LocalInstrument2Choice, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__LocalInstrument2Choice::soap_del() deep deletes ns1__LocalInstrument2Choice data members, use only after ns1__LocalInstrument2Choice::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__LocalInstrument2Choice::soap_type() returns SOAP_TYPE_ns1__LocalInstrument2Choice or derived type identifier
class ns1__LocalInstrument2Choice
{ public:
//  BEGIN CHOICE <xs:choice>
  $ int                                  __union_LocalInstrument2Choice;	///< Union _ns1__union_LocalInstrument2Choice selector: set to SOAP_UNION__ns1__union_LocalInstrument2Choice_<fieldname>
/// Union for choice in ns1__LocalInstrument2Choice.
    union _ns1__union_LocalInstrument2Choice
    {
/// Element "Cd" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ExternalLocalInstrument1Code.
    ns1__ExternalLocalInstrument1Code*   Cd                            ;	///< Choice of element (one of multiple choices).
/// Element "Prtry" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text*                      Prtry                         ;	///< Choice of element (one of multiple choices).
    }                                    union_LocalInstrument2Choice  ;
//  END OF CHOICE
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":MandateClassification1Choice is a complexType.
///
/// @note class ns1__MandateClassification1Choice operations:
/// - ns1__MandateClassification1Choice* soap_new_ns1__MandateClassification1Choice(soap*) allocate and default initialize
/// - ns1__MandateClassification1Choice* soap_new_ns1__MandateClassification1Choice(soap*, int num) allocate and default initialize an array
/// - ns1__MandateClassification1Choice* soap_new_req_ns1__MandateClassification1Choice(soap*, ...) allocate, set required members
/// - ns1__MandateClassification1Choice* soap_new_set_ns1__MandateClassification1Choice(soap*, ...) allocate, set all public members
/// - ns1__MandateClassification1Choice::soap_default(soap*) default initialize members
/// - int soap_read_ns1__MandateClassification1Choice(soap*, ns1__MandateClassification1Choice*) deserialize from a stream
/// - int soap_write_ns1__MandateClassification1Choice(soap*, ns1__MandateClassification1Choice*) serialize to a stream
/// - ns1__MandateClassification1Choice* ns1__MandateClassification1Choice::soap_dup(soap*) returns deep copy of ns1__MandateClassification1Choice, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__MandateClassification1Choice::soap_del() deep deletes ns1__MandateClassification1Choice data members, use only after ns1__MandateClassification1Choice::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__MandateClassification1Choice::soap_type() returns SOAP_TYPE_ns1__MandateClassification1Choice or derived type identifier
class ns1__MandateClassification1Choice
{ public:
//  BEGIN CHOICE <xs:choice>
  $ int                                  __union_MandateClassification1Choice;	///< Union _ns1__union_MandateClassification1Choice selector: set to SOAP_UNION__ns1__union_MandateClassification1Choice_<fieldname>
/// Union for choice in ns1__MandateClassification1Choice.
    union _ns1__union_MandateClassification1Choice
    {
/// Element "Cd" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":MandateClassification1Code.
    enum ns1__MandateClassification1Code  Cd                            ;	///< Choice of element (one of multiple choices).
/// Element "Prtry" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text*                      Prtry                         ;	///< Choice of element (one of multiple choices).
    }                                    union_MandateClassification1Choice;
//  END OF CHOICE
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":MandateSetupReason1Choice is a complexType.
///
/// @note class ns1__MandateSetupReason1Choice operations:
/// - ns1__MandateSetupReason1Choice* soap_new_ns1__MandateSetupReason1Choice(soap*) allocate and default initialize
/// - ns1__MandateSetupReason1Choice* soap_new_ns1__MandateSetupReason1Choice(soap*, int num) allocate and default initialize an array
/// - ns1__MandateSetupReason1Choice* soap_new_req_ns1__MandateSetupReason1Choice(soap*, ...) allocate, set required members
/// - ns1__MandateSetupReason1Choice* soap_new_set_ns1__MandateSetupReason1Choice(soap*, ...) allocate, set all public members
/// - ns1__MandateSetupReason1Choice::soap_default(soap*) default initialize members
/// - int soap_read_ns1__MandateSetupReason1Choice(soap*, ns1__MandateSetupReason1Choice*) deserialize from a stream
/// - int soap_write_ns1__MandateSetupReason1Choice(soap*, ns1__MandateSetupReason1Choice*) serialize to a stream
/// - ns1__MandateSetupReason1Choice* ns1__MandateSetupReason1Choice::soap_dup(soap*) returns deep copy of ns1__MandateSetupReason1Choice, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__MandateSetupReason1Choice::soap_del() deep deletes ns1__MandateSetupReason1Choice data members, use only after ns1__MandateSetupReason1Choice::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__MandateSetupReason1Choice::soap_type() returns SOAP_TYPE_ns1__MandateSetupReason1Choice or derived type identifier
class ns1__MandateSetupReason1Choice
{ public:
//  BEGIN CHOICE <xs:choice>
  $ int                                  __union_MandateSetupReason1Choice;	///< Union _ns1__union_MandateSetupReason1Choice selector: set to SOAP_UNION__ns1__union_MandateSetupReason1Choice_<fieldname>
/// Union for choice in ns1__MandateSetupReason1Choice.
    union _ns1__union_MandateSetupReason1Choice
    {
/// Element "Cd" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ExternalMandateSetupReason1Code.
    ns1__ExternalMandateSetupReason1Code*  Cd                            ;	///< Choice of element (one of multiple choices).
/// Element "Prtry" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max70Text.
    ns1__Max70Text*                      Prtry                         ;	///< Choice of element (one of multiple choices).
    }                                    union_MandateSetupReason1Choice;
//  END OF CHOICE
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":MandateTypeInformation2 is a complexType.
///
/// @note class ns1__MandateTypeInformation2 operations:
/// - ns1__MandateTypeInformation2* soap_new_ns1__MandateTypeInformation2(soap*) allocate and default initialize
/// - ns1__MandateTypeInformation2* soap_new_ns1__MandateTypeInformation2(soap*, int num) allocate and default initialize an array
/// - ns1__MandateTypeInformation2* soap_new_req_ns1__MandateTypeInformation2(soap*, ...) allocate, set required members
/// - ns1__MandateTypeInformation2* soap_new_set_ns1__MandateTypeInformation2(soap*, ...) allocate, set all public members
/// - ns1__MandateTypeInformation2::soap_default(soap*) default initialize members
/// - int soap_read_ns1__MandateTypeInformation2(soap*, ns1__MandateTypeInformation2*) deserialize from a stream
/// - int soap_write_ns1__MandateTypeInformation2(soap*, ns1__MandateTypeInformation2*) serialize to a stream
/// - ns1__MandateTypeInformation2* ns1__MandateTypeInformation2::soap_dup(soap*) returns deep copy of ns1__MandateTypeInformation2, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__MandateTypeInformation2::soap_del() deep deletes ns1__MandateTypeInformation2 data members, use only after ns1__MandateTypeInformation2::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__MandateTypeInformation2::soap_type() returns SOAP_TYPE_ns1__MandateTypeInformation2 or derived type identifier
class ns1__MandateTypeInformation2
{ public:
/// Element "SvcLvl" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ServiceLevel8Choice.
    ns1__ServiceLevel8Choice*            SvcLvl                         0;	///< Optional element.
/// Element "LclInstrm" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":LocalInstrument2Choice.
    ns1__LocalInstrument2Choice*         LclInstrm                      0;	///< Optional element.
/// Element "CtgyPurp" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":CategoryPurpose1Choice.
    ns1__CategoryPurpose1Choice*         CtgyPurp                       0;	///< Optional element.
/// Element "Clssfctn" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":MandateClassification1Choice.
    ns1__MandateClassification1Choice*   Clssfctn                       0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":NameAndAddress16 is a complexType.
///
/// @note class ns1__NameAndAddress16 operations:
/// - ns1__NameAndAddress16* soap_new_ns1__NameAndAddress16(soap*) allocate and default initialize
/// - ns1__NameAndAddress16* soap_new_ns1__NameAndAddress16(soap*, int num) allocate and default initialize an array
/// - ns1__NameAndAddress16* soap_new_req_ns1__NameAndAddress16(soap*, ...) allocate, set required members
/// - ns1__NameAndAddress16* soap_new_set_ns1__NameAndAddress16(soap*, ...) allocate, set all public members
/// - ns1__NameAndAddress16::soap_default(soap*) default initialize members
/// - int soap_read_ns1__NameAndAddress16(soap*, ns1__NameAndAddress16*) deserialize from a stream
/// - int soap_write_ns1__NameAndAddress16(soap*, ns1__NameAndAddress16*) serialize to a stream
/// - ns1__NameAndAddress16* ns1__NameAndAddress16::soap_dup(soap*) returns deep copy of ns1__NameAndAddress16, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__NameAndAddress16::soap_del() deep deletes ns1__NameAndAddress16 data members, use only after ns1__NameAndAddress16::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__NameAndAddress16::soap_type() returns SOAP_TYPE_ns1__NameAndAddress16 or derived type identifier
class ns1__NameAndAddress16
{ public:
/// Element "Nm" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max140Text.
    ns1__Max140Text                      Nm                             1;	///< Required element.
/// Element "Adr" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":PostalAddress24.
    ns1__PostalAddress24*                Adr                            1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":OrganisationIdentification29 is a complexType.
///
/// @note class ns1__OrganisationIdentification29 operations:
/// - ns1__OrganisationIdentification29* soap_new_ns1__OrganisationIdentification29(soap*) allocate and default initialize
/// - ns1__OrganisationIdentification29* soap_new_ns1__OrganisationIdentification29(soap*, int num) allocate and default initialize an array
/// - ns1__OrganisationIdentification29* soap_new_req_ns1__OrganisationIdentification29(soap*, ...) allocate, set required members
/// - ns1__OrganisationIdentification29* soap_new_set_ns1__OrganisationIdentification29(soap*, ...) allocate, set all public members
/// - ns1__OrganisationIdentification29::soap_default(soap*) default initialize members
/// - int soap_read_ns1__OrganisationIdentification29(soap*, ns1__OrganisationIdentification29*) deserialize from a stream
/// - int soap_write_ns1__OrganisationIdentification29(soap*, ns1__OrganisationIdentification29*) serialize to a stream
/// - ns1__OrganisationIdentification29* ns1__OrganisationIdentification29::soap_dup(soap*) returns deep copy of ns1__OrganisationIdentification29, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__OrganisationIdentification29::soap_del() deep deletes ns1__OrganisationIdentification29 data members, use only after ns1__OrganisationIdentification29::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__OrganisationIdentification29::soap_type() returns SOAP_TYPE_ns1__OrganisationIdentification29 or derived type identifier
class ns1__OrganisationIdentification29
{ public:
/// Element "AnyBIC" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":AnyBICDec2014Identifier.
    ns1__AnyBICDec2014Identifier*        AnyBIC                         0;	///< Optional element.
/// Element "LEI" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":LEIIdentifier.
    ns1__LEIIdentifier*                  LEI                            0;	///< Optional element.
/// Vector of ns1__GenericOrganisationIdentification1* of length 0..unbounded.
    std::vector<ns1__GenericOrganisationIdentification1*> Othr                           0;	///< Multiple elements.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":OrganisationIdentificationSchemeName1Choice is a complexType.
///
/// @note class ns1__OrganisationIdentificationSchemeName1Choice operations:
/// - ns1__OrganisationIdentificationSchemeName1Choice* soap_new_ns1__OrganisationIdentificationSchemeName1Choice(soap*) allocate and default initialize
/// - ns1__OrganisationIdentificationSchemeName1Choice* soap_new_ns1__OrganisationIdentificationSchemeName1Choice(soap*, int num) allocate and default initialize an array
/// - ns1__OrganisationIdentificationSchemeName1Choice* soap_new_req_ns1__OrganisationIdentificationSchemeName1Choice(soap*, ...) allocate, set required members
/// - ns1__OrganisationIdentificationSchemeName1Choice* soap_new_set_ns1__OrganisationIdentificationSchemeName1Choice(soap*, ...) allocate, set all public members
/// - ns1__OrganisationIdentificationSchemeName1Choice::soap_default(soap*) default initialize members
/// - int soap_read_ns1__OrganisationIdentificationSchemeName1Choice(soap*, ns1__OrganisationIdentificationSchemeName1Choice*) deserialize from a stream
/// - int soap_write_ns1__OrganisationIdentificationSchemeName1Choice(soap*, ns1__OrganisationIdentificationSchemeName1Choice*) serialize to a stream
/// - ns1__OrganisationIdentificationSchemeName1Choice* ns1__OrganisationIdentificationSchemeName1Choice::soap_dup(soap*) returns deep copy of ns1__OrganisationIdentificationSchemeName1Choice, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__OrganisationIdentificationSchemeName1Choice::soap_del() deep deletes ns1__OrganisationIdentificationSchemeName1Choice data members, use only after ns1__OrganisationIdentificationSchemeName1Choice::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__OrganisationIdentificationSchemeName1Choice::soap_type() returns SOAP_TYPE_ns1__OrganisationIdentificationSchemeName1Choice or derived type identifier
class ns1__OrganisationIdentificationSchemeName1Choice
{ public:
//  BEGIN CHOICE <xs:choice>
  $ int                                  __union_OrganisationIdentificationSchemeName1Choice;	///< Union _ns1__union_OrganisationIdentificationSchemeName1Choice selector: set to SOAP_UNION__ns1__union_OrganisationIdentificationSchemeName1Choice_<fieldname>
/// Union for choice in ns1__OrganisationIdentificationSchemeName1Choice.
    union _ns1__union_OrganisationIdentificationSchemeName1Choice
    {
/// Element "Cd" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ExternalOrganisationIdentification1Code.
    ns1__ExternalOrganisationIdentification1Code*  Cd                            ;	///< Choice of element (one of multiple choices).
/// Element "Prtry" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text*                      Prtry                         ;	///< Choice of element (one of multiple choices).
    }                                    union_OrganisationIdentificationSchemeName1Choice;
//  END OF CHOICE
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":OtherContact1 is a complexType.
///
/// @note class ns1__OtherContact1 operations:
/// - ns1__OtherContact1* soap_new_ns1__OtherContact1(soap*) allocate and default initialize
/// - ns1__OtherContact1* soap_new_ns1__OtherContact1(soap*, int num) allocate and default initialize an array
/// - ns1__OtherContact1* soap_new_req_ns1__OtherContact1(soap*, ...) allocate, set required members
/// - ns1__OtherContact1* soap_new_set_ns1__OtherContact1(soap*, ...) allocate, set all public members
/// - ns1__OtherContact1::soap_default(soap*) default initialize members
/// - int soap_read_ns1__OtherContact1(soap*, ns1__OtherContact1*) deserialize from a stream
/// - int soap_write_ns1__OtherContact1(soap*, ns1__OtherContact1*) serialize to a stream
/// - ns1__OtherContact1* ns1__OtherContact1::soap_dup(soap*) returns deep copy of ns1__OtherContact1, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__OtherContact1::soap_del() deep deletes ns1__OtherContact1 data members, use only after ns1__OtherContact1::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__OtherContact1::soap_type() returns SOAP_TYPE_ns1__OtherContact1 or derived type identifier
class ns1__OtherContact1
{ public:
/// Element "ChanlTp" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max4Text.
    ns1__Max4Text                        ChanlTp                        1;	///< Required element.
/// Element "Id" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max128Text.
    ns1__Max128Text*                     Id                             0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Party38Choice is a complexType.
///
/// @note class ns1__Party38Choice operations:
/// - ns1__Party38Choice* soap_new_ns1__Party38Choice(soap*) allocate and default initialize
/// - ns1__Party38Choice* soap_new_ns1__Party38Choice(soap*, int num) allocate and default initialize an array
/// - ns1__Party38Choice* soap_new_req_ns1__Party38Choice(soap*, ...) allocate, set required members
/// - ns1__Party38Choice* soap_new_set_ns1__Party38Choice(soap*, ...) allocate, set all public members
/// - ns1__Party38Choice::soap_default(soap*) default initialize members
/// - int soap_read_ns1__Party38Choice(soap*, ns1__Party38Choice*) deserialize from a stream
/// - int soap_write_ns1__Party38Choice(soap*, ns1__Party38Choice*) serialize to a stream
/// - ns1__Party38Choice* ns1__Party38Choice::soap_dup(soap*) returns deep copy of ns1__Party38Choice, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__Party38Choice::soap_del() deep deletes ns1__Party38Choice data members, use only after ns1__Party38Choice::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__Party38Choice::soap_type() returns SOAP_TYPE_ns1__Party38Choice or derived type identifier
class ns1__Party38Choice
{ public:
//  BEGIN CHOICE <xs:choice>
  $ int                                  __union_Party38Choice         ;	///< Union _ns1__union_Party38Choice selector: set to SOAP_UNION__ns1__union_Party38Choice_<fieldname>
/// Union for choice in ns1__Party38Choice.
    union _ns1__union_Party38Choice
    {
/// Element "OrgId" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":OrganisationIdentification29.
    ns1__OrganisationIdentification29*   OrgId                         ;	///< Choice of element (one of multiple choices).
/// Element "PrvtId" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":PersonIdentification13.
    ns1__PersonIdentification13*         PrvtId                        ;	///< Choice of element (one of multiple choices).
    }                                    union_Party38Choice           ;
//  END OF CHOICE
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":PartyIdentification135 is a complexType.
///
/// @note class ns1__PartyIdentification135 operations:
/// - ns1__PartyIdentification135* soap_new_ns1__PartyIdentification135(soap*) allocate and default initialize
/// - ns1__PartyIdentification135* soap_new_ns1__PartyIdentification135(soap*, int num) allocate and default initialize an array
/// - ns1__PartyIdentification135* soap_new_req_ns1__PartyIdentification135(soap*, ...) allocate, set required members
/// - ns1__PartyIdentification135* soap_new_set_ns1__PartyIdentification135(soap*, ...) allocate, set all public members
/// - ns1__PartyIdentification135::soap_default(soap*) default initialize members
/// - int soap_read_ns1__PartyIdentification135(soap*, ns1__PartyIdentification135*) deserialize from a stream
/// - int soap_write_ns1__PartyIdentification135(soap*, ns1__PartyIdentification135*) serialize to a stream
/// - ns1__PartyIdentification135* ns1__PartyIdentification135::soap_dup(soap*) returns deep copy of ns1__PartyIdentification135, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__PartyIdentification135::soap_del() deep deletes ns1__PartyIdentification135 data members, use only after ns1__PartyIdentification135::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__PartyIdentification135::soap_type() returns SOAP_TYPE_ns1__PartyIdentification135 or derived type identifier
class ns1__PartyIdentification135
{ public:
/// Element "Nm" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max140Text.
    ns1__Max140Text*                     Nm                             0;	///< Optional element.
/// Element "PstlAdr" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":PostalAddress24.
    ns1__PostalAddress24*                PstlAdr                        0;	///< Optional element.
/// Element "Id" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Party38Choice.
    ns1__Party38Choice*                  Id                             0;	///< Optional element.
/// Element "CtryOfRes" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":CountryCode.
    ns1__CountryCode*                    CtryOfRes                      0;	///< Optional element.
/// Element "CtctDtls" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Contact4.
    ns1__Contact4*                       CtctDtls                       0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":PaymentIdentification6 is a complexType.
///
/// @note class ns1__PaymentIdentification6 operations:
/// - ns1__PaymentIdentification6* soap_new_ns1__PaymentIdentification6(soap*) allocate and default initialize
/// - ns1__PaymentIdentification6* soap_new_ns1__PaymentIdentification6(soap*, int num) allocate and default initialize an array
/// - ns1__PaymentIdentification6* soap_new_req_ns1__PaymentIdentification6(soap*, ...) allocate, set required members
/// - ns1__PaymentIdentification6* soap_new_set_ns1__PaymentIdentification6(soap*, ...) allocate, set all public members
/// - ns1__PaymentIdentification6::soap_default(soap*) default initialize members
/// - int soap_read_ns1__PaymentIdentification6(soap*, ns1__PaymentIdentification6*) deserialize from a stream
/// - int soap_write_ns1__PaymentIdentification6(soap*, ns1__PaymentIdentification6*) serialize to a stream
/// - ns1__PaymentIdentification6* ns1__PaymentIdentification6::soap_dup(soap*) returns deep copy of ns1__PaymentIdentification6, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__PaymentIdentification6::soap_del() deep deletes ns1__PaymentIdentification6 data members, use only after ns1__PaymentIdentification6::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__PaymentIdentification6::soap_type() returns SOAP_TYPE_ns1__PaymentIdentification6 or derived type identifier
class ns1__PaymentIdentification6
{ public:
/// Element "InstrId" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text*                      InstrId                        0;	///< Optional element.
/// Element "EndToEndId" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text                       EndToEndId                     1;	///< Required element.
/// Element "UETR" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":UUIDv4Identifier.
    ns1__UUIDv4Identifier*               UETR                           0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":PaymentInitiationSource1 is a complexType.
///
/// @note class ns1__PaymentInitiationSource1 operations:
/// - ns1__PaymentInitiationSource1* soap_new_ns1__PaymentInitiationSource1(soap*) allocate and default initialize
/// - ns1__PaymentInitiationSource1* soap_new_ns1__PaymentInitiationSource1(soap*, int num) allocate and default initialize an array
/// - ns1__PaymentInitiationSource1* soap_new_req_ns1__PaymentInitiationSource1(soap*, ...) allocate, set required members
/// - ns1__PaymentInitiationSource1* soap_new_set_ns1__PaymentInitiationSource1(soap*, ...) allocate, set all public members
/// - ns1__PaymentInitiationSource1::soap_default(soap*) default initialize members
/// - int soap_read_ns1__PaymentInitiationSource1(soap*, ns1__PaymentInitiationSource1*) deserialize from a stream
/// - int soap_write_ns1__PaymentInitiationSource1(soap*, ns1__PaymentInitiationSource1*) serialize to a stream
/// - ns1__PaymentInitiationSource1* ns1__PaymentInitiationSource1::soap_dup(soap*) returns deep copy of ns1__PaymentInitiationSource1, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__PaymentInitiationSource1::soap_del() deep deletes ns1__PaymentInitiationSource1 data members, use only after ns1__PaymentInitiationSource1::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__PaymentInitiationSource1::soap_type() returns SOAP_TYPE_ns1__PaymentInitiationSource1 or derived type identifier
class ns1__PaymentInitiationSource1
{ public:
/// Element "Nm" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max140Text.
    ns1__Max140Text                      Nm                             1;	///< Required element.
/// Element "Prvdr" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text*                      Prvdr                          0;	///< Optional element.
/// Element "Vrsn" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text*                      Vrsn                           0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":PaymentInstruction40 is a complexType.
///
/// @note class ns1__PaymentInstruction40 operations:
/// - ns1__PaymentInstruction40* soap_new_ns1__PaymentInstruction40(soap*) allocate and default initialize
/// - ns1__PaymentInstruction40* soap_new_ns1__PaymentInstruction40(soap*, int num) allocate and default initialize an array
/// - ns1__PaymentInstruction40* soap_new_req_ns1__PaymentInstruction40(soap*, ...) allocate, set required members
/// - ns1__PaymentInstruction40* soap_new_set_ns1__PaymentInstruction40(soap*, ...) allocate, set all public members
/// - ns1__PaymentInstruction40::soap_default(soap*) default initialize members
/// - int soap_read_ns1__PaymentInstruction40(soap*, ns1__PaymentInstruction40*) deserialize from a stream
/// - int soap_write_ns1__PaymentInstruction40(soap*, ns1__PaymentInstruction40*) serialize to a stream
/// - ns1__PaymentInstruction40* ns1__PaymentInstruction40::soap_dup(soap*) returns deep copy of ns1__PaymentInstruction40, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__PaymentInstruction40::soap_del() deep deletes ns1__PaymentInstruction40 data members, use only after ns1__PaymentInstruction40::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__PaymentInstruction40::soap_type() returns SOAP_TYPE_ns1__PaymentInstruction40 or derived type identifier
class ns1__PaymentInstruction40
{ public:
/// Element "PmtInfId" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text                       PmtInfId                       1;	///< Required element.
/// Element "PmtMtd" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":PaymentMethod3Code.
    enum ns1__PaymentMethod3Code         PmtMtd                         1;	///< Required element.
/// Element "ReqdAdvcTp" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":AdviceType1.
    ns1__AdviceType1*                    ReqdAdvcTp                     0;	///< Optional element.
/// Element "BtchBookg" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":BatchBookingIndicator.
    ns1__BatchBookingIndicator*          BtchBookg                      0;	///< Optional element.
/// Element "NbOfTxs" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max15NumericText.
    ns1__Max15NumericText*               NbOfTxs                        0;	///< Optional element.
/// Element "CtrlSum" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":DecimalNumber.
    ns1__DecimalNumber*                  CtrlSum                        0;	///< Optional element.
/// Element "PmtTpInf" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":PaymentTypeInformation26.
    ns1__PaymentTypeInformation26*       PmtTpInf                       0;	///< Optional element.
/// Element "ReqdExctnDt" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":DateAndDateTime2Choice.
    ns1__DateAndDateTime2Choice*         ReqdExctnDt                    1;	///< Required element.
/// Element "PoolgAdjstmntDt" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ISODate.
    ns1__ISODate*                        PoolgAdjstmntDt                0;	///< Optional element.
/// Element "Dbtr" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":PartyIdentification135.
    ns1__PartyIdentification135*         Dbtr                           1;	///< Required element.
/// Element "DbtrAcct" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":CashAccount40.
    ns1__CashAccount40*                  DbtrAcct                       1;	///< Required element.
/// Element "DbtrAgt" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":BranchAndFinancialInstitutionIdentification6.
    ns1__BranchAndFinancialInstitutionIdentification6*  DbtrAgt                        1;	///< Required element.
/// Element "DbtrAgtAcct" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":CashAccount40.
    ns1__CashAccount40*                  DbtrAgtAcct                    0;	///< Optional element.
/// Element "InstrForDbtrAgt" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max140Text.
    ns1__Max140Text*                     InstrForDbtrAgt                0;	///< Optional element.
/// Element "UltmtDbtr" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":PartyIdentification135.
    ns1__PartyIdentification135*         UltmtDbtr                      0;	///< Optional element.
/// Element "ChrgBr" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ChargeBearerType1Code.
    enum ns1__ChargeBearerType1Code*     ChrgBr                         0;	///< Optional element.
/// Element "ChrgsAcct" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":CashAccount40.
    ns1__CashAccount40*                  ChrgsAcct                      0;	///< Optional element.
/// Element "ChrgsAcctAgt" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":BranchAndFinancialInstitutionIdentification6.
    ns1__BranchAndFinancialInstitutionIdentification6*  ChrgsAcctAgt                   0;	///< Optional element.
/// Vector of ns1__CreditTransferTransaction54* of length 1..unbounded.
    std::vector<ns1__CreditTransferTransaction54*> CdtTrfTxInf                    1;	///< Multiple elements.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":PaymentTypeInformation26 is a complexType.
///
/// @note class ns1__PaymentTypeInformation26 operations:
/// - ns1__PaymentTypeInformation26* soap_new_ns1__PaymentTypeInformation26(soap*) allocate and default initialize
/// - ns1__PaymentTypeInformation26* soap_new_ns1__PaymentTypeInformation26(soap*, int num) allocate and default initialize an array
/// - ns1__PaymentTypeInformation26* soap_new_req_ns1__PaymentTypeInformation26(soap*, ...) allocate, set required members
/// - ns1__PaymentTypeInformation26* soap_new_set_ns1__PaymentTypeInformation26(soap*, ...) allocate, set all public members
/// - ns1__PaymentTypeInformation26::soap_default(soap*) default initialize members
/// - int soap_read_ns1__PaymentTypeInformation26(soap*, ns1__PaymentTypeInformation26*) deserialize from a stream
/// - int soap_write_ns1__PaymentTypeInformation26(soap*, ns1__PaymentTypeInformation26*) serialize to a stream
/// - ns1__PaymentTypeInformation26* ns1__PaymentTypeInformation26::soap_dup(soap*) returns deep copy of ns1__PaymentTypeInformation26, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__PaymentTypeInformation26::soap_del() deep deletes ns1__PaymentTypeInformation26 data members, use only after ns1__PaymentTypeInformation26::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__PaymentTypeInformation26::soap_type() returns SOAP_TYPE_ns1__PaymentTypeInformation26 or derived type identifier
class ns1__PaymentTypeInformation26
{ public:
/// Element "InstrPrty" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Priority2Code.
    enum ns1__Priority2Code*             InstrPrty                      0;	///< Optional element.
/// Vector of ns1__ServiceLevel8Choice* of length 0..unbounded.
    std::vector<ns1__ServiceLevel8Choice*> SvcLvl                         0;	///< Multiple elements.
/// Element "LclInstrm" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":LocalInstrument2Choice.
    ns1__LocalInstrument2Choice*         LclInstrm                      0;	///< Optional element.
/// Element "CtgyPurp" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":CategoryPurpose1Choice.
    ns1__CategoryPurpose1Choice*         CtgyPurp                       0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":PersonIdentification13 is a complexType.
///
/// @note class ns1__PersonIdentification13 operations:
/// - ns1__PersonIdentification13* soap_new_ns1__PersonIdentification13(soap*) allocate and default initialize
/// - ns1__PersonIdentification13* soap_new_ns1__PersonIdentification13(soap*, int num) allocate and default initialize an array
/// - ns1__PersonIdentification13* soap_new_req_ns1__PersonIdentification13(soap*, ...) allocate, set required members
/// - ns1__PersonIdentification13* soap_new_set_ns1__PersonIdentification13(soap*, ...) allocate, set all public members
/// - ns1__PersonIdentification13::soap_default(soap*) default initialize members
/// - int soap_read_ns1__PersonIdentification13(soap*, ns1__PersonIdentification13*) deserialize from a stream
/// - int soap_write_ns1__PersonIdentification13(soap*, ns1__PersonIdentification13*) serialize to a stream
/// - ns1__PersonIdentification13* ns1__PersonIdentification13::soap_dup(soap*) returns deep copy of ns1__PersonIdentification13, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__PersonIdentification13::soap_del() deep deletes ns1__PersonIdentification13 data members, use only after ns1__PersonIdentification13::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__PersonIdentification13::soap_type() returns SOAP_TYPE_ns1__PersonIdentification13 or derived type identifier
class ns1__PersonIdentification13
{ public:
/// Element "DtAndPlcOfBirth" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":DateAndPlaceOfBirth1.
    ns1__DateAndPlaceOfBirth1*           DtAndPlcOfBirth                0;	///< Optional element.
/// Vector of ns1__GenericPersonIdentification1* of length 0..unbounded.
    std::vector<ns1__GenericPersonIdentification1*> Othr                           0;	///< Multiple elements.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":PersonIdentificationSchemeName1Choice is a complexType.
///
/// @note class ns1__PersonIdentificationSchemeName1Choice operations:
/// - ns1__PersonIdentificationSchemeName1Choice* soap_new_ns1__PersonIdentificationSchemeName1Choice(soap*) allocate and default initialize
/// - ns1__PersonIdentificationSchemeName1Choice* soap_new_ns1__PersonIdentificationSchemeName1Choice(soap*, int num) allocate and default initialize an array
/// - ns1__PersonIdentificationSchemeName1Choice* soap_new_req_ns1__PersonIdentificationSchemeName1Choice(soap*, ...) allocate, set required members
/// - ns1__PersonIdentificationSchemeName1Choice* soap_new_set_ns1__PersonIdentificationSchemeName1Choice(soap*, ...) allocate, set all public members
/// - ns1__PersonIdentificationSchemeName1Choice::soap_default(soap*) default initialize members
/// - int soap_read_ns1__PersonIdentificationSchemeName1Choice(soap*, ns1__PersonIdentificationSchemeName1Choice*) deserialize from a stream
/// - int soap_write_ns1__PersonIdentificationSchemeName1Choice(soap*, ns1__PersonIdentificationSchemeName1Choice*) serialize to a stream
/// - ns1__PersonIdentificationSchemeName1Choice* ns1__PersonIdentificationSchemeName1Choice::soap_dup(soap*) returns deep copy of ns1__PersonIdentificationSchemeName1Choice, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__PersonIdentificationSchemeName1Choice::soap_del() deep deletes ns1__PersonIdentificationSchemeName1Choice data members, use only after ns1__PersonIdentificationSchemeName1Choice::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__PersonIdentificationSchemeName1Choice::soap_type() returns SOAP_TYPE_ns1__PersonIdentificationSchemeName1Choice or derived type identifier
class ns1__PersonIdentificationSchemeName1Choice
{ public:
//  BEGIN CHOICE <xs:choice>
  $ int                                  __union_PersonIdentificationSchemeName1Choice;	///< Union _ns1__union_PersonIdentificationSchemeName1Choice selector: set to SOAP_UNION__ns1__union_PersonIdentificationSchemeName1Choice_<fieldname>
/// Union for choice in ns1__PersonIdentificationSchemeName1Choice.
    union _ns1__union_PersonIdentificationSchemeName1Choice
    {
/// Element "Cd" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ExternalPersonIdentification1Code.
    ns1__ExternalPersonIdentification1Code*  Cd                            ;	///< Choice of element (one of multiple choices).
/// Element "Prtry" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text*                      Prtry                         ;	///< Choice of element (one of multiple choices).
    }                                    union_PersonIdentificationSchemeName1Choice;
//  END OF CHOICE
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":PostalAddress24 is a complexType.
///
/// @note class ns1__PostalAddress24 operations:
/// - ns1__PostalAddress24* soap_new_ns1__PostalAddress24(soap*) allocate and default initialize
/// - ns1__PostalAddress24* soap_new_ns1__PostalAddress24(soap*, int num) allocate and default initialize an array
/// - ns1__PostalAddress24* soap_new_req_ns1__PostalAddress24(soap*, ...) allocate, set required members
/// - ns1__PostalAddress24* soap_new_set_ns1__PostalAddress24(soap*, ...) allocate, set all public members
/// - ns1__PostalAddress24::soap_default(soap*) default initialize members
/// - int soap_read_ns1__PostalAddress24(soap*, ns1__PostalAddress24*) deserialize from a stream
/// - int soap_write_ns1__PostalAddress24(soap*, ns1__PostalAddress24*) serialize to a stream
/// - ns1__PostalAddress24* ns1__PostalAddress24::soap_dup(soap*) returns deep copy of ns1__PostalAddress24, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__PostalAddress24::soap_del() deep deletes ns1__PostalAddress24 data members, use only after ns1__PostalAddress24::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__PostalAddress24::soap_type() returns SOAP_TYPE_ns1__PostalAddress24 or derived type identifier
class ns1__PostalAddress24
{ public:
/// Element "AdrTp" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":AddressType3Choice.
    ns1__AddressType3Choice*             AdrTp                          0;	///< Optional element.
/// Element "Dept" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max70Text.
    ns1__Max70Text*                      Dept                           0;	///< Optional element.
/// Element "SubDept" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max70Text.
    ns1__Max70Text*                      SubDept                        0;	///< Optional element.
/// Element "StrtNm" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max70Text.
    ns1__Max70Text*                      StrtNm                         0;	///< Optional element.
/// Element "BldgNb" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max16Text.
    ns1__Max16Text*                      BldgNb                         0;	///< Optional element.
/// Element "BldgNm" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text*                      BldgNm                         0;	///< Optional element.
/// Element "Flr" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max70Text.
    ns1__Max70Text*                      Flr                            0;	///< Optional element.
/// Element "PstBx" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max16Text.
    ns1__Max16Text*                      PstBx                          0;	///< Optional element.
/// Element "Room" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max70Text.
    ns1__Max70Text*                      Room                           0;	///< Optional element.
/// Element "PstCd" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max16Text.
    ns1__Max16Text*                      PstCd                          0;	///< Optional element.
/// Element "TwnNm" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text*                      TwnNm                          0;	///< Optional element.
/// Element "TwnLctnNm" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text*                      TwnLctnNm                      0;	///< Optional element.
/// Element "DstrctNm" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text*                      DstrctNm                       0;	///< Optional element.
/// Element "CtrySubDvsn" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text*                      CtrySubDvsn                    0;	///< Optional element.
/// Element "Ctry" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":CountryCode.
    ns1__CountryCode*                    Ctry                           0;	///< Optional element.
/// Vector of ns1__Max70Text of length 0..7.
    std::vector<ns1__Max70Text         > AdrLine                        0:7;	///< Multiple elements.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ProxyAccountIdentification1 is a complexType.
///
/// @note class ns1__ProxyAccountIdentification1 operations:
/// - ns1__ProxyAccountIdentification1* soap_new_ns1__ProxyAccountIdentification1(soap*) allocate and default initialize
/// - ns1__ProxyAccountIdentification1* soap_new_ns1__ProxyAccountIdentification1(soap*, int num) allocate and default initialize an array
/// - ns1__ProxyAccountIdentification1* soap_new_req_ns1__ProxyAccountIdentification1(soap*, ...) allocate, set required members
/// - ns1__ProxyAccountIdentification1* soap_new_set_ns1__ProxyAccountIdentification1(soap*, ...) allocate, set all public members
/// - ns1__ProxyAccountIdentification1::soap_default(soap*) default initialize members
/// - int soap_read_ns1__ProxyAccountIdentification1(soap*, ns1__ProxyAccountIdentification1*) deserialize from a stream
/// - int soap_write_ns1__ProxyAccountIdentification1(soap*, ns1__ProxyAccountIdentification1*) serialize to a stream
/// - ns1__ProxyAccountIdentification1* ns1__ProxyAccountIdentification1::soap_dup(soap*) returns deep copy of ns1__ProxyAccountIdentification1, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__ProxyAccountIdentification1::soap_del() deep deletes ns1__ProxyAccountIdentification1 data members, use only after ns1__ProxyAccountIdentification1::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__ProxyAccountIdentification1::soap_type() returns SOAP_TYPE_ns1__ProxyAccountIdentification1 or derived type identifier
class ns1__ProxyAccountIdentification1
{ public:
/// Element "Tp" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ProxyAccountType1Choice.
    ns1__ProxyAccountType1Choice*        Tp                             0;	///< Optional element.
/// Element "Id" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max2048Text.
    ns1__Max2048Text                     Id                             1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ProxyAccountType1Choice is a complexType.
///
/// @note class ns1__ProxyAccountType1Choice operations:
/// - ns1__ProxyAccountType1Choice* soap_new_ns1__ProxyAccountType1Choice(soap*) allocate and default initialize
/// - ns1__ProxyAccountType1Choice* soap_new_ns1__ProxyAccountType1Choice(soap*, int num) allocate and default initialize an array
/// - ns1__ProxyAccountType1Choice* soap_new_req_ns1__ProxyAccountType1Choice(soap*, ...) allocate, set required members
/// - ns1__ProxyAccountType1Choice* soap_new_set_ns1__ProxyAccountType1Choice(soap*, ...) allocate, set all public members
/// - ns1__ProxyAccountType1Choice::soap_default(soap*) default initialize members
/// - int soap_read_ns1__ProxyAccountType1Choice(soap*, ns1__ProxyAccountType1Choice*) deserialize from a stream
/// - int soap_write_ns1__ProxyAccountType1Choice(soap*, ns1__ProxyAccountType1Choice*) serialize to a stream
/// - ns1__ProxyAccountType1Choice* ns1__ProxyAccountType1Choice::soap_dup(soap*) returns deep copy of ns1__ProxyAccountType1Choice, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__ProxyAccountType1Choice::soap_del() deep deletes ns1__ProxyAccountType1Choice data members, use only after ns1__ProxyAccountType1Choice::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__ProxyAccountType1Choice::soap_type() returns SOAP_TYPE_ns1__ProxyAccountType1Choice or derived type identifier
class ns1__ProxyAccountType1Choice
{ public:
//  BEGIN CHOICE <xs:choice>
  $ int                                  __union_ProxyAccountType1Choice;	///< Union _ns1__union_ProxyAccountType1Choice selector: set to SOAP_UNION__ns1__union_ProxyAccountType1Choice_<fieldname>
/// Union for choice in ns1__ProxyAccountType1Choice.
    union _ns1__union_ProxyAccountType1Choice
    {
/// Element "Cd" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ExternalProxyAccountType1Code.
    ns1__ExternalProxyAccountType1Code*  Cd                            ;	///< Choice of element (one of multiple choices).
/// Element "Prtry" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text*                      Prtry                         ;	///< Choice of element (one of multiple choices).
    }                                    union_ProxyAccountType1Choice ;
//  END OF CHOICE
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Purpose2Choice is a complexType.
///
/// @note class ns1__Purpose2Choice operations:
/// - ns1__Purpose2Choice* soap_new_ns1__Purpose2Choice(soap*) allocate and default initialize
/// - ns1__Purpose2Choice* soap_new_ns1__Purpose2Choice(soap*, int num) allocate and default initialize an array
/// - ns1__Purpose2Choice* soap_new_req_ns1__Purpose2Choice(soap*, ...) allocate, set required members
/// - ns1__Purpose2Choice* soap_new_set_ns1__Purpose2Choice(soap*, ...) allocate, set all public members
/// - ns1__Purpose2Choice::soap_default(soap*) default initialize members
/// - int soap_read_ns1__Purpose2Choice(soap*, ns1__Purpose2Choice*) deserialize from a stream
/// - int soap_write_ns1__Purpose2Choice(soap*, ns1__Purpose2Choice*) serialize to a stream
/// - ns1__Purpose2Choice* ns1__Purpose2Choice::soap_dup(soap*) returns deep copy of ns1__Purpose2Choice, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__Purpose2Choice::soap_del() deep deletes ns1__Purpose2Choice data members, use only after ns1__Purpose2Choice::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__Purpose2Choice::soap_type() returns SOAP_TYPE_ns1__Purpose2Choice or derived type identifier
class ns1__Purpose2Choice
{ public:
//  BEGIN CHOICE <xs:choice>
  $ int                                  __union_Purpose2Choice        ;	///< Union _ns1__union_Purpose2Choice selector: set to SOAP_UNION__ns1__union_Purpose2Choice_<fieldname>
/// Union for choice in ns1__Purpose2Choice.
    union _ns1__union_Purpose2Choice
    {
/// Element "Cd" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ExternalPurpose1Code.
    ns1__ExternalPurpose1Code*           Cd                            ;	///< Choice of element (one of multiple choices).
/// Element "Prtry" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text*                      Prtry                         ;	///< Choice of element (one of multiple choices).
    }                                    union_Purpose2Choice          ;
//  END OF CHOICE
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ReferredDocumentInformation7 is a complexType.
///
/// @note class ns1__ReferredDocumentInformation7 operations:
/// - ns1__ReferredDocumentInformation7* soap_new_ns1__ReferredDocumentInformation7(soap*) allocate and default initialize
/// - ns1__ReferredDocumentInformation7* soap_new_ns1__ReferredDocumentInformation7(soap*, int num) allocate and default initialize an array
/// - ns1__ReferredDocumentInformation7* soap_new_req_ns1__ReferredDocumentInformation7(soap*, ...) allocate, set required members
/// - ns1__ReferredDocumentInformation7* soap_new_set_ns1__ReferredDocumentInformation7(soap*, ...) allocate, set all public members
/// - ns1__ReferredDocumentInformation7::soap_default(soap*) default initialize members
/// - int soap_read_ns1__ReferredDocumentInformation7(soap*, ns1__ReferredDocumentInformation7*) deserialize from a stream
/// - int soap_write_ns1__ReferredDocumentInformation7(soap*, ns1__ReferredDocumentInformation7*) serialize to a stream
/// - ns1__ReferredDocumentInformation7* ns1__ReferredDocumentInformation7::soap_dup(soap*) returns deep copy of ns1__ReferredDocumentInformation7, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__ReferredDocumentInformation7::soap_del() deep deletes ns1__ReferredDocumentInformation7 data members, use only after ns1__ReferredDocumentInformation7::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__ReferredDocumentInformation7::soap_type() returns SOAP_TYPE_ns1__ReferredDocumentInformation7 or derived type identifier
class ns1__ReferredDocumentInformation7
{ public:
/// Element "Tp" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ReferredDocumentType4.
    ns1__ReferredDocumentType4*          Tp                             0;	///< Optional element.
/// Element "Nb" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text*                      Nb                             0;	///< Optional element.
/// Element "RltdDt" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ISODate.
    ns1__ISODate*                        RltdDt                         0;	///< Optional element.
/// Vector of ns1__DocumentLineInformation1* of length 0..unbounded.
    std::vector<ns1__DocumentLineInformation1*> LineDtls                       0;	///< Multiple elements.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ReferredDocumentType3Choice is a complexType.
///
/// @note class ns1__ReferredDocumentType3Choice operations:
/// - ns1__ReferredDocumentType3Choice* soap_new_ns1__ReferredDocumentType3Choice(soap*) allocate and default initialize
/// - ns1__ReferredDocumentType3Choice* soap_new_ns1__ReferredDocumentType3Choice(soap*, int num) allocate and default initialize an array
/// - ns1__ReferredDocumentType3Choice* soap_new_req_ns1__ReferredDocumentType3Choice(soap*, ...) allocate, set required members
/// - ns1__ReferredDocumentType3Choice* soap_new_set_ns1__ReferredDocumentType3Choice(soap*, ...) allocate, set all public members
/// - ns1__ReferredDocumentType3Choice::soap_default(soap*) default initialize members
/// - int soap_read_ns1__ReferredDocumentType3Choice(soap*, ns1__ReferredDocumentType3Choice*) deserialize from a stream
/// - int soap_write_ns1__ReferredDocumentType3Choice(soap*, ns1__ReferredDocumentType3Choice*) serialize to a stream
/// - ns1__ReferredDocumentType3Choice* ns1__ReferredDocumentType3Choice::soap_dup(soap*) returns deep copy of ns1__ReferredDocumentType3Choice, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__ReferredDocumentType3Choice::soap_del() deep deletes ns1__ReferredDocumentType3Choice data members, use only after ns1__ReferredDocumentType3Choice::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__ReferredDocumentType3Choice::soap_type() returns SOAP_TYPE_ns1__ReferredDocumentType3Choice or derived type identifier
class ns1__ReferredDocumentType3Choice
{ public:
//  BEGIN CHOICE <xs:choice>
  $ int                                  __union_ReferredDocumentType3Choice;	///< Union _ns1__union_ReferredDocumentType3Choice selector: set to SOAP_UNION__ns1__union_ReferredDocumentType3Choice_<fieldname>
/// Union for choice in ns1__ReferredDocumentType3Choice.
    union _ns1__union_ReferredDocumentType3Choice
    {
/// Element "Cd" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":DocumentType6Code.
    enum ns1__DocumentType6Code          Cd                            ;	///< Choice of element (one of multiple choices).
/// Element "Prtry" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text*                      Prtry                         ;	///< Choice of element (one of multiple choices).
    }                                    union_ReferredDocumentType3Choice;
//  END OF CHOICE
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ReferredDocumentType4 is a complexType.
///
/// @note class ns1__ReferredDocumentType4 operations:
/// - ns1__ReferredDocumentType4* soap_new_ns1__ReferredDocumentType4(soap*) allocate and default initialize
/// - ns1__ReferredDocumentType4* soap_new_ns1__ReferredDocumentType4(soap*, int num) allocate and default initialize an array
/// - ns1__ReferredDocumentType4* soap_new_req_ns1__ReferredDocumentType4(soap*, ...) allocate, set required members
/// - ns1__ReferredDocumentType4* soap_new_set_ns1__ReferredDocumentType4(soap*, ...) allocate, set all public members
/// - ns1__ReferredDocumentType4::soap_default(soap*) default initialize members
/// - int soap_read_ns1__ReferredDocumentType4(soap*, ns1__ReferredDocumentType4*) deserialize from a stream
/// - int soap_write_ns1__ReferredDocumentType4(soap*, ns1__ReferredDocumentType4*) serialize to a stream
/// - ns1__ReferredDocumentType4* ns1__ReferredDocumentType4::soap_dup(soap*) returns deep copy of ns1__ReferredDocumentType4, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__ReferredDocumentType4::soap_del() deep deletes ns1__ReferredDocumentType4 data members, use only after ns1__ReferredDocumentType4::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__ReferredDocumentType4::soap_type() returns SOAP_TYPE_ns1__ReferredDocumentType4 or derived type identifier
class ns1__ReferredDocumentType4
{ public:
/// Element "CdOrPrtry" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ReferredDocumentType3Choice.
    ns1__ReferredDocumentType3Choice*    CdOrPrtry                      1;	///< Required element.
/// Element "Issr" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text*                      Issr                           0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":RegulatoryAuthority2 is a complexType.
///
/// @note class ns1__RegulatoryAuthority2 operations:
/// - ns1__RegulatoryAuthority2* soap_new_ns1__RegulatoryAuthority2(soap*) allocate and default initialize
/// - ns1__RegulatoryAuthority2* soap_new_ns1__RegulatoryAuthority2(soap*, int num) allocate and default initialize an array
/// - ns1__RegulatoryAuthority2* soap_new_req_ns1__RegulatoryAuthority2(soap*, ...) allocate, set required members
/// - ns1__RegulatoryAuthority2* soap_new_set_ns1__RegulatoryAuthority2(soap*, ...) allocate, set all public members
/// - ns1__RegulatoryAuthority2::soap_default(soap*) default initialize members
/// - int soap_read_ns1__RegulatoryAuthority2(soap*, ns1__RegulatoryAuthority2*) deserialize from a stream
/// - int soap_write_ns1__RegulatoryAuthority2(soap*, ns1__RegulatoryAuthority2*) serialize to a stream
/// - ns1__RegulatoryAuthority2* ns1__RegulatoryAuthority2::soap_dup(soap*) returns deep copy of ns1__RegulatoryAuthority2, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__RegulatoryAuthority2::soap_del() deep deletes ns1__RegulatoryAuthority2 data members, use only after ns1__RegulatoryAuthority2::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__RegulatoryAuthority2::soap_type() returns SOAP_TYPE_ns1__RegulatoryAuthority2 or derived type identifier
class ns1__RegulatoryAuthority2
{ public:
/// Element "Nm" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max140Text.
    ns1__Max140Text*                     Nm                             0;	///< Optional element.
/// Element "Ctry" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":CountryCode.
    ns1__CountryCode*                    Ctry                           0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":RegulatoryReporting3 is a complexType.
///
/// @note class ns1__RegulatoryReporting3 operations:
/// - ns1__RegulatoryReporting3* soap_new_ns1__RegulatoryReporting3(soap*) allocate and default initialize
/// - ns1__RegulatoryReporting3* soap_new_ns1__RegulatoryReporting3(soap*, int num) allocate and default initialize an array
/// - ns1__RegulatoryReporting3* soap_new_req_ns1__RegulatoryReporting3(soap*, ...) allocate, set required members
/// - ns1__RegulatoryReporting3* soap_new_set_ns1__RegulatoryReporting3(soap*, ...) allocate, set all public members
/// - ns1__RegulatoryReporting3::soap_default(soap*) default initialize members
/// - int soap_read_ns1__RegulatoryReporting3(soap*, ns1__RegulatoryReporting3*) deserialize from a stream
/// - int soap_write_ns1__RegulatoryReporting3(soap*, ns1__RegulatoryReporting3*) serialize to a stream
/// - ns1__RegulatoryReporting3* ns1__RegulatoryReporting3::soap_dup(soap*) returns deep copy of ns1__RegulatoryReporting3, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__RegulatoryReporting3::soap_del() deep deletes ns1__RegulatoryReporting3 data members, use only after ns1__RegulatoryReporting3::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__RegulatoryReporting3::soap_type() returns SOAP_TYPE_ns1__RegulatoryReporting3 or derived type identifier
class ns1__RegulatoryReporting3
{ public:
/// Element "DbtCdtRptgInd" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":RegulatoryReportingType1Code.
    enum ns1__RegulatoryReportingType1Code*  DbtCdtRptgInd                  0;	///< Optional element.
/// Element "Authrty" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":RegulatoryAuthority2.
    ns1__RegulatoryAuthority2*           Authrty                        0;	///< Optional element.
/// Vector of ns1__StructuredRegulatoryReporting3* of length 0..unbounded.
    std::vector<ns1__StructuredRegulatoryReporting3*> Dtls                           0;	///< Multiple elements.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":RemittanceAmount2 is a complexType.
///
/// @note class ns1__RemittanceAmount2 operations:
/// - ns1__RemittanceAmount2* soap_new_ns1__RemittanceAmount2(soap*) allocate and default initialize
/// - ns1__RemittanceAmount2* soap_new_ns1__RemittanceAmount2(soap*, int num) allocate and default initialize an array
/// - ns1__RemittanceAmount2* soap_new_req_ns1__RemittanceAmount2(soap*, ...) allocate, set required members
/// - ns1__RemittanceAmount2* soap_new_set_ns1__RemittanceAmount2(soap*, ...) allocate, set all public members
/// - ns1__RemittanceAmount2::soap_default(soap*) default initialize members
/// - int soap_read_ns1__RemittanceAmount2(soap*, ns1__RemittanceAmount2*) deserialize from a stream
/// - int soap_write_ns1__RemittanceAmount2(soap*, ns1__RemittanceAmount2*) serialize to a stream
/// - ns1__RemittanceAmount2* ns1__RemittanceAmount2::soap_dup(soap*) returns deep copy of ns1__RemittanceAmount2, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__RemittanceAmount2::soap_del() deep deletes ns1__RemittanceAmount2 data members, use only after ns1__RemittanceAmount2::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__RemittanceAmount2::soap_type() returns SOAP_TYPE_ns1__RemittanceAmount2 or derived type identifier
class ns1__RemittanceAmount2
{ public:
/// Element "DuePyblAmt" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ActiveOrHistoricCurrencyAndAmount.
    ns1__ActiveOrHistoricCurrencyAndAmount*  DuePyblAmt                     0;	///< Optional element.
/// Vector of ns1__DiscountAmountAndType1* of length 0..unbounded.
    std::vector<ns1__DiscountAmountAndType1*> DscntApldAmt                   0;	///< Multiple elements.
/// Element "CdtNoteAmt" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ActiveOrHistoricCurrencyAndAmount.
    ns1__ActiveOrHistoricCurrencyAndAmount*  CdtNoteAmt                     0;	///< Optional element.
/// Vector of ns1__TaxAmountAndType1* of length 0..unbounded.
    std::vector<ns1__TaxAmountAndType1*> TaxAmt                         0;	///< Multiple elements.
/// Vector of ns1__DocumentAdjustment1* of length 0..unbounded.
    std::vector<ns1__DocumentAdjustment1*> AdjstmntAmtAndRsn              0;	///< Multiple elements.
/// Element "RmtdAmt" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ActiveOrHistoricCurrencyAndAmount.
    ns1__ActiveOrHistoricCurrencyAndAmount*  RmtdAmt                        0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":RemittanceAmount3 is a complexType.
///
/// @note class ns1__RemittanceAmount3 operations:
/// - ns1__RemittanceAmount3* soap_new_ns1__RemittanceAmount3(soap*) allocate and default initialize
/// - ns1__RemittanceAmount3* soap_new_ns1__RemittanceAmount3(soap*, int num) allocate and default initialize an array
/// - ns1__RemittanceAmount3* soap_new_req_ns1__RemittanceAmount3(soap*, ...) allocate, set required members
/// - ns1__RemittanceAmount3* soap_new_set_ns1__RemittanceAmount3(soap*, ...) allocate, set all public members
/// - ns1__RemittanceAmount3::soap_default(soap*) default initialize members
/// - int soap_read_ns1__RemittanceAmount3(soap*, ns1__RemittanceAmount3*) deserialize from a stream
/// - int soap_write_ns1__RemittanceAmount3(soap*, ns1__RemittanceAmount3*) serialize to a stream
/// - ns1__RemittanceAmount3* ns1__RemittanceAmount3::soap_dup(soap*) returns deep copy of ns1__RemittanceAmount3, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__RemittanceAmount3::soap_del() deep deletes ns1__RemittanceAmount3 data members, use only after ns1__RemittanceAmount3::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__RemittanceAmount3::soap_type() returns SOAP_TYPE_ns1__RemittanceAmount3 or derived type identifier
class ns1__RemittanceAmount3
{ public:
/// Element "DuePyblAmt" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ActiveOrHistoricCurrencyAndAmount.
    ns1__ActiveOrHistoricCurrencyAndAmount*  DuePyblAmt                     0;	///< Optional element.
/// Vector of ns1__DiscountAmountAndType1* of length 0..unbounded.
    std::vector<ns1__DiscountAmountAndType1*> DscntApldAmt                   0;	///< Multiple elements.
/// Element "CdtNoteAmt" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ActiveOrHistoricCurrencyAndAmount.
    ns1__ActiveOrHistoricCurrencyAndAmount*  CdtNoteAmt                     0;	///< Optional element.
/// Vector of ns1__TaxAmountAndType1* of length 0..unbounded.
    std::vector<ns1__TaxAmountAndType1*> TaxAmt                         0;	///< Multiple elements.
/// Vector of ns1__DocumentAdjustment1* of length 0..unbounded.
    std::vector<ns1__DocumentAdjustment1*> AdjstmntAmtAndRsn              0;	///< Multiple elements.
/// Element "RmtdAmt" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ActiveOrHistoricCurrencyAndAmount.
    ns1__ActiveOrHistoricCurrencyAndAmount*  RmtdAmt                        0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":RemittanceInformation21 is a complexType.
///
/// @note class ns1__RemittanceInformation21 operations:
/// - ns1__RemittanceInformation21* soap_new_ns1__RemittanceInformation21(soap*) allocate and default initialize
/// - ns1__RemittanceInformation21* soap_new_ns1__RemittanceInformation21(soap*, int num) allocate and default initialize an array
/// - ns1__RemittanceInformation21* soap_new_req_ns1__RemittanceInformation21(soap*, ...) allocate, set required members
/// - ns1__RemittanceInformation21* soap_new_set_ns1__RemittanceInformation21(soap*, ...) allocate, set all public members
/// - ns1__RemittanceInformation21::soap_default(soap*) default initialize members
/// - int soap_read_ns1__RemittanceInformation21(soap*, ns1__RemittanceInformation21*) deserialize from a stream
/// - int soap_write_ns1__RemittanceInformation21(soap*, ns1__RemittanceInformation21*) serialize to a stream
/// - ns1__RemittanceInformation21* ns1__RemittanceInformation21::soap_dup(soap*) returns deep copy of ns1__RemittanceInformation21, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__RemittanceInformation21::soap_del() deep deletes ns1__RemittanceInformation21 data members, use only after ns1__RemittanceInformation21::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__RemittanceInformation21::soap_type() returns SOAP_TYPE_ns1__RemittanceInformation21 or derived type identifier
class ns1__RemittanceInformation21
{ public:
/// Vector of ns1__Max140Text of length 0..unbounded.
    std::vector<ns1__Max140Text        > Ustrd                          0;	///< Multiple elements.
/// Vector of ns1__StructuredRemittanceInformation17* of length 0..unbounded.
    std::vector<ns1__StructuredRemittanceInformation17*> Strd                           0;	///< Multiple elements.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":RemittanceLocation7 is a complexType.
///
/// @note class ns1__RemittanceLocation7 operations:
/// - ns1__RemittanceLocation7* soap_new_ns1__RemittanceLocation7(soap*) allocate and default initialize
/// - ns1__RemittanceLocation7* soap_new_ns1__RemittanceLocation7(soap*, int num) allocate and default initialize an array
/// - ns1__RemittanceLocation7* soap_new_req_ns1__RemittanceLocation7(soap*, ...) allocate, set required members
/// - ns1__RemittanceLocation7* soap_new_set_ns1__RemittanceLocation7(soap*, ...) allocate, set all public members
/// - ns1__RemittanceLocation7::soap_default(soap*) default initialize members
/// - int soap_read_ns1__RemittanceLocation7(soap*, ns1__RemittanceLocation7*) deserialize from a stream
/// - int soap_write_ns1__RemittanceLocation7(soap*, ns1__RemittanceLocation7*) serialize to a stream
/// - ns1__RemittanceLocation7* ns1__RemittanceLocation7::soap_dup(soap*) returns deep copy of ns1__RemittanceLocation7, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__RemittanceLocation7::soap_del() deep deletes ns1__RemittanceLocation7 data members, use only after ns1__RemittanceLocation7::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__RemittanceLocation7::soap_type() returns SOAP_TYPE_ns1__RemittanceLocation7 or derived type identifier
class ns1__RemittanceLocation7
{ public:
/// Element "RmtId" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text*                      RmtId                          0;	///< Optional element.
/// Vector of ns1__RemittanceLocationData1* of length 0..unbounded.
    std::vector<ns1__RemittanceLocationData1*> RmtLctnDtls                    0;	///< Multiple elements.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":RemittanceLocationData1 is a complexType.
///
/// @note class ns1__RemittanceLocationData1 operations:
/// - ns1__RemittanceLocationData1* soap_new_ns1__RemittanceLocationData1(soap*) allocate and default initialize
/// - ns1__RemittanceLocationData1* soap_new_ns1__RemittanceLocationData1(soap*, int num) allocate and default initialize an array
/// - ns1__RemittanceLocationData1* soap_new_req_ns1__RemittanceLocationData1(soap*, ...) allocate, set required members
/// - ns1__RemittanceLocationData1* soap_new_set_ns1__RemittanceLocationData1(soap*, ...) allocate, set all public members
/// - ns1__RemittanceLocationData1::soap_default(soap*) default initialize members
/// - int soap_read_ns1__RemittanceLocationData1(soap*, ns1__RemittanceLocationData1*) deserialize from a stream
/// - int soap_write_ns1__RemittanceLocationData1(soap*, ns1__RemittanceLocationData1*) serialize to a stream
/// - ns1__RemittanceLocationData1* ns1__RemittanceLocationData1::soap_dup(soap*) returns deep copy of ns1__RemittanceLocationData1, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__RemittanceLocationData1::soap_del() deep deletes ns1__RemittanceLocationData1 data members, use only after ns1__RemittanceLocationData1::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__RemittanceLocationData1::soap_type() returns SOAP_TYPE_ns1__RemittanceLocationData1 or derived type identifier
class ns1__RemittanceLocationData1
{ public:
/// Element "Mtd" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":RemittanceLocationMethod2Code.
    enum ns1__RemittanceLocationMethod2Code  Mtd                            1;	///< Required element.
/// Element "ElctrncAdr" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max2048Text.
    ns1__Max2048Text*                    ElctrncAdr                     0;	///< Optional element.
/// Element "PstlAdr" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":NameAndAddress16.
    ns1__NameAndAddress16*               PstlAdr                        0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ServiceLevel8Choice is a complexType.
///
/// @note class ns1__ServiceLevel8Choice operations:
/// - ns1__ServiceLevel8Choice* soap_new_ns1__ServiceLevel8Choice(soap*) allocate and default initialize
/// - ns1__ServiceLevel8Choice* soap_new_ns1__ServiceLevel8Choice(soap*, int num) allocate and default initialize an array
/// - ns1__ServiceLevel8Choice* soap_new_req_ns1__ServiceLevel8Choice(soap*, ...) allocate, set required members
/// - ns1__ServiceLevel8Choice* soap_new_set_ns1__ServiceLevel8Choice(soap*, ...) allocate, set all public members
/// - ns1__ServiceLevel8Choice::soap_default(soap*) default initialize members
/// - int soap_read_ns1__ServiceLevel8Choice(soap*, ns1__ServiceLevel8Choice*) deserialize from a stream
/// - int soap_write_ns1__ServiceLevel8Choice(soap*, ns1__ServiceLevel8Choice*) serialize to a stream
/// - ns1__ServiceLevel8Choice* ns1__ServiceLevel8Choice::soap_dup(soap*) returns deep copy of ns1__ServiceLevel8Choice, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__ServiceLevel8Choice::soap_del() deep deletes ns1__ServiceLevel8Choice data members, use only after ns1__ServiceLevel8Choice::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__ServiceLevel8Choice::soap_type() returns SOAP_TYPE_ns1__ServiceLevel8Choice or derived type identifier
class ns1__ServiceLevel8Choice
{ public:
//  BEGIN CHOICE <xs:choice>
  $ int                                  __union_ServiceLevel8Choice   ;	///< Union _ns1__union_ServiceLevel8Choice selector: set to SOAP_UNION__ns1__union_ServiceLevel8Choice_<fieldname>
/// Union for choice in ns1__ServiceLevel8Choice.
    union _ns1__union_ServiceLevel8Choice
    {
/// Element "Cd" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ExternalServiceLevel1Code.
    ns1__ExternalServiceLevel1Code*      Cd                            ;	///< Choice of element (one of multiple choices).
/// Element "Prtry" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text*                      Prtry                         ;	///< Choice of element (one of multiple choices).
    }                                    union_ServiceLevel8Choice     ;
//  END OF CHOICE
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":StructuredRegulatoryReporting3 is a complexType.
///
/// @note class ns1__StructuredRegulatoryReporting3 operations:
/// - ns1__StructuredRegulatoryReporting3* soap_new_ns1__StructuredRegulatoryReporting3(soap*) allocate and default initialize
/// - ns1__StructuredRegulatoryReporting3* soap_new_ns1__StructuredRegulatoryReporting3(soap*, int num) allocate and default initialize an array
/// - ns1__StructuredRegulatoryReporting3* soap_new_req_ns1__StructuredRegulatoryReporting3(soap*, ...) allocate, set required members
/// - ns1__StructuredRegulatoryReporting3* soap_new_set_ns1__StructuredRegulatoryReporting3(soap*, ...) allocate, set all public members
/// - ns1__StructuredRegulatoryReporting3::soap_default(soap*) default initialize members
/// - int soap_read_ns1__StructuredRegulatoryReporting3(soap*, ns1__StructuredRegulatoryReporting3*) deserialize from a stream
/// - int soap_write_ns1__StructuredRegulatoryReporting3(soap*, ns1__StructuredRegulatoryReporting3*) serialize to a stream
/// - ns1__StructuredRegulatoryReporting3* ns1__StructuredRegulatoryReporting3::soap_dup(soap*) returns deep copy of ns1__StructuredRegulatoryReporting3, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__StructuredRegulatoryReporting3::soap_del() deep deletes ns1__StructuredRegulatoryReporting3 data members, use only after ns1__StructuredRegulatoryReporting3::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__StructuredRegulatoryReporting3::soap_type() returns SOAP_TYPE_ns1__StructuredRegulatoryReporting3 or derived type identifier
class ns1__StructuredRegulatoryReporting3
{ public:
/// Element "Tp" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text*                      Tp                             0;	///< Optional element.
/// Element "Dt" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ISODate.
    ns1__ISODate*                        Dt                             0;	///< Optional element.
/// Element "Ctry" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":CountryCode.
    ns1__CountryCode*                    Ctry                           0;	///< Optional element.
/// Element "Cd" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max10Text.
    ns1__Max10Text*                      Cd                             0;	///< Optional element.
/// Element "Amt" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ActiveOrHistoricCurrencyAndAmount.
    ns1__ActiveOrHistoricCurrencyAndAmount*  Amt                            0;	///< Optional element.
/// Vector of ns1__Max35Text of length 0..unbounded.
    std::vector<ns1__Max35Text         > Inf                            0;	///< Multiple elements.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":StructuredRemittanceInformation17 is a complexType.
///
/// @note class ns1__StructuredRemittanceInformation17 operations:
/// - ns1__StructuredRemittanceInformation17* soap_new_ns1__StructuredRemittanceInformation17(soap*) allocate and default initialize
/// - ns1__StructuredRemittanceInformation17* soap_new_ns1__StructuredRemittanceInformation17(soap*, int num) allocate and default initialize an array
/// - ns1__StructuredRemittanceInformation17* soap_new_req_ns1__StructuredRemittanceInformation17(soap*, ...) allocate, set required members
/// - ns1__StructuredRemittanceInformation17* soap_new_set_ns1__StructuredRemittanceInformation17(soap*, ...) allocate, set all public members
/// - ns1__StructuredRemittanceInformation17::soap_default(soap*) default initialize members
/// - int soap_read_ns1__StructuredRemittanceInformation17(soap*, ns1__StructuredRemittanceInformation17*) deserialize from a stream
/// - int soap_write_ns1__StructuredRemittanceInformation17(soap*, ns1__StructuredRemittanceInformation17*) serialize to a stream
/// - ns1__StructuredRemittanceInformation17* ns1__StructuredRemittanceInformation17::soap_dup(soap*) returns deep copy of ns1__StructuredRemittanceInformation17, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__StructuredRemittanceInformation17::soap_del() deep deletes ns1__StructuredRemittanceInformation17 data members, use only after ns1__StructuredRemittanceInformation17::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__StructuredRemittanceInformation17::soap_type() returns SOAP_TYPE_ns1__StructuredRemittanceInformation17 or derived type identifier
class ns1__StructuredRemittanceInformation17
{ public:
/// Vector of ns1__ReferredDocumentInformation7* of length 0..unbounded.
    std::vector<ns1__ReferredDocumentInformation7*> RfrdDocInf                     0;	///< Multiple elements.
/// Element "RfrdDocAmt" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":RemittanceAmount2.
    ns1__RemittanceAmount2*              RfrdDocAmt                     0;	///< Optional element.
/// Element "CdtrRefInf" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":CreditorReferenceInformation2.
    ns1__CreditorReferenceInformation2*  CdtrRefInf                     0;	///< Optional element.
/// Element "Invcr" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":PartyIdentification135.
    ns1__PartyIdentification135*         Invcr                          0;	///< Optional element.
/// Element "Invcee" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":PartyIdentification135.
    ns1__PartyIdentification135*         Invcee                         0;	///< Optional element.
/// Element "TaxRmt" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":TaxData1.
    ns1__TaxData1*                       TaxRmt                         0;	///< Optional element.
/// Element "GrnshmtRmt" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Garnishment3.
    ns1__Garnishment3*                   GrnshmtRmt                     0;	///< Optional element.
/// Vector of ns1__Max140Text of length 0..3.
    std::vector<ns1__Max140Text        > AddtlRmtInf                    0:3;	///< Multiple elements.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":SupplementaryData1 is a complexType.
///
/// @note class ns1__SupplementaryData1 operations:
/// - ns1__SupplementaryData1* soap_new_ns1__SupplementaryData1(soap*) allocate and default initialize
/// - ns1__SupplementaryData1* soap_new_ns1__SupplementaryData1(soap*, int num) allocate and default initialize an array
/// - ns1__SupplementaryData1* soap_new_req_ns1__SupplementaryData1(soap*, ...) allocate, set required members
/// - ns1__SupplementaryData1* soap_new_set_ns1__SupplementaryData1(soap*, ...) allocate, set all public members
/// - ns1__SupplementaryData1::soap_default(soap*) default initialize members
/// - int soap_read_ns1__SupplementaryData1(soap*, ns1__SupplementaryData1*) deserialize from a stream
/// - int soap_write_ns1__SupplementaryData1(soap*, ns1__SupplementaryData1*) serialize to a stream
/// - ns1__SupplementaryData1* ns1__SupplementaryData1::soap_dup(soap*) returns deep copy of ns1__SupplementaryData1, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__SupplementaryData1::soap_del() deep deletes ns1__SupplementaryData1 data members, use only after ns1__SupplementaryData1::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__SupplementaryData1::soap_type() returns SOAP_TYPE_ns1__SupplementaryData1 or derived type identifier
class ns1__SupplementaryData1
{ public:
/// Element "PlcAndNm" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max350Text.
    ns1__Max350Text*                     PlcAndNm                       0;	///< Optional element.
/// Element "Envlp" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":SupplementaryDataEnvelope1.
    ns1__SupplementaryDataEnvelope1*     Envlp                          1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":SupplementaryDataEnvelope1 is a complexType.
///
/// @note class ns1__SupplementaryDataEnvelope1 operations:
/// - ns1__SupplementaryDataEnvelope1* soap_new_ns1__SupplementaryDataEnvelope1(soap*) allocate and default initialize
/// - ns1__SupplementaryDataEnvelope1* soap_new_ns1__SupplementaryDataEnvelope1(soap*, int num) allocate and default initialize an array
/// - ns1__SupplementaryDataEnvelope1* soap_new_req_ns1__SupplementaryDataEnvelope1(soap*, ...) allocate, set required members
/// - ns1__SupplementaryDataEnvelope1* soap_new_set_ns1__SupplementaryDataEnvelope1(soap*, ...) allocate, set all public members
/// - ns1__SupplementaryDataEnvelope1::soap_default(soap*) default initialize members
/// - int soap_read_ns1__SupplementaryDataEnvelope1(soap*, ns1__SupplementaryDataEnvelope1*) deserialize from a stream
/// - int soap_write_ns1__SupplementaryDataEnvelope1(soap*, ns1__SupplementaryDataEnvelope1*) serialize to a stream
/// - ns1__SupplementaryDataEnvelope1* ns1__SupplementaryDataEnvelope1::soap_dup(soap*) returns deep copy of ns1__SupplementaryDataEnvelope1, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__SupplementaryDataEnvelope1::soap_del() deep deletes ns1__SupplementaryDataEnvelope1 data members, use only after ns1__SupplementaryDataEnvelope1::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__SupplementaryDataEnvelope1::soap_type() returns SOAP_TYPE_ns1__SupplementaryDataEnvelope1 or derived type identifier
class ns1__SupplementaryDataEnvelope1
{ public:
/// <any namespace="##any">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Store any element content in XML string.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":TaxAmount3 is a complexType.
///
/// @note class ns1__TaxAmount3 operations:
/// - ns1__TaxAmount3* soap_new_ns1__TaxAmount3(soap*) allocate and default initialize
/// - ns1__TaxAmount3* soap_new_ns1__TaxAmount3(soap*, int num) allocate and default initialize an array
/// - ns1__TaxAmount3* soap_new_req_ns1__TaxAmount3(soap*, ...) allocate, set required members
/// - ns1__TaxAmount3* soap_new_set_ns1__TaxAmount3(soap*, ...) allocate, set all public members
/// - ns1__TaxAmount3::soap_default(soap*) default initialize members
/// - int soap_read_ns1__TaxAmount3(soap*, ns1__TaxAmount3*) deserialize from a stream
/// - int soap_write_ns1__TaxAmount3(soap*, ns1__TaxAmount3*) serialize to a stream
/// - ns1__TaxAmount3* ns1__TaxAmount3::soap_dup(soap*) returns deep copy of ns1__TaxAmount3, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__TaxAmount3::soap_del() deep deletes ns1__TaxAmount3 data members, use only after ns1__TaxAmount3::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__TaxAmount3::soap_type() returns SOAP_TYPE_ns1__TaxAmount3 or derived type identifier
class ns1__TaxAmount3
{ public:
/// Element "Rate" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":PercentageRate.
    ns1__PercentageRate*                 Rate                           0;	///< Optional element.
/// Element "TaxblBaseAmt" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ActiveOrHistoricCurrencyAndAmount.
    ns1__ActiveOrHistoricCurrencyAndAmount*  TaxblBaseAmt                   0;	///< Optional element.
/// Element "TtlAmt" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ActiveOrHistoricCurrencyAndAmount.
    ns1__ActiveOrHistoricCurrencyAndAmount*  TtlAmt                         0;	///< Optional element.
/// Vector of ns1__TaxRecordDetails3* of length 0..unbounded.
    std::vector<ns1__TaxRecordDetails3*> Dtls                           0;	///< Multiple elements.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":TaxAmountAndType1 is a complexType.
///
/// @note class ns1__TaxAmountAndType1 operations:
/// - ns1__TaxAmountAndType1* soap_new_ns1__TaxAmountAndType1(soap*) allocate and default initialize
/// - ns1__TaxAmountAndType1* soap_new_ns1__TaxAmountAndType1(soap*, int num) allocate and default initialize an array
/// - ns1__TaxAmountAndType1* soap_new_req_ns1__TaxAmountAndType1(soap*, ...) allocate, set required members
/// - ns1__TaxAmountAndType1* soap_new_set_ns1__TaxAmountAndType1(soap*, ...) allocate, set all public members
/// - ns1__TaxAmountAndType1::soap_default(soap*) default initialize members
/// - int soap_read_ns1__TaxAmountAndType1(soap*, ns1__TaxAmountAndType1*) deserialize from a stream
/// - int soap_write_ns1__TaxAmountAndType1(soap*, ns1__TaxAmountAndType1*) serialize to a stream
/// - ns1__TaxAmountAndType1* ns1__TaxAmountAndType1::soap_dup(soap*) returns deep copy of ns1__TaxAmountAndType1, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__TaxAmountAndType1::soap_del() deep deletes ns1__TaxAmountAndType1 data members, use only after ns1__TaxAmountAndType1::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__TaxAmountAndType1::soap_type() returns SOAP_TYPE_ns1__TaxAmountAndType1 or derived type identifier
class ns1__TaxAmountAndType1
{ public:
/// Element "Tp" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":TaxAmountType1Choice.
    ns1__TaxAmountType1Choice*           Tp                             0;	///< Optional element.
/// Element "Amt" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ActiveOrHistoricCurrencyAndAmount.
    ns1__ActiveOrHistoricCurrencyAndAmount*  Amt                            1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":TaxAmountType1Choice is a complexType.
///
/// @note class ns1__TaxAmountType1Choice operations:
/// - ns1__TaxAmountType1Choice* soap_new_ns1__TaxAmountType1Choice(soap*) allocate and default initialize
/// - ns1__TaxAmountType1Choice* soap_new_ns1__TaxAmountType1Choice(soap*, int num) allocate and default initialize an array
/// - ns1__TaxAmountType1Choice* soap_new_req_ns1__TaxAmountType1Choice(soap*, ...) allocate, set required members
/// - ns1__TaxAmountType1Choice* soap_new_set_ns1__TaxAmountType1Choice(soap*, ...) allocate, set all public members
/// - ns1__TaxAmountType1Choice::soap_default(soap*) default initialize members
/// - int soap_read_ns1__TaxAmountType1Choice(soap*, ns1__TaxAmountType1Choice*) deserialize from a stream
/// - int soap_write_ns1__TaxAmountType1Choice(soap*, ns1__TaxAmountType1Choice*) serialize to a stream
/// - ns1__TaxAmountType1Choice* ns1__TaxAmountType1Choice::soap_dup(soap*) returns deep copy of ns1__TaxAmountType1Choice, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__TaxAmountType1Choice::soap_del() deep deletes ns1__TaxAmountType1Choice data members, use only after ns1__TaxAmountType1Choice::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__TaxAmountType1Choice::soap_type() returns SOAP_TYPE_ns1__TaxAmountType1Choice or derived type identifier
class ns1__TaxAmountType1Choice
{ public:
//  BEGIN CHOICE <xs:choice>
  $ int                                  __union_TaxAmountType1Choice  ;	///< Union _ns1__union_TaxAmountType1Choice selector: set to SOAP_UNION__ns1__union_TaxAmountType1Choice_<fieldname>
/// Union for choice in ns1__TaxAmountType1Choice.
    union _ns1__union_TaxAmountType1Choice
    {
/// Element "Cd" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ExternalTaxAmountType1Code.
    ns1__ExternalTaxAmountType1Code*     Cd                            ;	///< Choice of element (one of multiple choices).
/// Element "Prtry" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text*                      Prtry                         ;	///< Choice of element (one of multiple choices).
    }                                    union_TaxAmountType1Choice    ;
//  END OF CHOICE
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":TaxAuthorisation1 is a complexType.
///
/// @note class ns1__TaxAuthorisation1 operations:
/// - ns1__TaxAuthorisation1* soap_new_ns1__TaxAuthorisation1(soap*) allocate and default initialize
/// - ns1__TaxAuthorisation1* soap_new_ns1__TaxAuthorisation1(soap*, int num) allocate and default initialize an array
/// - ns1__TaxAuthorisation1* soap_new_req_ns1__TaxAuthorisation1(soap*, ...) allocate, set required members
/// - ns1__TaxAuthorisation1* soap_new_set_ns1__TaxAuthorisation1(soap*, ...) allocate, set all public members
/// - ns1__TaxAuthorisation1::soap_default(soap*) default initialize members
/// - int soap_read_ns1__TaxAuthorisation1(soap*, ns1__TaxAuthorisation1*) deserialize from a stream
/// - int soap_write_ns1__TaxAuthorisation1(soap*, ns1__TaxAuthorisation1*) serialize to a stream
/// - ns1__TaxAuthorisation1* ns1__TaxAuthorisation1::soap_dup(soap*) returns deep copy of ns1__TaxAuthorisation1, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__TaxAuthorisation1::soap_del() deep deletes ns1__TaxAuthorisation1 data members, use only after ns1__TaxAuthorisation1::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__TaxAuthorisation1::soap_type() returns SOAP_TYPE_ns1__TaxAuthorisation1 or derived type identifier
class ns1__TaxAuthorisation1
{ public:
/// Element "Titl" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text*                      Titl                           0;	///< Optional element.
/// Element "Nm" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max140Text.
    ns1__Max140Text*                     Nm                             0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":TaxData1 is a complexType.
///
/// @note class ns1__TaxData1 operations:
/// - ns1__TaxData1* soap_new_ns1__TaxData1(soap*) allocate and default initialize
/// - ns1__TaxData1* soap_new_ns1__TaxData1(soap*, int num) allocate and default initialize an array
/// - ns1__TaxData1* soap_new_req_ns1__TaxData1(soap*, ...) allocate, set required members
/// - ns1__TaxData1* soap_new_set_ns1__TaxData1(soap*, ...) allocate, set all public members
/// - ns1__TaxData1::soap_default(soap*) default initialize members
/// - int soap_read_ns1__TaxData1(soap*, ns1__TaxData1*) deserialize from a stream
/// - int soap_write_ns1__TaxData1(soap*, ns1__TaxData1*) serialize to a stream
/// - ns1__TaxData1* ns1__TaxData1::soap_dup(soap*) returns deep copy of ns1__TaxData1, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__TaxData1::soap_del() deep deletes ns1__TaxData1 data members, use only after ns1__TaxData1::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__TaxData1::soap_type() returns SOAP_TYPE_ns1__TaxData1 or derived type identifier
class ns1__TaxData1
{ public:
/// Element "Cdtr" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":TaxParty1.
    ns1__TaxParty1*                      Cdtr                           0;	///< Optional element.
/// Element "Dbtr" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":TaxParty2.
    ns1__TaxParty2*                      Dbtr                           0;	///< Optional element.
/// Element "UltmtDbtr" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":TaxParty2.
    ns1__TaxParty2*                      UltmtDbtr                      0;	///< Optional element.
/// Element "AdmstnZone" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text*                      AdmstnZone                     0;	///< Optional element.
/// Element "RefNb" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max140Text.
    ns1__Max140Text*                     RefNb                          0;	///< Optional element.
/// Element "Mtd" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text*                      Mtd                            0;	///< Optional element.
/// Element "TtlTaxblBaseAmt" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ActiveOrHistoricCurrencyAndAmount.
    ns1__ActiveOrHistoricCurrencyAndAmount*  TtlTaxblBaseAmt                0;	///< Optional element.
/// Element "TtlTaxAmt" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ActiveOrHistoricCurrencyAndAmount.
    ns1__ActiveOrHistoricCurrencyAndAmount*  TtlTaxAmt                      0;	///< Optional element.
/// Element "Dt" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ISODate.
    ns1__ISODate*                        Dt                             0;	///< Optional element.
/// Element "SeqNb" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Number.
    ns1__Number*                         SeqNb                          0;	///< Optional element.
/// Vector of ns1__TaxRecord3* of length 0..unbounded.
    std::vector<ns1__TaxRecord3*       > Rcrd                           0;	///< Multiple elements.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":TaxInformation10 is a complexType.
///
/// @note class ns1__TaxInformation10 operations:
/// - ns1__TaxInformation10* soap_new_ns1__TaxInformation10(soap*) allocate and default initialize
/// - ns1__TaxInformation10* soap_new_ns1__TaxInformation10(soap*, int num) allocate and default initialize an array
/// - ns1__TaxInformation10* soap_new_req_ns1__TaxInformation10(soap*, ...) allocate, set required members
/// - ns1__TaxInformation10* soap_new_set_ns1__TaxInformation10(soap*, ...) allocate, set all public members
/// - ns1__TaxInformation10::soap_default(soap*) default initialize members
/// - int soap_read_ns1__TaxInformation10(soap*, ns1__TaxInformation10*) deserialize from a stream
/// - int soap_write_ns1__TaxInformation10(soap*, ns1__TaxInformation10*) serialize to a stream
/// - ns1__TaxInformation10* ns1__TaxInformation10::soap_dup(soap*) returns deep copy of ns1__TaxInformation10, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__TaxInformation10::soap_del() deep deletes ns1__TaxInformation10 data members, use only after ns1__TaxInformation10::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__TaxInformation10::soap_type() returns SOAP_TYPE_ns1__TaxInformation10 or derived type identifier
class ns1__TaxInformation10
{ public:
/// Element "Cdtr" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":TaxParty1.
    ns1__TaxParty1*                      Cdtr                           0;	///< Optional element.
/// Element "Dbtr" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":TaxParty2.
    ns1__TaxParty2*                      Dbtr                           0;	///< Optional element.
/// Element "AdmstnZone" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text*                      AdmstnZone                     0;	///< Optional element.
/// Element "RefNb" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max140Text.
    ns1__Max140Text*                     RefNb                          0;	///< Optional element.
/// Element "Mtd" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text*                      Mtd                            0;	///< Optional element.
/// Element "TtlTaxblBaseAmt" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ActiveOrHistoricCurrencyAndAmount.
    ns1__ActiveOrHistoricCurrencyAndAmount*  TtlTaxblBaseAmt                0;	///< Optional element.
/// Element "TtlTaxAmt" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ActiveOrHistoricCurrencyAndAmount.
    ns1__ActiveOrHistoricCurrencyAndAmount*  TtlTaxAmt                      0;	///< Optional element.
/// Element "Dt" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ISODate.
    ns1__ISODate*                        Dt                             0;	///< Optional element.
/// Element "SeqNb" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Number.
    ns1__Number*                         SeqNb                          0;	///< Optional element.
/// Vector of ns1__TaxRecord3* of length 0..unbounded.
    std::vector<ns1__TaxRecord3*       > Rcrd                           0;	///< Multiple elements.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":TaxParty1 is a complexType.
///
/// @note class ns1__TaxParty1 operations:
/// - ns1__TaxParty1* soap_new_ns1__TaxParty1(soap*) allocate and default initialize
/// - ns1__TaxParty1* soap_new_ns1__TaxParty1(soap*, int num) allocate and default initialize an array
/// - ns1__TaxParty1* soap_new_req_ns1__TaxParty1(soap*, ...) allocate, set required members
/// - ns1__TaxParty1* soap_new_set_ns1__TaxParty1(soap*, ...) allocate, set all public members
/// - ns1__TaxParty1::soap_default(soap*) default initialize members
/// - int soap_read_ns1__TaxParty1(soap*, ns1__TaxParty1*) deserialize from a stream
/// - int soap_write_ns1__TaxParty1(soap*, ns1__TaxParty1*) serialize to a stream
/// - ns1__TaxParty1* ns1__TaxParty1::soap_dup(soap*) returns deep copy of ns1__TaxParty1, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__TaxParty1::soap_del() deep deletes ns1__TaxParty1 data members, use only after ns1__TaxParty1::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__TaxParty1::soap_type() returns SOAP_TYPE_ns1__TaxParty1 or derived type identifier
class ns1__TaxParty1
{ public:
/// Element "TaxId" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text*                      TaxId                          0;	///< Optional element.
/// Element "RegnId" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text*                      RegnId                         0;	///< Optional element.
/// Element "TaxTp" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text*                      TaxTp                          0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":TaxParty2 is a complexType.
///
/// @note class ns1__TaxParty2 operations:
/// - ns1__TaxParty2* soap_new_ns1__TaxParty2(soap*) allocate and default initialize
/// - ns1__TaxParty2* soap_new_ns1__TaxParty2(soap*, int num) allocate and default initialize an array
/// - ns1__TaxParty2* soap_new_req_ns1__TaxParty2(soap*, ...) allocate, set required members
/// - ns1__TaxParty2* soap_new_set_ns1__TaxParty2(soap*, ...) allocate, set all public members
/// - ns1__TaxParty2::soap_default(soap*) default initialize members
/// - int soap_read_ns1__TaxParty2(soap*, ns1__TaxParty2*) deserialize from a stream
/// - int soap_write_ns1__TaxParty2(soap*, ns1__TaxParty2*) serialize to a stream
/// - ns1__TaxParty2* ns1__TaxParty2::soap_dup(soap*) returns deep copy of ns1__TaxParty2, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__TaxParty2::soap_del() deep deletes ns1__TaxParty2 data members, use only after ns1__TaxParty2::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__TaxParty2::soap_type() returns SOAP_TYPE_ns1__TaxParty2 or derived type identifier
class ns1__TaxParty2
{ public:
/// Element "TaxId" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text*                      TaxId                          0;	///< Optional element.
/// Element "RegnId" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text*                      RegnId                         0;	///< Optional element.
/// Element "TaxTp" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text*                      TaxTp                          0;	///< Optional element.
/// Element "Authstn" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":TaxAuthorisation1.
    ns1__TaxAuthorisation1*              Authstn                        0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":TaxPeriod3 is a complexType.
///
/// @note class ns1__TaxPeriod3 operations:
/// - ns1__TaxPeriod3* soap_new_ns1__TaxPeriod3(soap*) allocate and default initialize
/// - ns1__TaxPeriod3* soap_new_ns1__TaxPeriod3(soap*, int num) allocate and default initialize an array
/// - ns1__TaxPeriod3* soap_new_req_ns1__TaxPeriod3(soap*, ...) allocate, set required members
/// - ns1__TaxPeriod3* soap_new_set_ns1__TaxPeriod3(soap*, ...) allocate, set all public members
/// - ns1__TaxPeriod3::soap_default(soap*) default initialize members
/// - int soap_read_ns1__TaxPeriod3(soap*, ns1__TaxPeriod3*) deserialize from a stream
/// - int soap_write_ns1__TaxPeriod3(soap*, ns1__TaxPeriod3*) serialize to a stream
/// - ns1__TaxPeriod3* ns1__TaxPeriod3::soap_dup(soap*) returns deep copy of ns1__TaxPeriod3, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__TaxPeriod3::soap_del() deep deletes ns1__TaxPeriod3 data members, use only after ns1__TaxPeriod3::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__TaxPeriod3::soap_type() returns SOAP_TYPE_ns1__TaxPeriod3 or derived type identifier
class ns1__TaxPeriod3
{ public:
/// Element "Yr" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ISOYear.
    ns1__ISOYear*                        Yr                             0;	///< Optional element.
/// Element "Tp" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":TaxRecordPeriod1Code.
    enum ns1__TaxRecordPeriod1Code*      Tp                             0;	///< Optional element.
/// Element "FrToDt" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":DatePeriod2.
    ns1__DatePeriod2*                    FrToDt                         0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":TaxRecord3 is a complexType.
///
/// @note class ns1__TaxRecord3 operations:
/// - ns1__TaxRecord3* soap_new_ns1__TaxRecord3(soap*) allocate and default initialize
/// - ns1__TaxRecord3* soap_new_ns1__TaxRecord3(soap*, int num) allocate and default initialize an array
/// - ns1__TaxRecord3* soap_new_req_ns1__TaxRecord3(soap*, ...) allocate, set required members
/// - ns1__TaxRecord3* soap_new_set_ns1__TaxRecord3(soap*, ...) allocate, set all public members
/// - ns1__TaxRecord3::soap_default(soap*) default initialize members
/// - int soap_read_ns1__TaxRecord3(soap*, ns1__TaxRecord3*) deserialize from a stream
/// - int soap_write_ns1__TaxRecord3(soap*, ns1__TaxRecord3*) serialize to a stream
/// - ns1__TaxRecord3* ns1__TaxRecord3::soap_dup(soap*) returns deep copy of ns1__TaxRecord3, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__TaxRecord3::soap_del() deep deletes ns1__TaxRecord3 data members, use only after ns1__TaxRecord3::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__TaxRecord3::soap_type() returns SOAP_TYPE_ns1__TaxRecord3 or derived type identifier
class ns1__TaxRecord3
{ public:
/// Element "Tp" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text*                      Tp                             0;	///< Optional element.
/// Element "Ctgy" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text*                      Ctgy                           0;	///< Optional element.
/// Element "CtgyDtls" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text*                      CtgyDtls                       0;	///< Optional element.
/// Element "DbtrSts" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text*                      DbtrSts                        0;	///< Optional element.
/// Element "CertId" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text*                      CertId                         0;	///< Optional element.
/// Element "FrmsCd" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max35Text.
    ns1__Max35Text*                      FrmsCd                         0;	///< Optional element.
/// Element "Prd" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":TaxPeriod3.
    ns1__TaxPeriod3*                     Prd                            0;	///< Optional element.
/// Element "TaxAmt" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":TaxAmount3.
    ns1__TaxAmount3*                     TaxAmt                         0;	///< Optional element.
/// Element "AddtlInf" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Max140Text.
    ns1__Max140Text*                     AddtlInf                       0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":TaxRecordDetails3 is a complexType.
///
/// @note class ns1__TaxRecordDetails3 operations:
/// - ns1__TaxRecordDetails3* soap_new_ns1__TaxRecordDetails3(soap*) allocate and default initialize
/// - ns1__TaxRecordDetails3* soap_new_ns1__TaxRecordDetails3(soap*, int num) allocate and default initialize an array
/// - ns1__TaxRecordDetails3* soap_new_req_ns1__TaxRecordDetails3(soap*, ...) allocate, set required members
/// - ns1__TaxRecordDetails3* soap_new_set_ns1__TaxRecordDetails3(soap*, ...) allocate, set all public members
/// - ns1__TaxRecordDetails3::soap_default(soap*) default initialize members
/// - int soap_read_ns1__TaxRecordDetails3(soap*, ns1__TaxRecordDetails3*) deserialize from a stream
/// - int soap_write_ns1__TaxRecordDetails3(soap*, ns1__TaxRecordDetails3*) serialize to a stream
/// - ns1__TaxRecordDetails3* ns1__TaxRecordDetails3::soap_dup(soap*) returns deep copy of ns1__TaxRecordDetails3, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__TaxRecordDetails3::soap_del() deep deletes ns1__TaxRecordDetails3 data members, use only after ns1__TaxRecordDetails3::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__TaxRecordDetails3::soap_type() returns SOAP_TYPE_ns1__TaxRecordDetails3 or derived type identifier
class ns1__TaxRecordDetails3
{ public:
/// Element "Prd" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":TaxPeriod3.
    ns1__TaxPeriod3*                     Prd                            0;	///< Optional element.
/// Element "Amt" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ActiveOrHistoricCurrencyAndAmount.
    ns1__ActiveOrHistoricCurrencyAndAmount*  Amt                            1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ActiveOrHistoricCurrencyAndAmount is a complexType with simpleContent extension of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ActiveOrHistoricCurrencyAndAmount_SimpleType.
///
/// @note class ns1__ActiveOrHistoricCurrencyAndAmount operations:
/// - ns1__ActiveOrHistoricCurrencyAndAmount* soap_new_ns1__ActiveOrHistoricCurrencyAndAmount(soap*) allocate and default initialize
/// - ns1__ActiveOrHistoricCurrencyAndAmount* soap_new_ns1__ActiveOrHistoricCurrencyAndAmount(soap*, int num) allocate and default initialize an array
/// - ns1__ActiveOrHistoricCurrencyAndAmount* soap_new_req_ns1__ActiveOrHistoricCurrencyAndAmount(soap*, ...) allocate, set required members
/// - ns1__ActiveOrHistoricCurrencyAndAmount* soap_new_set_ns1__ActiveOrHistoricCurrencyAndAmount(soap*, ...) allocate, set all public members
/// - ns1__ActiveOrHistoricCurrencyAndAmount::soap_default(soap*) default initialize members
/// - int soap_read_ns1__ActiveOrHistoricCurrencyAndAmount(soap*, ns1__ActiveOrHistoricCurrencyAndAmount*) deserialize from a stream
/// - int soap_write_ns1__ActiveOrHistoricCurrencyAndAmount(soap*, ns1__ActiveOrHistoricCurrencyAndAmount*) serialize to a stream
/// - ns1__ActiveOrHistoricCurrencyAndAmount* ns1__ActiveOrHistoricCurrencyAndAmount::soap_dup(soap*) returns deep copy of ns1__ActiveOrHistoricCurrencyAndAmount, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__ActiveOrHistoricCurrencyAndAmount::soap_del() deep deletes ns1__ActiveOrHistoricCurrencyAndAmount data members, use only after ns1__ActiveOrHistoricCurrencyAndAmount::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__ActiveOrHistoricCurrencyAndAmount::soap_type() returns SOAP_TYPE_ns1__ActiveOrHistoricCurrencyAndAmount or derived type identifier
class ns1__ActiveOrHistoricCurrencyAndAmount
{ public:
/// __item wraps simpleContent of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ActiveOrHistoricCurrencyAndAmount_SimpleType.
    ns1__ActiveOrHistoricCurrencyAndAmount_USCORESimpleType  __item                        ;
/// Attribute "Ccy" of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":ActiveOrHistoricCurrencyCode.
  @ ns1__ActiveOrHistoricCurrencyCode    Ccy                            1;	///< Required attribute.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   urn:iso:std:iso:20022:tech:xsd:pain.001.001.11                           *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Document of type "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11":Document.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   urn:iso:std:iso:20022:tech:xsd:pain.001.001.11                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/** @page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings that are contractually bound by WSDLs and
are auto-generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data
bindings are adopted from XML schemas as part of the WSDL types section or when
running wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

@note The following readers and writers are C/C++ data type (de)serializers
auto-generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

@note Data can be read and deserialized from:
  - an int file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = (int)...
  - a C++ stream (istream, stringstream), using soap->is = (istream*)...
  - a C string, using soap->is = (const char*)...
  - any input, using the soap->frecv() callback

@note Data can be serialized and written to:
  - an int file descriptor, using soap->sendfd = (int)...
  - a socket, using soap->socket = (int)...
  - a C++ stream (ostream, stringstream), using soap->os = (ostream*)...
  - a C string, using soap->os = (const char**)...
  - any output, using the soap->fsend() callback

@note The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_set_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_set_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


*/

/**

@section ns1 Top-level root elements of schema "urn:iso:std:iso:20022:tech:xsd:pain.001.001.11"

  - <ns1:Document> (use wsdl2h option -g to auto-generate type _ns1__Document)

*/

/* End of pain.001.001.11.h */
