/* soapH.h
   Generated by gSOAP 2.8.117 for pain.h

gSOAP XML Web services tools
Copyright (C) 2000-2021, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap*, const char*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap*, const void*, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap *soap, struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED

inline void soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_byte(struct soap *soap, const char *URL, char *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_byte(struct soap *soap, char *p)
{
	if (::soap_read_byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED

inline void soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_int(struct soap *soap, const char *URL, int *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_int(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_int(struct soap *soap, int *p)
{
	if (::soap_read_int(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_unsignedByte_DEFINED
#define SOAP_TYPE_unsignedByte_DEFINED

inline void soap_default_unsignedByte(struct soap *soap, unsigned char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedByte
	*a = SOAP_DEFAULT_unsignedByte;
#else
	*a = (unsigned char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap*, const char*, int, const unsigned char *, const char*);
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap*, const char*, unsigned char *, const char*);

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_new_unsignedByte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap*, const unsigned char *, const char*, const char*);

inline int soap_write_unsignedByte(struct soap *soap, unsigned char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_unsignedByte(struct soap *soap, const char *URL, unsigned char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_unsignedByte(struct soap *soap, const char *URL, unsigned char const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_unsignedByte(struct soap *soap, const char *URL, unsigned char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap*, unsigned char *, const char*, const char*);

inline int soap_read_unsignedByte(struct soap *soap, unsigned char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_unsignedByte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_unsignedByte(struct soap *soap, const char *URL, unsigned char *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_unsignedByte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_unsignedByte(struct soap *soap, unsigned char *p)
{
	if (::soap_read_unsignedByte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_unsignedInt_DEFINED
#define SOAP_TYPE_unsignedInt_DEFINED

inline void soap_default_unsignedInt(struct soap *soap, unsigned int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedInt
	*a = SOAP_DEFAULT_unsignedInt;
#else
	*a = (unsigned int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap*, const char*, int, const unsigned int *, const char*);
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap*, const char*, unsigned int *, const char*);

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_new_unsignedInt(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap*, const unsigned int *, const char*, const char*);

inline int soap_write_unsignedInt(struct soap *soap, unsigned int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_unsignedInt(struct soap *soap, const char *URL, unsigned int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_unsignedInt(struct soap *soap, const char *URL, unsigned int const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_unsignedInt(struct soap *soap, const char *URL, unsigned int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap*, unsigned int *, const char*, const char*);

inline int soap_read_unsignedInt(struct soap *soap, unsigned int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_unsignedInt(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_unsignedInt(struct soap *soap, const char *URL, unsigned int *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_unsignedInt(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_unsignedInt(struct soap *soap, unsigned int *p)
{
	if (::soap_read_unsignedInt(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__ISODateTime_DEFINED
#define SOAP_TYPE_ns1__ISODateTime_DEFINED

inline void soap_default_ns1__ISODateTime(struct soap *soap, time_t *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns1__ISODateTime
	*a = SOAP_DEFAULT_ns1__ISODateTime;
#else
	*a = (time_t)0;
#endif
}

#define soap_ns1__ISODateTime2s soap_dateTime2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ISODateTime(struct soap*, const char*, int, const time_t *, const char*);

#define soap_s2ns1__ISODateTime soap_s2dateTime

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_ns1__ISODateTime(struct soap*, const char*, time_t *, const char*);

#define soap_instantiate_ns1__ISODateTime soap_instantiate_dateTime


#define soap_new_ns1__ISODateTime soap_new_dateTime

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__ISODateTime(struct soap*, const time_t *, const char*, const char*);

inline int soap_write_ns1__ISODateTime(struct soap *soap, time_t const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__ISODateTime(soap, p, "ns1:ISODateTime", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__ISODateTime(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ISODateTime(soap, p, "ns1:ISODateTime", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ISODateTime(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ISODateTime(soap, p, "ns1:ISODateTime", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ISODateTime(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ISODateTime(soap, p, "ns1:ISODateTime", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_ns1__ISODateTime(struct soap*, time_t *, const char*, const char*);

inline int soap_read_ns1__ISODateTime(struct soap *soap, time_t *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__ISODateTime(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ISODateTime(struct soap *soap, const char *URL, time_t *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ISODateTime(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__ISODateTime(struct soap *soap, time_t *p)
{
	if (::soap_read_ns1__ISODateTime(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_dateTime_DEFINED
#define SOAP_TYPE_dateTime_DEFINED

inline void soap_default_dateTime(struct soap *soap, time_t *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_dateTime
	*a = SOAP_DEFAULT_dateTime;
#else
	*a = (time_t)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_dateTime(struct soap*, const char*, int, const time_t *, const char*);
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_dateTime(struct soap*, const char*, time_t *, const char*);

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_new_dateTime(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_dateTime(struct soap*, const time_t *, const char*, const char*);

inline int soap_write_dateTime(struct soap *soap, time_t const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_dateTime(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_dateTime(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_dateTime(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_dateTime(struct soap*, time_t *, const char*, const char*);

inline int soap_read_dateTime(struct soap *soap, time_t *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_dateTime(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_dateTime(struct soap *soap, const char *URL, time_t *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_dateTime(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_dateTime(struct soap *soap, time_t *p)
{
	if (::soap_read_dateTime(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__TrueFalseIndicator_DEFINED
#define SOAP_TYPE_ns1__TrueFalseIndicator_DEFINED

inline void soap_default_ns1__TrueFalseIndicator(struct soap *soap, bool *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns1__TrueFalseIndicator
	*a = SOAP_DEFAULT_ns1__TrueFalseIndicator;
#else
	*a = (bool)0;
#endif
}

#define soap_ns1__TrueFalseIndicator2s soap_bool2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__TrueFalseIndicator(struct soap*, const char*, int, const bool *, const char*);

#define soap_s2ns1__TrueFalseIndicator soap_s2bool

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_ns1__TrueFalseIndicator(struct soap*, const char*, bool *, const char*);

#define soap_instantiate_ns1__TrueFalseIndicator soap_instantiate_bool


#define soap_new_ns1__TrueFalseIndicator soap_new_bool

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__TrueFalseIndicator(struct soap*, const bool *, const char*, const char*);

inline int soap_write_ns1__TrueFalseIndicator(struct soap *soap, bool const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__TrueFalseIndicator(soap, p, "ns1:TrueFalseIndicator", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__TrueFalseIndicator(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__TrueFalseIndicator(soap, p, "ns1:TrueFalseIndicator", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__TrueFalseIndicator(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__TrueFalseIndicator(soap, p, "ns1:TrueFalseIndicator", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__TrueFalseIndicator(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__TrueFalseIndicator(soap, p, "ns1:TrueFalseIndicator", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_ns1__TrueFalseIndicator(struct soap*, bool *, const char*, const char*);

inline int soap_read_ns1__TrueFalseIndicator(struct soap *soap, bool *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__TrueFalseIndicator(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__TrueFalseIndicator(struct soap *soap, const char *URL, bool *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__TrueFalseIndicator(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__TrueFalseIndicator(struct soap *soap, bool *p)
{
	if (::soap_read_ns1__TrueFalseIndicator(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__TaxRecordPeriod1Code_DEFINED
#define SOAP_TYPE_ns1__TaxRecordPeriod1Code_DEFINED

inline void soap_default_ns1__TaxRecordPeriod1Code(struct soap *soap, enum ns1__TaxRecordPeriod1Code *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns1__TaxRecordPeriod1Code
	*a = SOAP_DEFAULT_ns1__TaxRecordPeriod1Code;
#else
	*a = (enum ns1__TaxRecordPeriod1Code)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__TaxRecordPeriod1Code(struct soap*, const char*, int, const enum ns1__TaxRecordPeriod1Code *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__TaxRecordPeriod1Code2s(struct soap*, enum ns1__TaxRecordPeriod1Code);
SOAP_FMAC3 enum ns1__TaxRecordPeriod1Code * SOAP_FMAC4 soap_in_ns1__TaxRecordPeriod1Code(struct soap*, const char*, enum ns1__TaxRecordPeriod1Code *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__TaxRecordPeriod1Code(struct soap*, const char*, enum ns1__TaxRecordPeriod1Code *);

SOAP_FMAC3 enum ns1__TaxRecordPeriod1Code * SOAP_FMAC4 soap_new_ns1__TaxRecordPeriod1Code(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__TaxRecordPeriod1Code(struct soap*, const enum ns1__TaxRecordPeriod1Code *, const char*, const char*);

inline int soap_write_ns1__TaxRecordPeriod1Code(struct soap *soap, enum ns1__TaxRecordPeriod1Code const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__TaxRecordPeriod1Code(soap, p, "ns1:TaxRecordPeriod1Code", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__TaxRecordPeriod1Code(struct soap *soap, const char *URL, enum ns1__TaxRecordPeriod1Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__TaxRecordPeriod1Code(soap, p, "ns1:TaxRecordPeriod1Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__TaxRecordPeriod1Code(struct soap *soap, const char *URL, enum ns1__TaxRecordPeriod1Code const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__TaxRecordPeriod1Code(soap, p, "ns1:TaxRecordPeriod1Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__TaxRecordPeriod1Code(struct soap *soap, const char *URL, enum ns1__TaxRecordPeriod1Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__TaxRecordPeriod1Code(soap, p, "ns1:TaxRecordPeriod1Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns1__TaxRecordPeriod1Code * SOAP_FMAC4 soap_get_ns1__TaxRecordPeriod1Code(struct soap*, enum ns1__TaxRecordPeriod1Code *, const char*, const char*);

inline int soap_read_ns1__TaxRecordPeriod1Code(struct soap *soap, enum ns1__TaxRecordPeriod1Code *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__TaxRecordPeriod1Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__TaxRecordPeriod1Code(struct soap *soap, const char *URL, enum ns1__TaxRecordPeriod1Code *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__TaxRecordPeriod1Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__TaxRecordPeriod1Code(struct soap *soap, enum ns1__TaxRecordPeriod1Code *p)
{
	if (::soap_read_ns1__TaxRecordPeriod1Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__RemittanceLocationMethod2Code_DEFINED
#define SOAP_TYPE_ns1__RemittanceLocationMethod2Code_DEFINED

inline void soap_default_ns1__RemittanceLocationMethod2Code(struct soap *soap, enum ns1__RemittanceLocationMethod2Code *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns1__RemittanceLocationMethod2Code
	*a = SOAP_DEFAULT_ns1__RemittanceLocationMethod2Code;
#else
	*a = (enum ns1__RemittanceLocationMethod2Code)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RemittanceLocationMethod2Code(struct soap*, const char*, int, const enum ns1__RemittanceLocationMethod2Code *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__RemittanceLocationMethod2Code2s(struct soap*, enum ns1__RemittanceLocationMethod2Code);
SOAP_FMAC3 enum ns1__RemittanceLocationMethod2Code * SOAP_FMAC4 soap_in_ns1__RemittanceLocationMethod2Code(struct soap*, const char*, enum ns1__RemittanceLocationMethod2Code *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__RemittanceLocationMethod2Code(struct soap*, const char*, enum ns1__RemittanceLocationMethod2Code *);

SOAP_FMAC3 enum ns1__RemittanceLocationMethod2Code * SOAP_FMAC4 soap_new_ns1__RemittanceLocationMethod2Code(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__RemittanceLocationMethod2Code(struct soap*, const enum ns1__RemittanceLocationMethod2Code *, const char*, const char*);

inline int soap_write_ns1__RemittanceLocationMethod2Code(struct soap *soap, enum ns1__RemittanceLocationMethod2Code const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__RemittanceLocationMethod2Code(soap, p, "ns1:RemittanceLocationMethod2Code", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__RemittanceLocationMethod2Code(struct soap *soap, const char *URL, enum ns1__RemittanceLocationMethod2Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__RemittanceLocationMethod2Code(soap, p, "ns1:RemittanceLocationMethod2Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__RemittanceLocationMethod2Code(struct soap *soap, const char *URL, enum ns1__RemittanceLocationMethod2Code const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__RemittanceLocationMethod2Code(soap, p, "ns1:RemittanceLocationMethod2Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__RemittanceLocationMethod2Code(struct soap *soap, const char *URL, enum ns1__RemittanceLocationMethod2Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__RemittanceLocationMethod2Code(soap, p, "ns1:RemittanceLocationMethod2Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns1__RemittanceLocationMethod2Code * SOAP_FMAC4 soap_get_ns1__RemittanceLocationMethod2Code(struct soap*, enum ns1__RemittanceLocationMethod2Code *, const char*, const char*);

inline int soap_read_ns1__RemittanceLocationMethod2Code(struct soap *soap, enum ns1__RemittanceLocationMethod2Code *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__RemittanceLocationMethod2Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__RemittanceLocationMethod2Code(struct soap *soap, const char *URL, enum ns1__RemittanceLocationMethod2Code *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__RemittanceLocationMethod2Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__RemittanceLocationMethod2Code(struct soap *soap, enum ns1__RemittanceLocationMethod2Code *p)
{
	if (::soap_read_ns1__RemittanceLocationMethod2Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__RegulatoryReportingType1Code_DEFINED
#define SOAP_TYPE_ns1__RegulatoryReportingType1Code_DEFINED

inline void soap_default_ns1__RegulatoryReportingType1Code(struct soap *soap, enum ns1__RegulatoryReportingType1Code *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns1__RegulatoryReportingType1Code
	*a = SOAP_DEFAULT_ns1__RegulatoryReportingType1Code;
#else
	*a = (enum ns1__RegulatoryReportingType1Code)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RegulatoryReportingType1Code(struct soap*, const char*, int, const enum ns1__RegulatoryReportingType1Code *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__RegulatoryReportingType1Code2s(struct soap*, enum ns1__RegulatoryReportingType1Code);
SOAP_FMAC3 enum ns1__RegulatoryReportingType1Code * SOAP_FMAC4 soap_in_ns1__RegulatoryReportingType1Code(struct soap*, const char*, enum ns1__RegulatoryReportingType1Code *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__RegulatoryReportingType1Code(struct soap*, const char*, enum ns1__RegulatoryReportingType1Code *);

SOAP_FMAC3 enum ns1__RegulatoryReportingType1Code * SOAP_FMAC4 soap_new_ns1__RegulatoryReportingType1Code(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__RegulatoryReportingType1Code(struct soap*, const enum ns1__RegulatoryReportingType1Code *, const char*, const char*);

inline int soap_write_ns1__RegulatoryReportingType1Code(struct soap *soap, enum ns1__RegulatoryReportingType1Code const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__RegulatoryReportingType1Code(soap, p, "ns1:RegulatoryReportingType1Code", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__RegulatoryReportingType1Code(struct soap *soap, const char *URL, enum ns1__RegulatoryReportingType1Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__RegulatoryReportingType1Code(soap, p, "ns1:RegulatoryReportingType1Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__RegulatoryReportingType1Code(struct soap *soap, const char *URL, enum ns1__RegulatoryReportingType1Code const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__RegulatoryReportingType1Code(soap, p, "ns1:RegulatoryReportingType1Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__RegulatoryReportingType1Code(struct soap *soap, const char *URL, enum ns1__RegulatoryReportingType1Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__RegulatoryReportingType1Code(soap, p, "ns1:RegulatoryReportingType1Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns1__RegulatoryReportingType1Code * SOAP_FMAC4 soap_get_ns1__RegulatoryReportingType1Code(struct soap*, enum ns1__RegulatoryReportingType1Code *, const char*, const char*);

inline int soap_read_ns1__RegulatoryReportingType1Code(struct soap *soap, enum ns1__RegulatoryReportingType1Code *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__RegulatoryReportingType1Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__RegulatoryReportingType1Code(struct soap *soap, const char *URL, enum ns1__RegulatoryReportingType1Code *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__RegulatoryReportingType1Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__RegulatoryReportingType1Code(struct soap *soap, enum ns1__RegulatoryReportingType1Code *p)
{
	if (::soap_read_ns1__RegulatoryReportingType1Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__Priority2Code_DEFINED
#define SOAP_TYPE_ns1__Priority2Code_DEFINED

inline void soap_default_ns1__Priority2Code(struct soap *soap, enum ns1__Priority2Code *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns1__Priority2Code
	*a = SOAP_DEFAULT_ns1__Priority2Code;
#else
	*a = (enum ns1__Priority2Code)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Priority2Code(struct soap*, const char*, int, const enum ns1__Priority2Code *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__Priority2Code2s(struct soap*, enum ns1__Priority2Code);
SOAP_FMAC3 enum ns1__Priority2Code * SOAP_FMAC4 soap_in_ns1__Priority2Code(struct soap*, const char*, enum ns1__Priority2Code *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__Priority2Code(struct soap*, const char*, enum ns1__Priority2Code *);

SOAP_FMAC3 enum ns1__Priority2Code * SOAP_FMAC4 soap_new_ns1__Priority2Code(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__Priority2Code(struct soap*, const enum ns1__Priority2Code *, const char*, const char*);

inline int soap_write_ns1__Priority2Code(struct soap *soap, enum ns1__Priority2Code const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__Priority2Code(soap, p, "ns1:Priority2Code", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__Priority2Code(struct soap *soap, const char *URL, enum ns1__Priority2Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__Priority2Code(soap, p, "ns1:Priority2Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__Priority2Code(struct soap *soap, const char *URL, enum ns1__Priority2Code const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__Priority2Code(soap, p, "ns1:Priority2Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__Priority2Code(struct soap *soap, const char *URL, enum ns1__Priority2Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__Priority2Code(soap, p, "ns1:Priority2Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns1__Priority2Code * SOAP_FMAC4 soap_get_ns1__Priority2Code(struct soap*, enum ns1__Priority2Code *, const char*, const char*);

inline int soap_read_ns1__Priority2Code(struct soap *soap, enum ns1__Priority2Code *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__Priority2Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__Priority2Code(struct soap *soap, const char *URL, enum ns1__Priority2Code *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__Priority2Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__Priority2Code(struct soap *soap, enum ns1__Priority2Code *p)
{
	if (::soap_read_ns1__Priority2Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__PreferredContactMethod1Code_DEFINED
#define SOAP_TYPE_ns1__PreferredContactMethod1Code_DEFINED

inline void soap_default_ns1__PreferredContactMethod1Code(struct soap *soap, enum ns1__PreferredContactMethod1Code *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns1__PreferredContactMethod1Code
	*a = SOAP_DEFAULT_ns1__PreferredContactMethod1Code;
#else
	*a = (enum ns1__PreferredContactMethod1Code)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__PreferredContactMethod1Code(struct soap*, const char*, int, const enum ns1__PreferredContactMethod1Code *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__PreferredContactMethod1Code2s(struct soap*, enum ns1__PreferredContactMethod1Code);
SOAP_FMAC3 enum ns1__PreferredContactMethod1Code * SOAP_FMAC4 soap_in_ns1__PreferredContactMethod1Code(struct soap*, const char*, enum ns1__PreferredContactMethod1Code *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__PreferredContactMethod1Code(struct soap*, const char*, enum ns1__PreferredContactMethod1Code *);

SOAP_FMAC3 enum ns1__PreferredContactMethod1Code * SOAP_FMAC4 soap_new_ns1__PreferredContactMethod1Code(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__PreferredContactMethod1Code(struct soap*, const enum ns1__PreferredContactMethod1Code *, const char*, const char*);

inline int soap_write_ns1__PreferredContactMethod1Code(struct soap *soap, enum ns1__PreferredContactMethod1Code const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__PreferredContactMethod1Code(soap, p, "ns1:PreferredContactMethod1Code", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__PreferredContactMethod1Code(struct soap *soap, const char *URL, enum ns1__PreferredContactMethod1Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__PreferredContactMethod1Code(soap, p, "ns1:PreferredContactMethod1Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__PreferredContactMethod1Code(struct soap *soap, const char *URL, enum ns1__PreferredContactMethod1Code const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__PreferredContactMethod1Code(soap, p, "ns1:PreferredContactMethod1Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__PreferredContactMethod1Code(struct soap *soap, const char *URL, enum ns1__PreferredContactMethod1Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__PreferredContactMethod1Code(soap, p, "ns1:PreferredContactMethod1Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns1__PreferredContactMethod1Code * SOAP_FMAC4 soap_get_ns1__PreferredContactMethod1Code(struct soap*, enum ns1__PreferredContactMethod1Code *, const char*, const char*);

inline int soap_read_ns1__PreferredContactMethod1Code(struct soap *soap, enum ns1__PreferredContactMethod1Code *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__PreferredContactMethod1Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__PreferredContactMethod1Code(struct soap *soap, const char *URL, enum ns1__PreferredContactMethod1Code *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__PreferredContactMethod1Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__PreferredContactMethod1Code(struct soap *soap, enum ns1__PreferredContactMethod1Code *p)
{
	if (::soap_read_ns1__PreferredContactMethod1Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__PaymentMethod3Code_DEFINED
#define SOAP_TYPE_ns1__PaymentMethod3Code_DEFINED

inline void soap_default_ns1__PaymentMethod3Code(struct soap *soap, enum ns1__PaymentMethod3Code *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns1__PaymentMethod3Code
	*a = SOAP_DEFAULT_ns1__PaymentMethod3Code;
#else
	*a = (enum ns1__PaymentMethod3Code)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__PaymentMethod3Code(struct soap*, const char*, int, const enum ns1__PaymentMethod3Code *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__PaymentMethod3Code2s(struct soap*, enum ns1__PaymentMethod3Code);
SOAP_FMAC3 enum ns1__PaymentMethod3Code * SOAP_FMAC4 soap_in_ns1__PaymentMethod3Code(struct soap*, const char*, enum ns1__PaymentMethod3Code *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__PaymentMethod3Code(struct soap*, const char*, enum ns1__PaymentMethod3Code *);

SOAP_FMAC3 enum ns1__PaymentMethod3Code * SOAP_FMAC4 soap_new_ns1__PaymentMethod3Code(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__PaymentMethod3Code(struct soap*, const enum ns1__PaymentMethod3Code *, const char*, const char*);

inline int soap_write_ns1__PaymentMethod3Code(struct soap *soap, enum ns1__PaymentMethod3Code const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__PaymentMethod3Code(soap, p, "ns1:PaymentMethod3Code", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__PaymentMethod3Code(struct soap *soap, const char *URL, enum ns1__PaymentMethod3Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__PaymentMethod3Code(soap, p, "ns1:PaymentMethod3Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__PaymentMethod3Code(struct soap *soap, const char *URL, enum ns1__PaymentMethod3Code const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__PaymentMethod3Code(soap, p, "ns1:PaymentMethod3Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__PaymentMethod3Code(struct soap *soap, const char *URL, enum ns1__PaymentMethod3Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__PaymentMethod3Code(soap, p, "ns1:PaymentMethod3Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns1__PaymentMethod3Code * SOAP_FMAC4 soap_get_ns1__PaymentMethod3Code(struct soap*, enum ns1__PaymentMethod3Code *, const char*, const char*);

inline int soap_read_ns1__PaymentMethod3Code(struct soap *soap, enum ns1__PaymentMethod3Code *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__PaymentMethod3Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__PaymentMethod3Code(struct soap *soap, const char *URL, enum ns1__PaymentMethod3Code *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__PaymentMethod3Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__PaymentMethod3Code(struct soap *soap, enum ns1__PaymentMethod3Code *p)
{
	if (::soap_read_ns1__PaymentMethod3Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__NamePrefix2Code_DEFINED
#define SOAP_TYPE_ns1__NamePrefix2Code_DEFINED

inline void soap_default_ns1__NamePrefix2Code(struct soap *soap, enum ns1__NamePrefix2Code *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns1__NamePrefix2Code
	*a = SOAP_DEFAULT_ns1__NamePrefix2Code;
#else
	*a = (enum ns1__NamePrefix2Code)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__NamePrefix2Code(struct soap*, const char*, int, const enum ns1__NamePrefix2Code *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__NamePrefix2Code2s(struct soap*, enum ns1__NamePrefix2Code);
SOAP_FMAC3 enum ns1__NamePrefix2Code * SOAP_FMAC4 soap_in_ns1__NamePrefix2Code(struct soap*, const char*, enum ns1__NamePrefix2Code *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__NamePrefix2Code(struct soap*, const char*, enum ns1__NamePrefix2Code *);

SOAP_FMAC3 enum ns1__NamePrefix2Code * SOAP_FMAC4 soap_new_ns1__NamePrefix2Code(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__NamePrefix2Code(struct soap*, const enum ns1__NamePrefix2Code *, const char*, const char*);

inline int soap_write_ns1__NamePrefix2Code(struct soap *soap, enum ns1__NamePrefix2Code const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__NamePrefix2Code(soap, p, "ns1:NamePrefix2Code", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__NamePrefix2Code(struct soap *soap, const char *URL, enum ns1__NamePrefix2Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__NamePrefix2Code(soap, p, "ns1:NamePrefix2Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__NamePrefix2Code(struct soap *soap, const char *URL, enum ns1__NamePrefix2Code const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__NamePrefix2Code(soap, p, "ns1:NamePrefix2Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__NamePrefix2Code(struct soap *soap, const char *URL, enum ns1__NamePrefix2Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__NamePrefix2Code(soap, p, "ns1:NamePrefix2Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns1__NamePrefix2Code * SOAP_FMAC4 soap_get_ns1__NamePrefix2Code(struct soap*, enum ns1__NamePrefix2Code *, const char*, const char*);

inline int soap_read_ns1__NamePrefix2Code(struct soap *soap, enum ns1__NamePrefix2Code *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__NamePrefix2Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__NamePrefix2Code(struct soap *soap, const char *URL, enum ns1__NamePrefix2Code *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__NamePrefix2Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__NamePrefix2Code(struct soap *soap, enum ns1__NamePrefix2Code *p)
{
	if (::soap_read_ns1__NamePrefix2Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__MandateClassification1Code_DEFINED
#define SOAP_TYPE_ns1__MandateClassification1Code_DEFINED

inline void soap_default_ns1__MandateClassification1Code(struct soap *soap, enum ns1__MandateClassification1Code *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns1__MandateClassification1Code
	*a = SOAP_DEFAULT_ns1__MandateClassification1Code;
#else
	*a = (enum ns1__MandateClassification1Code)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MandateClassification1Code(struct soap*, const char*, int, const enum ns1__MandateClassification1Code *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__MandateClassification1Code2s(struct soap*, enum ns1__MandateClassification1Code);
SOAP_FMAC3 enum ns1__MandateClassification1Code * SOAP_FMAC4 soap_in_ns1__MandateClassification1Code(struct soap*, const char*, enum ns1__MandateClassification1Code *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__MandateClassification1Code(struct soap*, const char*, enum ns1__MandateClassification1Code *);

SOAP_FMAC3 enum ns1__MandateClassification1Code * SOAP_FMAC4 soap_new_ns1__MandateClassification1Code(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__MandateClassification1Code(struct soap*, const enum ns1__MandateClassification1Code *, const char*, const char*);

inline int soap_write_ns1__MandateClassification1Code(struct soap *soap, enum ns1__MandateClassification1Code const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__MandateClassification1Code(soap, p, "ns1:MandateClassification1Code", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__MandateClassification1Code(struct soap *soap, const char *URL, enum ns1__MandateClassification1Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__MandateClassification1Code(soap, p, "ns1:MandateClassification1Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__MandateClassification1Code(struct soap *soap, const char *URL, enum ns1__MandateClassification1Code const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__MandateClassification1Code(soap, p, "ns1:MandateClassification1Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__MandateClassification1Code(struct soap *soap, const char *URL, enum ns1__MandateClassification1Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__MandateClassification1Code(soap, p, "ns1:MandateClassification1Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns1__MandateClassification1Code * SOAP_FMAC4 soap_get_ns1__MandateClassification1Code(struct soap*, enum ns1__MandateClassification1Code *, const char*, const char*);

inline int soap_read_ns1__MandateClassification1Code(struct soap *soap, enum ns1__MandateClassification1Code *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__MandateClassification1Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__MandateClassification1Code(struct soap *soap, const char *URL, enum ns1__MandateClassification1Code *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__MandateClassification1Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__MandateClassification1Code(struct soap *soap, enum ns1__MandateClassification1Code *p)
{
	if (::soap_read_ns1__MandateClassification1Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__Frequency6Code_DEFINED
#define SOAP_TYPE_ns1__Frequency6Code_DEFINED

inline void soap_default_ns1__Frequency6Code(struct soap *soap, enum ns1__Frequency6Code *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns1__Frequency6Code
	*a = SOAP_DEFAULT_ns1__Frequency6Code;
#else
	*a = (enum ns1__Frequency6Code)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Frequency6Code(struct soap*, const char*, int, const enum ns1__Frequency6Code *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__Frequency6Code2s(struct soap*, enum ns1__Frequency6Code);
SOAP_FMAC3 enum ns1__Frequency6Code * SOAP_FMAC4 soap_in_ns1__Frequency6Code(struct soap*, const char*, enum ns1__Frequency6Code *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__Frequency6Code(struct soap*, const char*, enum ns1__Frequency6Code *);

SOAP_FMAC3 enum ns1__Frequency6Code * SOAP_FMAC4 soap_new_ns1__Frequency6Code(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__Frequency6Code(struct soap*, const enum ns1__Frequency6Code *, const char*, const char*);

inline int soap_write_ns1__Frequency6Code(struct soap *soap, enum ns1__Frequency6Code const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__Frequency6Code(soap, p, "ns1:Frequency6Code", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__Frequency6Code(struct soap *soap, const char *URL, enum ns1__Frequency6Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__Frequency6Code(soap, p, "ns1:Frequency6Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__Frequency6Code(struct soap *soap, const char *URL, enum ns1__Frequency6Code const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__Frequency6Code(soap, p, "ns1:Frequency6Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__Frequency6Code(struct soap *soap, const char *URL, enum ns1__Frequency6Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__Frequency6Code(soap, p, "ns1:Frequency6Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns1__Frequency6Code * SOAP_FMAC4 soap_get_ns1__Frequency6Code(struct soap*, enum ns1__Frequency6Code *, const char*, const char*);

inline int soap_read_ns1__Frequency6Code(struct soap *soap, enum ns1__Frequency6Code *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__Frequency6Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__Frequency6Code(struct soap *soap, const char *URL, enum ns1__Frequency6Code *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__Frequency6Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__Frequency6Code(struct soap *soap, enum ns1__Frequency6Code *p)
{
	if (::soap_read_ns1__Frequency6Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__ExchangeRateType1Code_DEFINED
#define SOAP_TYPE_ns1__ExchangeRateType1Code_DEFINED

inline void soap_default_ns1__ExchangeRateType1Code(struct soap *soap, enum ns1__ExchangeRateType1Code *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns1__ExchangeRateType1Code
	*a = SOAP_DEFAULT_ns1__ExchangeRateType1Code;
#else
	*a = (enum ns1__ExchangeRateType1Code)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ExchangeRateType1Code(struct soap*, const char*, int, const enum ns1__ExchangeRateType1Code *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__ExchangeRateType1Code2s(struct soap*, enum ns1__ExchangeRateType1Code);
SOAP_FMAC3 enum ns1__ExchangeRateType1Code * SOAP_FMAC4 soap_in_ns1__ExchangeRateType1Code(struct soap*, const char*, enum ns1__ExchangeRateType1Code *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__ExchangeRateType1Code(struct soap*, const char*, enum ns1__ExchangeRateType1Code *);

SOAP_FMAC3 enum ns1__ExchangeRateType1Code * SOAP_FMAC4 soap_new_ns1__ExchangeRateType1Code(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__ExchangeRateType1Code(struct soap*, const enum ns1__ExchangeRateType1Code *, const char*, const char*);

inline int soap_write_ns1__ExchangeRateType1Code(struct soap *soap, enum ns1__ExchangeRateType1Code const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__ExchangeRateType1Code(soap, p, "ns1:ExchangeRateType1Code", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__ExchangeRateType1Code(struct soap *soap, const char *URL, enum ns1__ExchangeRateType1Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ExchangeRateType1Code(soap, p, "ns1:ExchangeRateType1Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ExchangeRateType1Code(struct soap *soap, const char *URL, enum ns1__ExchangeRateType1Code const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ExchangeRateType1Code(soap, p, "ns1:ExchangeRateType1Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ExchangeRateType1Code(struct soap *soap, const char *URL, enum ns1__ExchangeRateType1Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ExchangeRateType1Code(soap, p, "ns1:ExchangeRateType1Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns1__ExchangeRateType1Code * SOAP_FMAC4 soap_get_ns1__ExchangeRateType1Code(struct soap*, enum ns1__ExchangeRateType1Code *, const char*, const char*);

inline int soap_read_ns1__ExchangeRateType1Code(struct soap *soap, enum ns1__ExchangeRateType1Code *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__ExchangeRateType1Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ExchangeRateType1Code(struct soap *soap, const char *URL, enum ns1__ExchangeRateType1Code *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ExchangeRateType1Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__ExchangeRateType1Code(struct soap *soap, enum ns1__ExchangeRateType1Code *p)
{
	if (::soap_read_ns1__ExchangeRateType1Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__DocumentType6Code_DEFINED
#define SOAP_TYPE_ns1__DocumentType6Code_DEFINED

inline void soap_default_ns1__DocumentType6Code(struct soap *soap, enum ns1__DocumentType6Code *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns1__DocumentType6Code
	*a = SOAP_DEFAULT_ns1__DocumentType6Code;
#else
	*a = (enum ns1__DocumentType6Code)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DocumentType6Code(struct soap*, const char*, int, const enum ns1__DocumentType6Code *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__DocumentType6Code2s(struct soap*, enum ns1__DocumentType6Code);
SOAP_FMAC3 enum ns1__DocumentType6Code * SOAP_FMAC4 soap_in_ns1__DocumentType6Code(struct soap*, const char*, enum ns1__DocumentType6Code *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__DocumentType6Code(struct soap*, const char*, enum ns1__DocumentType6Code *);

SOAP_FMAC3 enum ns1__DocumentType6Code * SOAP_FMAC4 soap_new_ns1__DocumentType6Code(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__DocumentType6Code(struct soap*, const enum ns1__DocumentType6Code *, const char*, const char*);

inline int soap_write_ns1__DocumentType6Code(struct soap *soap, enum ns1__DocumentType6Code const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__DocumentType6Code(soap, p, "ns1:DocumentType6Code", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__DocumentType6Code(struct soap *soap, const char *URL, enum ns1__DocumentType6Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__DocumentType6Code(soap, p, "ns1:DocumentType6Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__DocumentType6Code(struct soap *soap, const char *URL, enum ns1__DocumentType6Code const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__DocumentType6Code(soap, p, "ns1:DocumentType6Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DocumentType6Code(struct soap *soap, const char *URL, enum ns1__DocumentType6Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__DocumentType6Code(soap, p, "ns1:DocumentType6Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns1__DocumentType6Code * SOAP_FMAC4 soap_get_ns1__DocumentType6Code(struct soap*, enum ns1__DocumentType6Code *, const char*, const char*);

inline int soap_read_ns1__DocumentType6Code(struct soap *soap, enum ns1__DocumentType6Code *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__DocumentType6Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DocumentType6Code(struct soap *soap, const char *URL, enum ns1__DocumentType6Code *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__DocumentType6Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__DocumentType6Code(struct soap *soap, enum ns1__DocumentType6Code *p)
{
	if (::soap_read_ns1__DocumentType6Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__DocumentType3Code_DEFINED
#define SOAP_TYPE_ns1__DocumentType3Code_DEFINED

inline void soap_default_ns1__DocumentType3Code(struct soap *soap, enum ns1__DocumentType3Code *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns1__DocumentType3Code
	*a = SOAP_DEFAULT_ns1__DocumentType3Code;
#else
	*a = (enum ns1__DocumentType3Code)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DocumentType3Code(struct soap*, const char*, int, const enum ns1__DocumentType3Code *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__DocumentType3Code2s(struct soap*, enum ns1__DocumentType3Code);
SOAP_FMAC3 enum ns1__DocumentType3Code * SOAP_FMAC4 soap_in_ns1__DocumentType3Code(struct soap*, const char*, enum ns1__DocumentType3Code *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__DocumentType3Code(struct soap*, const char*, enum ns1__DocumentType3Code *);

SOAP_FMAC3 enum ns1__DocumentType3Code * SOAP_FMAC4 soap_new_ns1__DocumentType3Code(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__DocumentType3Code(struct soap*, const enum ns1__DocumentType3Code *, const char*, const char*);

inline int soap_write_ns1__DocumentType3Code(struct soap *soap, enum ns1__DocumentType3Code const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__DocumentType3Code(soap, p, "ns1:DocumentType3Code", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__DocumentType3Code(struct soap *soap, const char *URL, enum ns1__DocumentType3Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__DocumentType3Code(soap, p, "ns1:DocumentType3Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__DocumentType3Code(struct soap *soap, const char *URL, enum ns1__DocumentType3Code const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__DocumentType3Code(soap, p, "ns1:DocumentType3Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DocumentType3Code(struct soap *soap, const char *URL, enum ns1__DocumentType3Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__DocumentType3Code(soap, p, "ns1:DocumentType3Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns1__DocumentType3Code * SOAP_FMAC4 soap_get_ns1__DocumentType3Code(struct soap*, enum ns1__DocumentType3Code *, const char*, const char*);

inline int soap_read_ns1__DocumentType3Code(struct soap *soap, enum ns1__DocumentType3Code *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__DocumentType3Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DocumentType3Code(struct soap *soap, const char *URL, enum ns1__DocumentType3Code *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__DocumentType3Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__DocumentType3Code(struct soap *soap, enum ns1__DocumentType3Code *p)
{
	if (::soap_read_ns1__DocumentType3Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__CreditDebitCode_DEFINED
#define SOAP_TYPE_ns1__CreditDebitCode_DEFINED

inline void soap_default_ns1__CreditDebitCode(struct soap *soap, enum ns1__CreditDebitCode *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns1__CreditDebitCode
	*a = SOAP_DEFAULT_ns1__CreditDebitCode;
#else
	*a = (enum ns1__CreditDebitCode)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CreditDebitCode(struct soap*, const char*, int, const enum ns1__CreditDebitCode *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__CreditDebitCode2s(struct soap*, enum ns1__CreditDebitCode);
SOAP_FMAC3 enum ns1__CreditDebitCode * SOAP_FMAC4 soap_in_ns1__CreditDebitCode(struct soap*, const char*, enum ns1__CreditDebitCode *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__CreditDebitCode(struct soap*, const char*, enum ns1__CreditDebitCode *);

SOAP_FMAC3 enum ns1__CreditDebitCode * SOAP_FMAC4 soap_new_ns1__CreditDebitCode(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__CreditDebitCode(struct soap*, const enum ns1__CreditDebitCode *, const char*, const char*);

inline int soap_write_ns1__CreditDebitCode(struct soap *soap, enum ns1__CreditDebitCode const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__CreditDebitCode(soap, p, "ns1:CreditDebitCode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__CreditDebitCode(struct soap *soap, const char *URL, enum ns1__CreditDebitCode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__CreditDebitCode(soap, p, "ns1:CreditDebitCode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__CreditDebitCode(struct soap *soap, const char *URL, enum ns1__CreditDebitCode const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__CreditDebitCode(soap, p, "ns1:CreditDebitCode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__CreditDebitCode(struct soap *soap, const char *URL, enum ns1__CreditDebitCode const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__CreditDebitCode(soap, p, "ns1:CreditDebitCode", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns1__CreditDebitCode * SOAP_FMAC4 soap_get_ns1__CreditDebitCode(struct soap*, enum ns1__CreditDebitCode *, const char*, const char*);

inline int soap_read_ns1__CreditDebitCode(struct soap *soap, enum ns1__CreditDebitCode *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__CreditDebitCode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__CreditDebitCode(struct soap *soap, const char *URL, enum ns1__CreditDebitCode *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__CreditDebitCode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__CreditDebitCode(struct soap *soap, enum ns1__CreditDebitCode *p)
{
	if (::soap_read_ns1__CreditDebitCode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__ChequeType2Code_DEFINED
#define SOAP_TYPE_ns1__ChequeType2Code_DEFINED

inline void soap_default_ns1__ChequeType2Code(struct soap *soap, enum ns1__ChequeType2Code *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns1__ChequeType2Code
	*a = SOAP_DEFAULT_ns1__ChequeType2Code;
#else
	*a = (enum ns1__ChequeType2Code)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ChequeType2Code(struct soap*, const char*, int, const enum ns1__ChequeType2Code *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__ChequeType2Code2s(struct soap*, enum ns1__ChequeType2Code);
SOAP_FMAC3 enum ns1__ChequeType2Code * SOAP_FMAC4 soap_in_ns1__ChequeType2Code(struct soap*, const char*, enum ns1__ChequeType2Code *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__ChequeType2Code(struct soap*, const char*, enum ns1__ChequeType2Code *);

SOAP_FMAC3 enum ns1__ChequeType2Code * SOAP_FMAC4 soap_new_ns1__ChequeType2Code(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__ChequeType2Code(struct soap*, const enum ns1__ChequeType2Code *, const char*, const char*);

inline int soap_write_ns1__ChequeType2Code(struct soap *soap, enum ns1__ChequeType2Code const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__ChequeType2Code(soap, p, "ns1:ChequeType2Code", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__ChequeType2Code(struct soap *soap, const char *URL, enum ns1__ChequeType2Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ChequeType2Code(soap, p, "ns1:ChequeType2Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ChequeType2Code(struct soap *soap, const char *URL, enum ns1__ChequeType2Code const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ChequeType2Code(soap, p, "ns1:ChequeType2Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ChequeType2Code(struct soap *soap, const char *URL, enum ns1__ChequeType2Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ChequeType2Code(soap, p, "ns1:ChequeType2Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns1__ChequeType2Code * SOAP_FMAC4 soap_get_ns1__ChequeType2Code(struct soap*, enum ns1__ChequeType2Code *, const char*, const char*);

inline int soap_read_ns1__ChequeType2Code(struct soap *soap, enum ns1__ChequeType2Code *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__ChequeType2Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ChequeType2Code(struct soap *soap, const char *URL, enum ns1__ChequeType2Code *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ChequeType2Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__ChequeType2Code(struct soap *soap, enum ns1__ChequeType2Code *p)
{
	if (::soap_read_ns1__ChequeType2Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__ChequeDelivery1Code_DEFINED
#define SOAP_TYPE_ns1__ChequeDelivery1Code_DEFINED

inline void soap_default_ns1__ChequeDelivery1Code(struct soap *soap, enum ns1__ChequeDelivery1Code *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns1__ChequeDelivery1Code
	*a = SOAP_DEFAULT_ns1__ChequeDelivery1Code;
#else
	*a = (enum ns1__ChequeDelivery1Code)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ChequeDelivery1Code(struct soap*, const char*, int, const enum ns1__ChequeDelivery1Code *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__ChequeDelivery1Code2s(struct soap*, enum ns1__ChequeDelivery1Code);
SOAP_FMAC3 enum ns1__ChequeDelivery1Code * SOAP_FMAC4 soap_in_ns1__ChequeDelivery1Code(struct soap*, const char*, enum ns1__ChequeDelivery1Code *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__ChequeDelivery1Code(struct soap*, const char*, enum ns1__ChequeDelivery1Code *);

SOAP_FMAC3 enum ns1__ChequeDelivery1Code * SOAP_FMAC4 soap_new_ns1__ChequeDelivery1Code(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__ChequeDelivery1Code(struct soap*, const enum ns1__ChequeDelivery1Code *, const char*, const char*);

inline int soap_write_ns1__ChequeDelivery1Code(struct soap *soap, enum ns1__ChequeDelivery1Code const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__ChequeDelivery1Code(soap, p, "ns1:ChequeDelivery1Code", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__ChequeDelivery1Code(struct soap *soap, const char *URL, enum ns1__ChequeDelivery1Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ChequeDelivery1Code(soap, p, "ns1:ChequeDelivery1Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ChequeDelivery1Code(struct soap *soap, const char *URL, enum ns1__ChequeDelivery1Code const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ChequeDelivery1Code(soap, p, "ns1:ChequeDelivery1Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ChequeDelivery1Code(struct soap *soap, const char *URL, enum ns1__ChequeDelivery1Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ChequeDelivery1Code(soap, p, "ns1:ChequeDelivery1Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns1__ChequeDelivery1Code * SOAP_FMAC4 soap_get_ns1__ChequeDelivery1Code(struct soap*, enum ns1__ChequeDelivery1Code *, const char*, const char*);

inline int soap_read_ns1__ChequeDelivery1Code(struct soap *soap, enum ns1__ChequeDelivery1Code *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__ChequeDelivery1Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ChequeDelivery1Code(struct soap *soap, const char *URL, enum ns1__ChequeDelivery1Code *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ChequeDelivery1Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__ChequeDelivery1Code(struct soap *soap, enum ns1__ChequeDelivery1Code *p)
{
	if (::soap_read_ns1__ChequeDelivery1Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__ChargeBearerType1Code_DEFINED
#define SOAP_TYPE_ns1__ChargeBearerType1Code_DEFINED

inline void soap_default_ns1__ChargeBearerType1Code(struct soap *soap, enum ns1__ChargeBearerType1Code *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns1__ChargeBearerType1Code
	*a = SOAP_DEFAULT_ns1__ChargeBearerType1Code;
#else
	*a = (enum ns1__ChargeBearerType1Code)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ChargeBearerType1Code(struct soap*, const char*, int, const enum ns1__ChargeBearerType1Code *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__ChargeBearerType1Code2s(struct soap*, enum ns1__ChargeBearerType1Code);
SOAP_FMAC3 enum ns1__ChargeBearerType1Code * SOAP_FMAC4 soap_in_ns1__ChargeBearerType1Code(struct soap*, const char*, enum ns1__ChargeBearerType1Code *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__ChargeBearerType1Code(struct soap*, const char*, enum ns1__ChargeBearerType1Code *);

SOAP_FMAC3 enum ns1__ChargeBearerType1Code * SOAP_FMAC4 soap_new_ns1__ChargeBearerType1Code(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__ChargeBearerType1Code(struct soap*, const enum ns1__ChargeBearerType1Code *, const char*, const char*);

inline int soap_write_ns1__ChargeBearerType1Code(struct soap *soap, enum ns1__ChargeBearerType1Code const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__ChargeBearerType1Code(soap, p, "ns1:ChargeBearerType1Code", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__ChargeBearerType1Code(struct soap *soap, const char *URL, enum ns1__ChargeBearerType1Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ChargeBearerType1Code(soap, p, "ns1:ChargeBearerType1Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ChargeBearerType1Code(struct soap *soap, const char *URL, enum ns1__ChargeBearerType1Code const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ChargeBearerType1Code(soap, p, "ns1:ChargeBearerType1Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ChargeBearerType1Code(struct soap *soap, const char *URL, enum ns1__ChargeBearerType1Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ChargeBearerType1Code(soap, p, "ns1:ChargeBearerType1Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns1__ChargeBearerType1Code * SOAP_FMAC4 soap_get_ns1__ChargeBearerType1Code(struct soap*, enum ns1__ChargeBearerType1Code *, const char*, const char*);

inline int soap_read_ns1__ChargeBearerType1Code(struct soap *soap, enum ns1__ChargeBearerType1Code *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__ChargeBearerType1Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ChargeBearerType1Code(struct soap *soap, const char *URL, enum ns1__ChargeBearerType1Code *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ChargeBearerType1Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__ChargeBearerType1Code(struct soap *soap, enum ns1__ChargeBearerType1Code *p)
{
	if (::soap_read_ns1__ChargeBearerType1Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__BatchBookingIndicator_DEFINED
#define SOAP_TYPE_ns1__BatchBookingIndicator_DEFINED

inline void soap_default_ns1__BatchBookingIndicator(struct soap *soap, bool *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns1__BatchBookingIndicator
	*a = SOAP_DEFAULT_ns1__BatchBookingIndicator;
#else
	*a = (bool)0;
#endif
}

#define soap_ns1__BatchBookingIndicator2s soap_bool2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__BatchBookingIndicator(struct soap*, const char*, int, const bool *, const char*);

#define soap_s2ns1__BatchBookingIndicator soap_s2bool

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_ns1__BatchBookingIndicator(struct soap*, const char*, bool *, const char*);

#define soap_instantiate_ns1__BatchBookingIndicator soap_instantiate_bool


#define soap_new_ns1__BatchBookingIndicator soap_new_bool

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__BatchBookingIndicator(struct soap*, const bool *, const char*, const char*);

inline int soap_write_ns1__BatchBookingIndicator(struct soap *soap, bool const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__BatchBookingIndicator(soap, p, "ns1:BatchBookingIndicator", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__BatchBookingIndicator(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__BatchBookingIndicator(soap, p, "ns1:BatchBookingIndicator", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__BatchBookingIndicator(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__BatchBookingIndicator(soap, p, "ns1:BatchBookingIndicator", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__BatchBookingIndicator(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__BatchBookingIndicator(soap, p, "ns1:BatchBookingIndicator", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_ns1__BatchBookingIndicator(struct soap*, bool *, const char*, const char*);

inline int soap_read_ns1__BatchBookingIndicator(struct soap *soap, bool *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__BatchBookingIndicator(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__BatchBookingIndicator(struct soap *soap, const char *URL, bool *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__BatchBookingIndicator(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__BatchBookingIndicator(struct soap *soap, bool *p)
{
	if (::soap_read_ns1__BatchBookingIndicator(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_bool_DEFINED
#define SOAP_TYPE_bool_DEFINED

inline void soap_default_bool(struct soap *soap, bool *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);

SOAP_FMAC3 bool * SOAP_FMAC4 soap_new_bool(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

inline int soap_write_bool(struct soap *soap, bool const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

inline int soap_read_bool(struct soap *soap, bool *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_bool(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_bool(struct soap *soap, const char *URL, bool *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_bool(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_bool(struct soap *soap, bool *p)
{
	if (::soap_read_bool(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__Authorisation1Code_DEFINED
#define SOAP_TYPE_ns1__Authorisation1Code_DEFINED

inline void soap_default_ns1__Authorisation1Code(struct soap *soap, enum ns1__Authorisation1Code *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns1__Authorisation1Code
	*a = SOAP_DEFAULT_ns1__Authorisation1Code;
#else
	*a = (enum ns1__Authorisation1Code)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Authorisation1Code(struct soap*, const char*, int, const enum ns1__Authorisation1Code *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__Authorisation1Code2s(struct soap*, enum ns1__Authorisation1Code);
SOAP_FMAC3 enum ns1__Authorisation1Code * SOAP_FMAC4 soap_in_ns1__Authorisation1Code(struct soap*, const char*, enum ns1__Authorisation1Code *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__Authorisation1Code(struct soap*, const char*, enum ns1__Authorisation1Code *);

SOAP_FMAC3 enum ns1__Authorisation1Code * SOAP_FMAC4 soap_new_ns1__Authorisation1Code(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__Authorisation1Code(struct soap*, const enum ns1__Authorisation1Code *, const char*, const char*);

inline int soap_write_ns1__Authorisation1Code(struct soap *soap, enum ns1__Authorisation1Code const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__Authorisation1Code(soap, p, "ns1:Authorisation1Code", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__Authorisation1Code(struct soap *soap, const char *URL, enum ns1__Authorisation1Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__Authorisation1Code(soap, p, "ns1:Authorisation1Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__Authorisation1Code(struct soap *soap, const char *URL, enum ns1__Authorisation1Code const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__Authorisation1Code(soap, p, "ns1:Authorisation1Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__Authorisation1Code(struct soap *soap, const char *URL, enum ns1__Authorisation1Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__Authorisation1Code(soap, p, "ns1:Authorisation1Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns1__Authorisation1Code * SOAP_FMAC4 soap_get_ns1__Authorisation1Code(struct soap*, enum ns1__Authorisation1Code *, const char*, const char*);

inline int soap_read_ns1__Authorisation1Code(struct soap *soap, enum ns1__Authorisation1Code *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__Authorisation1Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__Authorisation1Code(struct soap *soap, const char *URL, enum ns1__Authorisation1Code *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__Authorisation1Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__Authorisation1Code(struct soap *soap, enum ns1__Authorisation1Code *p)
{
	if (::soap_read_ns1__Authorisation1Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__AdviceType1Code_DEFINED
#define SOAP_TYPE_ns1__AdviceType1Code_DEFINED

inline void soap_default_ns1__AdviceType1Code(struct soap *soap, enum ns1__AdviceType1Code *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns1__AdviceType1Code
	*a = SOAP_DEFAULT_ns1__AdviceType1Code;
#else
	*a = (enum ns1__AdviceType1Code)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AdviceType1Code(struct soap*, const char*, int, const enum ns1__AdviceType1Code *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__AdviceType1Code2s(struct soap*, enum ns1__AdviceType1Code);
SOAP_FMAC3 enum ns1__AdviceType1Code * SOAP_FMAC4 soap_in_ns1__AdviceType1Code(struct soap*, const char*, enum ns1__AdviceType1Code *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__AdviceType1Code(struct soap*, const char*, enum ns1__AdviceType1Code *);

SOAP_FMAC3 enum ns1__AdviceType1Code * SOAP_FMAC4 soap_new_ns1__AdviceType1Code(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__AdviceType1Code(struct soap*, const enum ns1__AdviceType1Code *, const char*, const char*);

inline int soap_write_ns1__AdviceType1Code(struct soap *soap, enum ns1__AdviceType1Code const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__AdviceType1Code(soap, p, "ns1:AdviceType1Code", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__AdviceType1Code(struct soap *soap, const char *URL, enum ns1__AdviceType1Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__AdviceType1Code(soap, p, "ns1:AdviceType1Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__AdviceType1Code(struct soap *soap, const char *URL, enum ns1__AdviceType1Code const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__AdviceType1Code(soap, p, "ns1:AdviceType1Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__AdviceType1Code(struct soap *soap, const char *URL, enum ns1__AdviceType1Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__AdviceType1Code(soap, p, "ns1:AdviceType1Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns1__AdviceType1Code * SOAP_FMAC4 soap_get_ns1__AdviceType1Code(struct soap*, enum ns1__AdviceType1Code *, const char*, const char*);

inline int soap_read_ns1__AdviceType1Code(struct soap *soap, enum ns1__AdviceType1Code *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__AdviceType1Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__AdviceType1Code(struct soap *soap, const char *URL, enum ns1__AdviceType1Code *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__AdviceType1Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__AdviceType1Code(struct soap *soap, enum ns1__AdviceType1Code *p)
{
	if (::soap_read_ns1__AdviceType1Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__AddressType2Code_DEFINED
#define SOAP_TYPE_ns1__AddressType2Code_DEFINED

inline void soap_default_ns1__AddressType2Code(struct soap *soap, enum ns1__AddressType2Code *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns1__AddressType2Code
	*a = SOAP_DEFAULT_ns1__AddressType2Code;
#else
	*a = (enum ns1__AddressType2Code)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AddressType2Code(struct soap*, const char*, int, const enum ns1__AddressType2Code *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__AddressType2Code2s(struct soap*, enum ns1__AddressType2Code);
SOAP_FMAC3 enum ns1__AddressType2Code * SOAP_FMAC4 soap_in_ns1__AddressType2Code(struct soap*, const char*, enum ns1__AddressType2Code *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__AddressType2Code(struct soap*, const char*, enum ns1__AddressType2Code *);

SOAP_FMAC3 enum ns1__AddressType2Code * SOAP_FMAC4 soap_new_ns1__AddressType2Code(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__AddressType2Code(struct soap*, const enum ns1__AddressType2Code *, const char*, const char*);

inline int soap_write_ns1__AddressType2Code(struct soap *soap, enum ns1__AddressType2Code const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__AddressType2Code(soap, p, "ns1:AddressType2Code", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__AddressType2Code(struct soap *soap, const char *URL, enum ns1__AddressType2Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__AddressType2Code(soap, p, "ns1:AddressType2Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__AddressType2Code(struct soap *soap, const char *URL, enum ns1__AddressType2Code const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__AddressType2Code(soap, p, "ns1:AddressType2Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__AddressType2Code(struct soap *soap, const char *URL, enum ns1__AddressType2Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__AddressType2Code(soap, p, "ns1:AddressType2Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns1__AddressType2Code * SOAP_FMAC4 soap_get_ns1__AddressType2Code(struct soap*, enum ns1__AddressType2Code *, const char*, const char*);

inline int soap_read_ns1__AddressType2Code(struct soap *soap, enum ns1__AddressType2Code *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__AddressType2Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__AddressType2Code(struct soap *soap, const char *URL, enum ns1__AddressType2Code *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__AddressType2Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__AddressType2Code(struct soap *soap, enum ns1__AddressType2Code *p)
{
	if (::soap_read_ns1__AddressType2Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__UUIDv4Identifier_DEFINED
#define SOAP_TYPE_ns1__UUIDv4Identifier_DEFINED

inline void soap_default_ns1__UUIDv4Identifier(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__UUIDv4Identifier(struct soap*, const std::string *);

#define soap_ns1__UUIDv4Identifier2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__UUIDv4Identifier(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns1__UUIDv4Identifier(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, "[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89ab][a-f0-9]{3}-[a-f0-9]{12}")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns1__UUIDv4Identifier(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns1__UUIDv4Identifier soap_instantiate_std__string


#define soap_new_ns1__UUIDv4Identifier soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__UUIDv4Identifier(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns1__UUIDv4Identifier(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__UUIDv4Identifier(soap, p, "ns1:UUIDv4Identifier", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__UUIDv4Identifier(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__UUIDv4Identifier(soap, p, "ns1:UUIDv4Identifier", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__UUIDv4Identifier(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__UUIDv4Identifier(soap, p, "ns1:UUIDv4Identifier", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__UUIDv4Identifier(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__UUIDv4Identifier(soap, p, "ns1:UUIDv4Identifier", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns1__UUIDv4Identifier(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns1__UUIDv4Identifier(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__UUIDv4Identifier(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__UUIDv4Identifier(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__UUIDv4Identifier(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__UUIDv4Identifier(struct soap *soap, std::string *p)
{
	if (::soap_read_ns1__UUIDv4Identifier(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__PhoneNumber_DEFINED
#define SOAP_TYPE_ns1__PhoneNumber_DEFINED

inline void soap_default_ns1__PhoneNumber(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__PhoneNumber(struct soap*, const std::string *);

#define soap_ns1__PhoneNumber2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__PhoneNumber(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns1__PhoneNumber(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, "\\+[0-9]{1,3}-[0-9()+\\-]{1,30}")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns1__PhoneNumber(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns1__PhoneNumber soap_instantiate_std__string


#define soap_new_ns1__PhoneNumber soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__PhoneNumber(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns1__PhoneNumber(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__PhoneNumber(soap, p, "ns1:PhoneNumber", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__PhoneNumber(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__PhoneNumber(soap, p, "ns1:PhoneNumber", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__PhoneNumber(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__PhoneNumber(soap, p, "ns1:PhoneNumber", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__PhoneNumber(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__PhoneNumber(soap, p, "ns1:PhoneNumber", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns1__PhoneNumber(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns1__PhoneNumber(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__PhoneNumber(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__PhoneNumber(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__PhoneNumber(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__PhoneNumber(struct soap *soap, std::string *p)
{
	if (::soap_read_ns1__PhoneNumber(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif
/* ns1__PercentageRate is a typedef synonym of xsd__decimal */

#ifndef SOAP_TYPE_ns1__PercentageRate_DEFINED
#define SOAP_TYPE_ns1__PercentageRate_DEFINED

#define soap_default_ns1__PercentageRate soap_default_xsd__decimal


#define soap_serialize_ns1__PercentageRate soap_serialize_xsd__decimal


#define soap_ns1__PercentageRate2s(soap, a) ((a).c_str())

#define soap_out_ns1__PercentageRate soap_out_xsd__decimal


#define soap_s2ns1__PercentageRate(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, "[-+]?(\\d+|\\d*\\.\\d*)")

#define soap_in_ns1__PercentageRate soap_in_xsd__decimal


#define soap_instantiate_ns1__PercentageRate soap_instantiate_xsd__decimal


#define soap_new_ns1__PercentageRate soap_new_xsd__decimal


#define soap_put_ns1__PercentageRate soap_put_xsd__decimal


#define soap_write_ns1__PercentageRate soap_write_xsd__decimal


#define soap_PUT_ns1__PercentageRate soap_PUT_xsd__decimal


#define soap_PATCH_ns1__PercentageRate soap_PATCH_xsd__decimal


#define soap_POST_send_ns1__PercentageRate soap_POST_send_xsd__decimal


#define soap_get_ns1__PercentageRate soap_get_xsd__decimal


#define soap_read_ns1__PercentageRate soap_read_xsd__decimal


#define soap_GET_ns1__PercentageRate soap_GET_xsd__decimal


#define soap_POST_recv_ns1__PercentageRate soap_POST_recv_xsd__decimal

#endif
/* ns1__Number is a typedef synonym of xsd__decimal */

#ifndef SOAP_TYPE_ns1__Number_DEFINED
#define SOAP_TYPE_ns1__Number_DEFINED

#define soap_default_ns1__Number soap_default_xsd__decimal


#define soap_serialize_ns1__Number soap_serialize_xsd__decimal


#define soap_ns1__Number2s(soap, a) ((a).c_str())

#define soap_out_ns1__Number soap_out_xsd__decimal


#define soap_s2ns1__Number(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, "[-+]?(\\d+|\\d*\\.\\d*)")

#define soap_in_ns1__Number soap_in_xsd__decimal


#define soap_instantiate_ns1__Number soap_instantiate_xsd__decimal


#define soap_new_ns1__Number soap_new_xsd__decimal


#define soap_put_ns1__Number soap_put_xsd__decimal


#define soap_write_ns1__Number soap_write_xsd__decimal


#define soap_PUT_ns1__Number soap_PUT_xsd__decimal


#define soap_PATCH_ns1__Number soap_PATCH_xsd__decimal


#define soap_POST_send_ns1__Number soap_POST_send_xsd__decimal


#define soap_get_ns1__Number soap_get_xsd__decimal


#define soap_read_ns1__Number soap_read_xsd__decimal


#define soap_GET_ns1__Number soap_GET_xsd__decimal


#define soap_POST_recv_ns1__Number soap_POST_recv_xsd__decimal

#endif

#ifndef SOAP_TYPE_ns1__Max70Text_DEFINED
#define SOAP_TYPE_ns1__Max70Text_DEFINED

inline void soap_default_ns1__Max70Text(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__Max70Text(struct soap*, const std::string *);

#define soap_ns1__Max70Text2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Max70Text(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns1__Max70Text(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 1, 70, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns1__Max70Text(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns1__Max70Text soap_instantiate_std__string


#define soap_new_ns1__Max70Text soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__Max70Text(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns1__Max70Text(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__Max70Text(soap, p, "ns1:Max70Text", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__Max70Text(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__Max70Text(soap, p, "ns1:Max70Text", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__Max70Text(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__Max70Text(soap, p, "ns1:Max70Text", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__Max70Text(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__Max70Text(soap, p, "ns1:Max70Text", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns1__Max70Text(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns1__Max70Text(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__Max70Text(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__Max70Text(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__Max70Text(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__Max70Text(struct soap *soap, std::string *p)
{
	if (::soap_read_ns1__Max70Text(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__Max4Text_DEFINED
#define SOAP_TYPE_ns1__Max4Text_DEFINED

inline void soap_default_ns1__Max4Text(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__Max4Text(struct soap*, const std::string *);

#define soap_ns1__Max4Text2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Max4Text(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns1__Max4Text(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 1, 4, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns1__Max4Text(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns1__Max4Text soap_instantiate_std__string


#define soap_new_ns1__Max4Text soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__Max4Text(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns1__Max4Text(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__Max4Text(soap, p, "ns1:Max4Text", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__Max4Text(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__Max4Text(soap, p, "ns1:Max4Text", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__Max4Text(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__Max4Text(soap, p, "ns1:Max4Text", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__Max4Text(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__Max4Text(soap, p, "ns1:Max4Text", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns1__Max4Text(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns1__Max4Text(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__Max4Text(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__Max4Text(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__Max4Text(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__Max4Text(struct soap *soap, std::string *p)
{
	if (::soap_read_ns1__Max4Text(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__Max35Text_DEFINED
#define SOAP_TYPE_ns1__Max35Text_DEFINED

inline void soap_default_ns1__Max35Text(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__Max35Text(struct soap*, const std::string *);

#define soap_ns1__Max35Text2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Max35Text(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns1__Max35Text(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 1, 35, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns1__Max35Text(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns1__Max35Text soap_instantiate_std__string


#define soap_new_ns1__Max35Text soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__Max35Text(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns1__Max35Text(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__Max35Text(soap, p, "ns1:Max35Text", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__Max35Text(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__Max35Text(soap, p, "ns1:Max35Text", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__Max35Text(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__Max35Text(soap, p, "ns1:Max35Text", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__Max35Text(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__Max35Text(soap, p, "ns1:Max35Text", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns1__Max35Text(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns1__Max35Text(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__Max35Text(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__Max35Text(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__Max35Text(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__Max35Text(struct soap *soap, std::string *p)
{
	if (::soap_read_ns1__Max35Text(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__Max350Text_DEFINED
#define SOAP_TYPE_ns1__Max350Text_DEFINED

inline void soap_default_ns1__Max350Text(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__Max350Text(struct soap*, const std::string *);

#define soap_ns1__Max350Text2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Max350Text(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns1__Max350Text(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 1, 350, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns1__Max350Text(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns1__Max350Text soap_instantiate_std__string


#define soap_new_ns1__Max350Text soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__Max350Text(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns1__Max350Text(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__Max350Text(soap, p, "ns1:Max350Text", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__Max350Text(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__Max350Text(soap, p, "ns1:Max350Text", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__Max350Text(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__Max350Text(soap, p, "ns1:Max350Text", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__Max350Text(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__Max350Text(soap, p, "ns1:Max350Text", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns1__Max350Text(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns1__Max350Text(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__Max350Text(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__Max350Text(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__Max350Text(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__Max350Text(struct soap *soap, std::string *p)
{
	if (::soap_read_ns1__Max350Text(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__Max34Text_DEFINED
#define SOAP_TYPE_ns1__Max34Text_DEFINED

inline void soap_default_ns1__Max34Text(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__Max34Text(struct soap*, const std::string *);

#define soap_ns1__Max34Text2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Max34Text(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns1__Max34Text(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 1, 34, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns1__Max34Text(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns1__Max34Text soap_instantiate_std__string


#define soap_new_ns1__Max34Text soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__Max34Text(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns1__Max34Text(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__Max34Text(soap, p, "ns1:Max34Text", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__Max34Text(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__Max34Text(soap, p, "ns1:Max34Text", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__Max34Text(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__Max34Text(soap, p, "ns1:Max34Text", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__Max34Text(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__Max34Text(soap, p, "ns1:Max34Text", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns1__Max34Text(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns1__Max34Text(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__Max34Text(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__Max34Text(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__Max34Text(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__Max34Text(struct soap *soap, std::string *p)
{
	if (::soap_read_ns1__Max34Text(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__Max2048Text_DEFINED
#define SOAP_TYPE_ns1__Max2048Text_DEFINED

inline void soap_default_ns1__Max2048Text(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__Max2048Text(struct soap*, const std::string *);

#define soap_ns1__Max2048Text2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Max2048Text(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns1__Max2048Text(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 1, 2048, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns1__Max2048Text(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns1__Max2048Text soap_instantiate_std__string


#define soap_new_ns1__Max2048Text soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__Max2048Text(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns1__Max2048Text(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__Max2048Text(soap, p, "ns1:Max2048Text", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__Max2048Text(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__Max2048Text(soap, p, "ns1:Max2048Text", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__Max2048Text(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__Max2048Text(soap, p, "ns1:Max2048Text", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__Max2048Text(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__Max2048Text(soap, p, "ns1:Max2048Text", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns1__Max2048Text(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns1__Max2048Text(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__Max2048Text(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__Max2048Text(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__Max2048Text(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__Max2048Text(struct soap *soap, std::string *p)
{
	if (::soap_read_ns1__Max2048Text(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__Max16Text_DEFINED
#define SOAP_TYPE_ns1__Max16Text_DEFINED

inline void soap_default_ns1__Max16Text(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__Max16Text(struct soap*, const std::string *);

#define soap_ns1__Max16Text2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Max16Text(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns1__Max16Text(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 1, 16, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns1__Max16Text(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns1__Max16Text soap_instantiate_std__string


#define soap_new_ns1__Max16Text soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__Max16Text(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns1__Max16Text(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__Max16Text(soap, p, "ns1:Max16Text", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__Max16Text(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__Max16Text(soap, p, "ns1:Max16Text", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__Max16Text(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__Max16Text(soap, p, "ns1:Max16Text", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__Max16Text(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__Max16Text(soap, p, "ns1:Max16Text", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns1__Max16Text(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns1__Max16Text(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__Max16Text(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__Max16Text(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__Max16Text(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__Max16Text(struct soap *soap, std::string *p)
{
	if (::soap_read_ns1__Max16Text(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__Max15NumericText_DEFINED
#define SOAP_TYPE_ns1__Max15NumericText_DEFINED

inline void soap_default_ns1__Max15NumericText(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__Max15NumericText(struct soap*, const std::string *);

#define soap_ns1__Max15NumericText2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Max15NumericText(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns1__Max15NumericText(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, "[0-9]{1,15}")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns1__Max15NumericText(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns1__Max15NumericText soap_instantiate_std__string


#define soap_new_ns1__Max15NumericText soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__Max15NumericText(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns1__Max15NumericText(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__Max15NumericText(soap, p, "ns1:Max15NumericText", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__Max15NumericText(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__Max15NumericText(soap, p, "ns1:Max15NumericText", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__Max15NumericText(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__Max15NumericText(soap, p, "ns1:Max15NumericText", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__Max15NumericText(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__Max15NumericText(soap, p, "ns1:Max15NumericText", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns1__Max15NumericText(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns1__Max15NumericText(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__Max15NumericText(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__Max15NumericText(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__Max15NumericText(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__Max15NumericText(struct soap *soap, std::string *p)
{
	if (::soap_read_ns1__Max15NumericText(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__Max140Text_DEFINED
#define SOAP_TYPE_ns1__Max140Text_DEFINED

inline void soap_default_ns1__Max140Text(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__Max140Text(struct soap*, const std::string *);

#define soap_ns1__Max140Text2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Max140Text(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns1__Max140Text(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 1, 140, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns1__Max140Text(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns1__Max140Text soap_instantiate_std__string


#define soap_new_ns1__Max140Text soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__Max140Text(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns1__Max140Text(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__Max140Text(soap, p, "ns1:Max140Text", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__Max140Text(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__Max140Text(soap, p, "ns1:Max140Text", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__Max140Text(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__Max140Text(soap, p, "ns1:Max140Text", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__Max140Text(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__Max140Text(soap, p, "ns1:Max140Text", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns1__Max140Text(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns1__Max140Text(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__Max140Text(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__Max140Text(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__Max140Text(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__Max140Text(struct soap *soap, std::string *p)
{
	if (::soap_read_ns1__Max140Text(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__Max128Text_DEFINED
#define SOAP_TYPE_ns1__Max128Text_DEFINED

inline void soap_default_ns1__Max128Text(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__Max128Text(struct soap*, const std::string *);

#define soap_ns1__Max128Text2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Max128Text(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns1__Max128Text(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 1, 128, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns1__Max128Text(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns1__Max128Text soap_instantiate_std__string


#define soap_new_ns1__Max128Text soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__Max128Text(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns1__Max128Text(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__Max128Text(soap, p, "ns1:Max128Text", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__Max128Text(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__Max128Text(soap, p, "ns1:Max128Text", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__Max128Text(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__Max128Text(soap, p, "ns1:Max128Text", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__Max128Text(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__Max128Text(soap, p, "ns1:Max128Text", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns1__Max128Text(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns1__Max128Text(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__Max128Text(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__Max128Text(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__Max128Text(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__Max128Text(struct soap *soap, std::string *p)
{
	if (::soap_read_ns1__Max128Text(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__Max10Text_DEFINED
#define SOAP_TYPE_ns1__Max10Text_DEFINED

inline void soap_default_ns1__Max10Text(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__Max10Text(struct soap*, const std::string *);

#define soap_ns1__Max10Text2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Max10Text(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns1__Max10Text(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 1, 10, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns1__Max10Text(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns1__Max10Text soap_instantiate_std__string


#define soap_new_ns1__Max10Text soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__Max10Text(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns1__Max10Text(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__Max10Text(soap, p, "ns1:Max10Text", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__Max10Text(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__Max10Text(soap, p, "ns1:Max10Text", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__Max10Text(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__Max10Text(soap, p, "ns1:Max10Text", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__Max10Text(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__Max10Text(soap, p, "ns1:Max10Text", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns1__Max10Text(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns1__Max10Text(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__Max10Text(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__Max10Text(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__Max10Text(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__Max10Text(struct soap *soap, std::string *p)
{
	if (::soap_read_ns1__Max10Text(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__Max10KBinary_DEFINED
#define SOAP_TYPE_ns1__Max10KBinary_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__Max10KBinary(struct soap*, xsd__base64Binary *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__Max10KBinary(struct soap*, const xsd__base64Binary *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Max10KBinary(struct soap*, const char*, int, const xsd__base64Binary *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__Max10KBinary2s(struct soap*, xsd__base64Binary);
SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_in_ns1__Max10KBinary(struct soap*, const char*, xsd__base64Binary *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__Max10KBinary(struct soap*, const char*, xsd__base64Binary *);

#define soap_instantiate_ns1__Max10KBinary soap_instantiate_xsd__base64Binary


#define soap_new_ns1__Max10KBinary soap_new_xsd__base64Binary


#define soap_new_req_ns1__Max10KBinary soap_new_req_xsd__base64Binary


#define soap_new_set_ns1__Max10KBinary soap_new_set_xsd__base64Binary

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__Max10KBinary(struct soap*, const xsd__base64Binary *, const char*, const char*);

inline int soap_write_ns1__Max10KBinary(struct soap *soap, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns1__Max10KBinary(soap, p), 0) || ::soap_put_ns1__Max10KBinary(soap, p, "ns1:Max10KBinary", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__Max10KBinary(struct soap *soap, const char *URL, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__Max10KBinary(soap, p), 0) || ::soap_put_ns1__Max10KBinary(soap, p, "ns1:Max10KBinary", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__Max10KBinary(struct soap *soap, const char *URL, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__Max10KBinary(soap, p), 0) || ::soap_put_ns1__Max10KBinary(soap, p, "ns1:Max10KBinary", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__Max10KBinary(struct soap *soap, const char *URL, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns1__Max10KBinary(soap, p), 0) || ::soap_put_ns1__Max10KBinary(soap, p, "ns1:Max10KBinary", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_get_ns1__Max10KBinary(struct soap*, xsd__base64Binary *, const char*, const char*);

inline int soap_read_ns1__Max10KBinary(struct soap *soap, xsd__base64Binary *p)
{
	if (p)
	{	::soap_default_ns1__Max10KBinary(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns1__Max10KBinary(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__Max10KBinary(struct soap *soap, const char *URL, xsd__base64Binary *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__Max10KBinary(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__Max10KBinary(struct soap *soap, xsd__base64Binary *p)
{
	if (::soap_read_ns1__Max10KBinary(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__LEIIdentifier_DEFINED
#define SOAP_TYPE_ns1__LEIIdentifier_DEFINED

inline void soap_default_ns1__LEIIdentifier(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__LEIIdentifier(struct soap*, const std::string *);

#define soap_ns1__LEIIdentifier2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__LEIIdentifier(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns1__LEIIdentifier(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, "[A-Z0-9]{18,18}[0-9]{2,2}")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns1__LEIIdentifier(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns1__LEIIdentifier soap_instantiate_std__string


#define soap_new_ns1__LEIIdentifier soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__LEIIdentifier(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns1__LEIIdentifier(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__LEIIdentifier(soap, p, "ns1:LEIIdentifier", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__LEIIdentifier(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__LEIIdentifier(soap, p, "ns1:LEIIdentifier", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__LEIIdentifier(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__LEIIdentifier(soap, p, "ns1:LEIIdentifier", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__LEIIdentifier(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__LEIIdentifier(soap, p, "ns1:LEIIdentifier", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns1__LEIIdentifier(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns1__LEIIdentifier(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__LEIIdentifier(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__LEIIdentifier(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__LEIIdentifier(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__LEIIdentifier(struct soap *soap, std::string *p)
{
	if (::soap_read_ns1__LEIIdentifier(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif
/* ns1__ISOYear is a typedef synonym of xsd__gYear */

#ifndef SOAP_TYPE_ns1__ISOYear_DEFINED
#define SOAP_TYPE_ns1__ISOYear_DEFINED

#define soap_default_ns1__ISOYear soap_default_xsd__gYear


#define soap_serialize_ns1__ISOYear soap_serialize_xsd__gYear


#define soap_ns1__ISOYear2s(soap, a) ((a).c_str())

#define soap_out_ns1__ISOYear soap_out_xsd__gYear


#define soap_s2ns1__ISOYear(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, "([-+]?\\d{4,})(Z|[-+]\\d{2}:\\d{2})?")

#define soap_in_ns1__ISOYear soap_in_xsd__gYear


#define soap_instantiate_ns1__ISOYear soap_instantiate_xsd__gYear


#define soap_new_ns1__ISOYear soap_new_xsd__gYear


#define soap_put_ns1__ISOYear soap_put_xsd__gYear


#define soap_write_ns1__ISOYear soap_write_xsd__gYear


#define soap_PUT_ns1__ISOYear soap_PUT_xsd__gYear


#define soap_PATCH_ns1__ISOYear soap_PATCH_xsd__gYear


#define soap_POST_send_ns1__ISOYear soap_POST_send_xsd__gYear


#define soap_get_ns1__ISOYear soap_get_xsd__gYear


#define soap_read_ns1__ISOYear soap_read_xsd__gYear


#define soap_GET_ns1__ISOYear soap_GET_xsd__gYear


#define soap_POST_recv_ns1__ISOYear soap_POST_recv_xsd__gYear

#endif
/* ns1__ISODate is a typedef synonym of xsd__date */

#ifndef SOAP_TYPE_ns1__ISODate_DEFINED
#define SOAP_TYPE_ns1__ISODate_DEFINED

#define soap_default_ns1__ISODate soap_default_xsd__date


#define soap_serialize_ns1__ISODate soap_serialize_xsd__date


#define soap_ns1__ISODate2s(soap, a) ((a).c_str())

#define soap_out_ns1__ISODate soap_out_xsd__date


#define soap_s2ns1__ISODate(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, "[-+]?\\d{4,}-\\d{2}-\\d{2}(Z|[-+]\\d{2}:\\d{2})?")

#define soap_in_ns1__ISODate soap_in_xsd__date


#define soap_instantiate_ns1__ISODate soap_instantiate_xsd__date


#define soap_new_ns1__ISODate soap_new_xsd__date


#define soap_put_ns1__ISODate soap_put_xsd__date


#define soap_write_ns1__ISODate soap_write_xsd__date


#define soap_PUT_ns1__ISODate soap_PUT_xsd__date


#define soap_PATCH_ns1__ISODate soap_PATCH_xsd__date


#define soap_POST_send_ns1__ISODate soap_POST_send_xsd__date


#define soap_get_ns1__ISODate soap_get_xsd__date


#define soap_read_ns1__ISODate soap_read_xsd__date


#define soap_GET_ns1__ISODate soap_GET_xsd__date


#define soap_POST_recv_ns1__ISODate soap_POST_recv_xsd__date

#endif

#ifndef SOAP_TYPE_ns1__IBAN2007Identifier_DEFINED
#define SOAP_TYPE_ns1__IBAN2007Identifier_DEFINED

inline void soap_default_ns1__IBAN2007Identifier(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__IBAN2007Identifier(struct soap*, const std::string *);

#define soap_ns1__IBAN2007Identifier2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__IBAN2007Identifier(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns1__IBAN2007Identifier(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, "[A-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns1__IBAN2007Identifier(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns1__IBAN2007Identifier soap_instantiate_std__string


#define soap_new_ns1__IBAN2007Identifier soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__IBAN2007Identifier(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns1__IBAN2007Identifier(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__IBAN2007Identifier(soap, p, "ns1:IBAN2007Identifier", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__IBAN2007Identifier(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__IBAN2007Identifier(soap, p, "ns1:IBAN2007Identifier", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__IBAN2007Identifier(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__IBAN2007Identifier(soap, p, "ns1:IBAN2007Identifier", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__IBAN2007Identifier(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__IBAN2007Identifier(soap, p, "ns1:IBAN2007Identifier", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns1__IBAN2007Identifier(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns1__IBAN2007Identifier(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__IBAN2007Identifier(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__IBAN2007Identifier(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__IBAN2007Identifier(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__IBAN2007Identifier(struct soap *soap, std::string *p)
{
	if (::soap_read_ns1__IBAN2007Identifier(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__ExternalTaxAmountType1Code_DEFINED
#define SOAP_TYPE_ns1__ExternalTaxAmountType1Code_DEFINED

inline void soap_default_ns1__ExternalTaxAmountType1Code(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__ExternalTaxAmountType1Code(struct soap*, const std::string *);

#define soap_ns1__ExternalTaxAmountType1Code2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ExternalTaxAmountType1Code(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns1__ExternalTaxAmountType1Code(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 1, 4, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns1__ExternalTaxAmountType1Code(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns1__ExternalTaxAmountType1Code soap_instantiate_std__string


#define soap_new_ns1__ExternalTaxAmountType1Code soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__ExternalTaxAmountType1Code(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns1__ExternalTaxAmountType1Code(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__ExternalTaxAmountType1Code(soap, p, "ns1:ExternalTaxAmountType1Code", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__ExternalTaxAmountType1Code(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ExternalTaxAmountType1Code(soap, p, "ns1:ExternalTaxAmountType1Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ExternalTaxAmountType1Code(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ExternalTaxAmountType1Code(soap, p, "ns1:ExternalTaxAmountType1Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ExternalTaxAmountType1Code(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ExternalTaxAmountType1Code(soap, p, "ns1:ExternalTaxAmountType1Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns1__ExternalTaxAmountType1Code(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns1__ExternalTaxAmountType1Code(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__ExternalTaxAmountType1Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ExternalTaxAmountType1Code(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ExternalTaxAmountType1Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__ExternalTaxAmountType1Code(struct soap *soap, std::string *p)
{
	if (::soap_read_ns1__ExternalTaxAmountType1Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__ExternalServiceLevel1Code_DEFINED
#define SOAP_TYPE_ns1__ExternalServiceLevel1Code_DEFINED

inline void soap_default_ns1__ExternalServiceLevel1Code(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__ExternalServiceLevel1Code(struct soap*, const std::string *);

#define soap_ns1__ExternalServiceLevel1Code2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ExternalServiceLevel1Code(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns1__ExternalServiceLevel1Code(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 1, 4, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns1__ExternalServiceLevel1Code(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns1__ExternalServiceLevel1Code soap_instantiate_std__string


#define soap_new_ns1__ExternalServiceLevel1Code soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__ExternalServiceLevel1Code(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns1__ExternalServiceLevel1Code(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__ExternalServiceLevel1Code(soap, p, "ns1:ExternalServiceLevel1Code", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__ExternalServiceLevel1Code(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ExternalServiceLevel1Code(soap, p, "ns1:ExternalServiceLevel1Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ExternalServiceLevel1Code(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ExternalServiceLevel1Code(soap, p, "ns1:ExternalServiceLevel1Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ExternalServiceLevel1Code(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ExternalServiceLevel1Code(soap, p, "ns1:ExternalServiceLevel1Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns1__ExternalServiceLevel1Code(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns1__ExternalServiceLevel1Code(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__ExternalServiceLevel1Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ExternalServiceLevel1Code(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ExternalServiceLevel1Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__ExternalServiceLevel1Code(struct soap *soap, std::string *p)
{
	if (::soap_read_ns1__ExternalServiceLevel1Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__ExternalPurpose1Code_DEFINED
#define SOAP_TYPE_ns1__ExternalPurpose1Code_DEFINED

inline void soap_default_ns1__ExternalPurpose1Code(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__ExternalPurpose1Code(struct soap*, const std::string *);

#define soap_ns1__ExternalPurpose1Code2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ExternalPurpose1Code(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns1__ExternalPurpose1Code(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 1, 4, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns1__ExternalPurpose1Code(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns1__ExternalPurpose1Code soap_instantiate_std__string


#define soap_new_ns1__ExternalPurpose1Code soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__ExternalPurpose1Code(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns1__ExternalPurpose1Code(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__ExternalPurpose1Code(soap, p, "ns1:ExternalPurpose1Code", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__ExternalPurpose1Code(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ExternalPurpose1Code(soap, p, "ns1:ExternalPurpose1Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ExternalPurpose1Code(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ExternalPurpose1Code(soap, p, "ns1:ExternalPurpose1Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ExternalPurpose1Code(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ExternalPurpose1Code(soap, p, "ns1:ExternalPurpose1Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns1__ExternalPurpose1Code(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns1__ExternalPurpose1Code(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__ExternalPurpose1Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ExternalPurpose1Code(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ExternalPurpose1Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__ExternalPurpose1Code(struct soap *soap, std::string *p)
{
	if (::soap_read_ns1__ExternalPurpose1Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__ExternalProxyAccountType1Code_DEFINED
#define SOAP_TYPE_ns1__ExternalProxyAccountType1Code_DEFINED

inline void soap_default_ns1__ExternalProxyAccountType1Code(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__ExternalProxyAccountType1Code(struct soap*, const std::string *);

#define soap_ns1__ExternalProxyAccountType1Code2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ExternalProxyAccountType1Code(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns1__ExternalProxyAccountType1Code(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 1, 4, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns1__ExternalProxyAccountType1Code(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns1__ExternalProxyAccountType1Code soap_instantiate_std__string


#define soap_new_ns1__ExternalProxyAccountType1Code soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__ExternalProxyAccountType1Code(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns1__ExternalProxyAccountType1Code(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__ExternalProxyAccountType1Code(soap, p, "ns1:ExternalProxyAccountType1Code", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__ExternalProxyAccountType1Code(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ExternalProxyAccountType1Code(soap, p, "ns1:ExternalProxyAccountType1Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ExternalProxyAccountType1Code(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ExternalProxyAccountType1Code(soap, p, "ns1:ExternalProxyAccountType1Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ExternalProxyAccountType1Code(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ExternalProxyAccountType1Code(soap, p, "ns1:ExternalProxyAccountType1Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns1__ExternalProxyAccountType1Code(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns1__ExternalProxyAccountType1Code(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__ExternalProxyAccountType1Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ExternalProxyAccountType1Code(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ExternalProxyAccountType1Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__ExternalProxyAccountType1Code(struct soap *soap, std::string *p)
{
	if (::soap_read_ns1__ExternalProxyAccountType1Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__ExternalPersonIdentification1Code_DEFINED
#define SOAP_TYPE_ns1__ExternalPersonIdentification1Code_DEFINED

inline void soap_default_ns1__ExternalPersonIdentification1Code(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__ExternalPersonIdentification1Code(struct soap*, const std::string *);

#define soap_ns1__ExternalPersonIdentification1Code2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ExternalPersonIdentification1Code(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns1__ExternalPersonIdentification1Code(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 1, 4, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns1__ExternalPersonIdentification1Code(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns1__ExternalPersonIdentification1Code soap_instantiate_std__string


#define soap_new_ns1__ExternalPersonIdentification1Code soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__ExternalPersonIdentification1Code(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns1__ExternalPersonIdentification1Code(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__ExternalPersonIdentification1Code(soap, p, "ns1:ExternalPersonIdentification1Code", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__ExternalPersonIdentification1Code(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ExternalPersonIdentification1Code(soap, p, "ns1:ExternalPersonIdentification1Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ExternalPersonIdentification1Code(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ExternalPersonIdentification1Code(soap, p, "ns1:ExternalPersonIdentification1Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ExternalPersonIdentification1Code(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ExternalPersonIdentification1Code(soap, p, "ns1:ExternalPersonIdentification1Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns1__ExternalPersonIdentification1Code(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns1__ExternalPersonIdentification1Code(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__ExternalPersonIdentification1Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ExternalPersonIdentification1Code(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ExternalPersonIdentification1Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__ExternalPersonIdentification1Code(struct soap *soap, std::string *p)
{
	if (::soap_read_ns1__ExternalPersonIdentification1Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__ExternalOrganisationIdentification1Code_DEFINED
#define SOAP_TYPE_ns1__ExternalOrganisationIdentification1Code_DEFINED

inline void soap_default_ns1__ExternalOrganisationIdentification1Code(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__ExternalOrganisationIdentification1Code(struct soap*, const std::string *);

#define soap_ns1__ExternalOrganisationIdentification1Code2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ExternalOrganisationIdentification1Code(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns1__ExternalOrganisationIdentification1Code(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 1, 4, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns1__ExternalOrganisationIdentification1Code(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns1__ExternalOrganisationIdentification1Code soap_instantiate_std__string


#define soap_new_ns1__ExternalOrganisationIdentification1Code soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__ExternalOrganisationIdentification1Code(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns1__ExternalOrganisationIdentification1Code(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__ExternalOrganisationIdentification1Code(soap, p, "ns1:ExternalOrganisationIdentification1Code", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__ExternalOrganisationIdentification1Code(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ExternalOrganisationIdentification1Code(soap, p, "ns1:ExternalOrganisationIdentification1Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ExternalOrganisationIdentification1Code(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ExternalOrganisationIdentification1Code(soap, p, "ns1:ExternalOrganisationIdentification1Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ExternalOrganisationIdentification1Code(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ExternalOrganisationIdentification1Code(soap, p, "ns1:ExternalOrganisationIdentification1Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns1__ExternalOrganisationIdentification1Code(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns1__ExternalOrganisationIdentification1Code(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__ExternalOrganisationIdentification1Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ExternalOrganisationIdentification1Code(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ExternalOrganisationIdentification1Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__ExternalOrganisationIdentification1Code(struct soap *soap, std::string *p)
{
	if (::soap_read_ns1__ExternalOrganisationIdentification1Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__ExternalMandateSetupReason1Code_DEFINED
#define SOAP_TYPE_ns1__ExternalMandateSetupReason1Code_DEFINED

inline void soap_default_ns1__ExternalMandateSetupReason1Code(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__ExternalMandateSetupReason1Code(struct soap*, const std::string *);

#define soap_ns1__ExternalMandateSetupReason1Code2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ExternalMandateSetupReason1Code(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns1__ExternalMandateSetupReason1Code(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 1, 4, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns1__ExternalMandateSetupReason1Code(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns1__ExternalMandateSetupReason1Code soap_instantiate_std__string


#define soap_new_ns1__ExternalMandateSetupReason1Code soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__ExternalMandateSetupReason1Code(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns1__ExternalMandateSetupReason1Code(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__ExternalMandateSetupReason1Code(soap, p, "ns1:ExternalMandateSetupReason1Code", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__ExternalMandateSetupReason1Code(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ExternalMandateSetupReason1Code(soap, p, "ns1:ExternalMandateSetupReason1Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ExternalMandateSetupReason1Code(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ExternalMandateSetupReason1Code(soap, p, "ns1:ExternalMandateSetupReason1Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ExternalMandateSetupReason1Code(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ExternalMandateSetupReason1Code(soap, p, "ns1:ExternalMandateSetupReason1Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns1__ExternalMandateSetupReason1Code(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns1__ExternalMandateSetupReason1Code(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__ExternalMandateSetupReason1Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ExternalMandateSetupReason1Code(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ExternalMandateSetupReason1Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__ExternalMandateSetupReason1Code(struct soap *soap, std::string *p)
{
	if (::soap_read_ns1__ExternalMandateSetupReason1Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__ExternalLocalInstrument1Code_DEFINED
#define SOAP_TYPE_ns1__ExternalLocalInstrument1Code_DEFINED

inline void soap_default_ns1__ExternalLocalInstrument1Code(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__ExternalLocalInstrument1Code(struct soap*, const std::string *);

#define soap_ns1__ExternalLocalInstrument1Code2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ExternalLocalInstrument1Code(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns1__ExternalLocalInstrument1Code(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 1, 35, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns1__ExternalLocalInstrument1Code(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns1__ExternalLocalInstrument1Code soap_instantiate_std__string


#define soap_new_ns1__ExternalLocalInstrument1Code soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__ExternalLocalInstrument1Code(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns1__ExternalLocalInstrument1Code(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__ExternalLocalInstrument1Code(soap, p, "ns1:ExternalLocalInstrument1Code", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__ExternalLocalInstrument1Code(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ExternalLocalInstrument1Code(soap, p, "ns1:ExternalLocalInstrument1Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ExternalLocalInstrument1Code(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ExternalLocalInstrument1Code(soap, p, "ns1:ExternalLocalInstrument1Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ExternalLocalInstrument1Code(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ExternalLocalInstrument1Code(soap, p, "ns1:ExternalLocalInstrument1Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns1__ExternalLocalInstrument1Code(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns1__ExternalLocalInstrument1Code(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__ExternalLocalInstrument1Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ExternalLocalInstrument1Code(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ExternalLocalInstrument1Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__ExternalLocalInstrument1Code(struct soap *soap, std::string *p)
{
	if (::soap_read_ns1__ExternalLocalInstrument1Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__ExternalGarnishmentType1Code_DEFINED
#define SOAP_TYPE_ns1__ExternalGarnishmentType1Code_DEFINED

inline void soap_default_ns1__ExternalGarnishmentType1Code(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__ExternalGarnishmentType1Code(struct soap*, const std::string *);

#define soap_ns1__ExternalGarnishmentType1Code2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ExternalGarnishmentType1Code(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns1__ExternalGarnishmentType1Code(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 1, 4, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns1__ExternalGarnishmentType1Code(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns1__ExternalGarnishmentType1Code soap_instantiate_std__string


#define soap_new_ns1__ExternalGarnishmentType1Code soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__ExternalGarnishmentType1Code(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns1__ExternalGarnishmentType1Code(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__ExternalGarnishmentType1Code(soap, p, "ns1:ExternalGarnishmentType1Code", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__ExternalGarnishmentType1Code(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ExternalGarnishmentType1Code(soap, p, "ns1:ExternalGarnishmentType1Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ExternalGarnishmentType1Code(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ExternalGarnishmentType1Code(soap, p, "ns1:ExternalGarnishmentType1Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ExternalGarnishmentType1Code(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ExternalGarnishmentType1Code(soap, p, "ns1:ExternalGarnishmentType1Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns1__ExternalGarnishmentType1Code(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns1__ExternalGarnishmentType1Code(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__ExternalGarnishmentType1Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ExternalGarnishmentType1Code(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ExternalGarnishmentType1Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__ExternalGarnishmentType1Code(struct soap *soap, std::string *p)
{
	if (::soap_read_ns1__ExternalGarnishmentType1Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__ExternalFinancialInstitutionIdentification1Code_DEFINED
#define SOAP_TYPE_ns1__ExternalFinancialInstitutionIdentification1Code_DEFINED

inline void soap_default_ns1__ExternalFinancialInstitutionIdentification1Code(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__ExternalFinancialInstitutionIdentification1Code(struct soap*, const std::string *);

#define soap_ns1__ExternalFinancialInstitutionIdentification1Code2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ExternalFinancialInstitutionIdentification1Code(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns1__ExternalFinancialInstitutionIdentification1Code(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 1, 4, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns1__ExternalFinancialInstitutionIdentification1Code(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns1__ExternalFinancialInstitutionIdentification1Code soap_instantiate_std__string


#define soap_new_ns1__ExternalFinancialInstitutionIdentification1Code soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__ExternalFinancialInstitutionIdentification1Code(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns1__ExternalFinancialInstitutionIdentification1Code(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__ExternalFinancialInstitutionIdentification1Code(soap, p, "ns1:ExternalFinancialInstitutionIdentification1Code", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__ExternalFinancialInstitutionIdentification1Code(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ExternalFinancialInstitutionIdentification1Code(soap, p, "ns1:ExternalFinancialInstitutionIdentification1Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ExternalFinancialInstitutionIdentification1Code(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ExternalFinancialInstitutionIdentification1Code(soap, p, "ns1:ExternalFinancialInstitutionIdentification1Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ExternalFinancialInstitutionIdentification1Code(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ExternalFinancialInstitutionIdentification1Code(soap, p, "ns1:ExternalFinancialInstitutionIdentification1Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns1__ExternalFinancialInstitutionIdentification1Code(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns1__ExternalFinancialInstitutionIdentification1Code(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__ExternalFinancialInstitutionIdentification1Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ExternalFinancialInstitutionIdentification1Code(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ExternalFinancialInstitutionIdentification1Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__ExternalFinancialInstitutionIdentification1Code(struct soap *soap, std::string *p)
{
	if (::soap_read_ns1__ExternalFinancialInstitutionIdentification1Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__ExternalDocumentLineType1Code_DEFINED
#define SOAP_TYPE_ns1__ExternalDocumentLineType1Code_DEFINED

inline void soap_default_ns1__ExternalDocumentLineType1Code(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__ExternalDocumentLineType1Code(struct soap*, const std::string *);

#define soap_ns1__ExternalDocumentLineType1Code2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ExternalDocumentLineType1Code(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns1__ExternalDocumentLineType1Code(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 1, 4, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns1__ExternalDocumentLineType1Code(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns1__ExternalDocumentLineType1Code soap_instantiate_std__string


#define soap_new_ns1__ExternalDocumentLineType1Code soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__ExternalDocumentLineType1Code(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns1__ExternalDocumentLineType1Code(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__ExternalDocumentLineType1Code(soap, p, "ns1:ExternalDocumentLineType1Code", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__ExternalDocumentLineType1Code(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ExternalDocumentLineType1Code(soap, p, "ns1:ExternalDocumentLineType1Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ExternalDocumentLineType1Code(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ExternalDocumentLineType1Code(soap, p, "ns1:ExternalDocumentLineType1Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ExternalDocumentLineType1Code(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ExternalDocumentLineType1Code(soap, p, "ns1:ExternalDocumentLineType1Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns1__ExternalDocumentLineType1Code(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns1__ExternalDocumentLineType1Code(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__ExternalDocumentLineType1Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ExternalDocumentLineType1Code(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ExternalDocumentLineType1Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__ExternalDocumentLineType1Code(struct soap *soap, std::string *p)
{
	if (::soap_read_ns1__ExternalDocumentLineType1Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__ExternalDiscountAmountType1Code_DEFINED
#define SOAP_TYPE_ns1__ExternalDiscountAmountType1Code_DEFINED

inline void soap_default_ns1__ExternalDiscountAmountType1Code(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__ExternalDiscountAmountType1Code(struct soap*, const std::string *);

#define soap_ns1__ExternalDiscountAmountType1Code2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ExternalDiscountAmountType1Code(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns1__ExternalDiscountAmountType1Code(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 1, 4, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns1__ExternalDiscountAmountType1Code(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns1__ExternalDiscountAmountType1Code soap_instantiate_std__string


#define soap_new_ns1__ExternalDiscountAmountType1Code soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__ExternalDiscountAmountType1Code(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns1__ExternalDiscountAmountType1Code(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__ExternalDiscountAmountType1Code(soap, p, "ns1:ExternalDiscountAmountType1Code", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__ExternalDiscountAmountType1Code(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ExternalDiscountAmountType1Code(soap, p, "ns1:ExternalDiscountAmountType1Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ExternalDiscountAmountType1Code(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ExternalDiscountAmountType1Code(soap, p, "ns1:ExternalDiscountAmountType1Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ExternalDiscountAmountType1Code(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ExternalDiscountAmountType1Code(soap, p, "ns1:ExternalDiscountAmountType1Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns1__ExternalDiscountAmountType1Code(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns1__ExternalDiscountAmountType1Code(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__ExternalDiscountAmountType1Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ExternalDiscountAmountType1Code(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ExternalDiscountAmountType1Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__ExternalDiscountAmountType1Code(struct soap *soap, std::string *p)
{
	if (::soap_read_ns1__ExternalDiscountAmountType1Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__ExternalDebtorAgentInstruction1Code_DEFINED
#define SOAP_TYPE_ns1__ExternalDebtorAgentInstruction1Code_DEFINED

inline void soap_default_ns1__ExternalDebtorAgentInstruction1Code(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__ExternalDebtorAgentInstruction1Code(struct soap*, const std::string *);

#define soap_ns1__ExternalDebtorAgentInstruction1Code2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ExternalDebtorAgentInstruction1Code(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns1__ExternalDebtorAgentInstruction1Code(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 1, 4, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns1__ExternalDebtorAgentInstruction1Code(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns1__ExternalDebtorAgentInstruction1Code soap_instantiate_std__string


#define soap_new_ns1__ExternalDebtorAgentInstruction1Code soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__ExternalDebtorAgentInstruction1Code(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns1__ExternalDebtorAgentInstruction1Code(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__ExternalDebtorAgentInstruction1Code(soap, p, "ns1:ExternalDebtorAgentInstruction1Code", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__ExternalDebtorAgentInstruction1Code(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ExternalDebtorAgentInstruction1Code(soap, p, "ns1:ExternalDebtorAgentInstruction1Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ExternalDebtorAgentInstruction1Code(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ExternalDebtorAgentInstruction1Code(soap, p, "ns1:ExternalDebtorAgentInstruction1Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ExternalDebtorAgentInstruction1Code(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ExternalDebtorAgentInstruction1Code(soap, p, "ns1:ExternalDebtorAgentInstruction1Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns1__ExternalDebtorAgentInstruction1Code(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns1__ExternalDebtorAgentInstruction1Code(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__ExternalDebtorAgentInstruction1Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ExternalDebtorAgentInstruction1Code(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ExternalDebtorAgentInstruction1Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__ExternalDebtorAgentInstruction1Code(struct soap *soap, std::string *p)
{
	if (::soap_read_ns1__ExternalDebtorAgentInstruction1Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__ExternalCreditorAgentInstruction1Code_DEFINED
#define SOAP_TYPE_ns1__ExternalCreditorAgentInstruction1Code_DEFINED

inline void soap_default_ns1__ExternalCreditorAgentInstruction1Code(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__ExternalCreditorAgentInstruction1Code(struct soap*, const std::string *);

#define soap_ns1__ExternalCreditorAgentInstruction1Code2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ExternalCreditorAgentInstruction1Code(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns1__ExternalCreditorAgentInstruction1Code(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 1, 4, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns1__ExternalCreditorAgentInstruction1Code(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns1__ExternalCreditorAgentInstruction1Code soap_instantiate_std__string


#define soap_new_ns1__ExternalCreditorAgentInstruction1Code soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__ExternalCreditorAgentInstruction1Code(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns1__ExternalCreditorAgentInstruction1Code(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__ExternalCreditorAgentInstruction1Code(soap, p, "ns1:ExternalCreditorAgentInstruction1Code", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__ExternalCreditorAgentInstruction1Code(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ExternalCreditorAgentInstruction1Code(soap, p, "ns1:ExternalCreditorAgentInstruction1Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ExternalCreditorAgentInstruction1Code(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ExternalCreditorAgentInstruction1Code(soap, p, "ns1:ExternalCreditorAgentInstruction1Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ExternalCreditorAgentInstruction1Code(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ExternalCreditorAgentInstruction1Code(soap, p, "ns1:ExternalCreditorAgentInstruction1Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns1__ExternalCreditorAgentInstruction1Code(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns1__ExternalCreditorAgentInstruction1Code(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__ExternalCreditorAgentInstruction1Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ExternalCreditorAgentInstruction1Code(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ExternalCreditorAgentInstruction1Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__ExternalCreditorAgentInstruction1Code(struct soap *soap, std::string *p)
{
	if (::soap_read_ns1__ExternalCreditorAgentInstruction1Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__ExternalClearingSystemIdentification1Code_DEFINED
#define SOAP_TYPE_ns1__ExternalClearingSystemIdentification1Code_DEFINED

inline void soap_default_ns1__ExternalClearingSystemIdentification1Code(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__ExternalClearingSystemIdentification1Code(struct soap*, const std::string *);

#define soap_ns1__ExternalClearingSystemIdentification1Code2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ExternalClearingSystemIdentification1Code(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns1__ExternalClearingSystemIdentification1Code(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 1, 5, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns1__ExternalClearingSystemIdentification1Code(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns1__ExternalClearingSystemIdentification1Code soap_instantiate_std__string


#define soap_new_ns1__ExternalClearingSystemIdentification1Code soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__ExternalClearingSystemIdentification1Code(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns1__ExternalClearingSystemIdentification1Code(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__ExternalClearingSystemIdentification1Code(soap, p, "ns1:ExternalClearingSystemIdentification1Code", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__ExternalClearingSystemIdentification1Code(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ExternalClearingSystemIdentification1Code(soap, p, "ns1:ExternalClearingSystemIdentification1Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ExternalClearingSystemIdentification1Code(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ExternalClearingSystemIdentification1Code(soap, p, "ns1:ExternalClearingSystemIdentification1Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ExternalClearingSystemIdentification1Code(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ExternalClearingSystemIdentification1Code(soap, p, "ns1:ExternalClearingSystemIdentification1Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns1__ExternalClearingSystemIdentification1Code(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns1__ExternalClearingSystemIdentification1Code(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__ExternalClearingSystemIdentification1Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ExternalClearingSystemIdentification1Code(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ExternalClearingSystemIdentification1Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__ExternalClearingSystemIdentification1Code(struct soap *soap, std::string *p)
{
	if (::soap_read_ns1__ExternalClearingSystemIdentification1Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__ExternalCategoryPurpose1Code_DEFINED
#define SOAP_TYPE_ns1__ExternalCategoryPurpose1Code_DEFINED

inline void soap_default_ns1__ExternalCategoryPurpose1Code(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__ExternalCategoryPurpose1Code(struct soap*, const std::string *);

#define soap_ns1__ExternalCategoryPurpose1Code2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ExternalCategoryPurpose1Code(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns1__ExternalCategoryPurpose1Code(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 1, 4, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns1__ExternalCategoryPurpose1Code(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns1__ExternalCategoryPurpose1Code soap_instantiate_std__string


#define soap_new_ns1__ExternalCategoryPurpose1Code soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__ExternalCategoryPurpose1Code(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns1__ExternalCategoryPurpose1Code(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__ExternalCategoryPurpose1Code(soap, p, "ns1:ExternalCategoryPurpose1Code", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__ExternalCategoryPurpose1Code(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ExternalCategoryPurpose1Code(soap, p, "ns1:ExternalCategoryPurpose1Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ExternalCategoryPurpose1Code(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ExternalCategoryPurpose1Code(soap, p, "ns1:ExternalCategoryPurpose1Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ExternalCategoryPurpose1Code(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ExternalCategoryPurpose1Code(soap, p, "ns1:ExternalCategoryPurpose1Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns1__ExternalCategoryPurpose1Code(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns1__ExternalCategoryPurpose1Code(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__ExternalCategoryPurpose1Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ExternalCategoryPurpose1Code(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ExternalCategoryPurpose1Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__ExternalCategoryPurpose1Code(struct soap *soap, std::string *p)
{
	if (::soap_read_ns1__ExternalCategoryPurpose1Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__ExternalCashAccountType1Code_DEFINED
#define SOAP_TYPE_ns1__ExternalCashAccountType1Code_DEFINED

inline void soap_default_ns1__ExternalCashAccountType1Code(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__ExternalCashAccountType1Code(struct soap*, const std::string *);

#define soap_ns1__ExternalCashAccountType1Code2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ExternalCashAccountType1Code(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns1__ExternalCashAccountType1Code(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 1, 4, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns1__ExternalCashAccountType1Code(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns1__ExternalCashAccountType1Code soap_instantiate_std__string


#define soap_new_ns1__ExternalCashAccountType1Code soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__ExternalCashAccountType1Code(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns1__ExternalCashAccountType1Code(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__ExternalCashAccountType1Code(soap, p, "ns1:ExternalCashAccountType1Code", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__ExternalCashAccountType1Code(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ExternalCashAccountType1Code(soap, p, "ns1:ExternalCashAccountType1Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ExternalCashAccountType1Code(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ExternalCashAccountType1Code(soap, p, "ns1:ExternalCashAccountType1Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ExternalCashAccountType1Code(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ExternalCashAccountType1Code(soap, p, "ns1:ExternalCashAccountType1Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns1__ExternalCashAccountType1Code(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns1__ExternalCashAccountType1Code(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__ExternalCashAccountType1Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ExternalCashAccountType1Code(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ExternalCashAccountType1Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__ExternalCashAccountType1Code(struct soap *soap, std::string *p)
{
	if (::soap_read_ns1__ExternalCashAccountType1Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__ExternalAccountIdentification1Code_DEFINED
#define SOAP_TYPE_ns1__ExternalAccountIdentification1Code_DEFINED

inline void soap_default_ns1__ExternalAccountIdentification1Code(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__ExternalAccountIdentification1Code(struct soap*, const std::string *);

#define soap_ns1__ExternalAccountIdentification1Code2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ExternalAccountIdentification1Code(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns1__ExternalAccountIdentification1Code(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 1, 4, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns1__ExternalAccountIdentification1Code(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns1__ExternalAccountIdentification1Code soap_instantiate_std__string


#define soap_new_ns1__ExternalAccountIdentification1Code soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__ExternalAccountIdentification1Code(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns1__ExternalAccountIdentification1Code(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__ExternalAccountIdentification1Code(soap, p, "ns1:ExternalAccountIdentification1Code", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__ExternalAccountIdentification1Code(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ExternalAccountIdentification1Code(soap, p, "ns1:ExternalAccountIdentification1Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ExternalAccountIdentification1Code(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ExternalAccountIdentification1Code(soap, p, "ns1:ExternalAccountIdentification1Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ExternalAccountIdentification1Code(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ExternalAccountIdentification1Code(soap, p, "ns1:ExternalAccountIdentification1Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns1__ExternalAccountIdentification1Code(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns1__ExternalAccountIdentification1Code(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__ExternalAccountIdentification1Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ExternalAccountIdentification1Code(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ExternalAccountIdentification1Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__ExternalAccountIdentification1Code(struct soap *soap, std::string *p)
{
	if (::soap_read_ns1__ExternalAccountIdentification1Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__Exact4AlphaNumericText_DEFINED
#define SOAP_TYPE_ns1__Exact4AlphaNumericText_DEFINED

inline void soap_default_ns1__Exact4AlphaNumericText(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__Exact4AlphaNumericText(struct soap*, const std::string *);

#define soap_ns1__Exact4AlphaNumericText2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Exact4AlphaNumericText(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns1__Exact4AlphaNumericText(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, "[a-zA-Z0-9]{4}")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns1__Exact4AlphaNumericText(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns1__Exact4AlphaNumericText soap_instantiate_std__string


#define soap_new_ns1__Exact4AlphaNumericText soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__Exact4AlphaNumericText(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns1__Exact4AlphaNumericText(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__Exact4AlphaNumericText(soap, p, "ns1:Exact4AlphaNumericText", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__Exact4AlphaNumericText(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__Exact4AlphaNumericText(soap, p, "ns1:Exact4AlphaNumericText", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__Exact4AlphaNumericText(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__Exact4AlphaNumericText(soap, p, "ns1:Exact4AlphaNumericText", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__Exact4AlphaNumericText(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__Exact4AlphaNumericText(soap, p, "ns1:Exact4AlphaNumericText", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns1__Exact4AlphaNumericText(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns1__Exact4AlphaNumericText(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__Exact4AlphaNumericText(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__Exact4AlphaNumericText(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__Exact4AlphaNumericText(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__Exact4AlphaNumericText(struct soap *soap, std::string *p)
{
	if (::soap_read_ns1__Exact4AlphaNumericText(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__Exact2NumericText_DEFINED
#define SOAP_TYPE_ns1__Exact2NumericText_DEFINED

inline void soap_default_ns1__Exact2NumericText(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__Exact2NumericText(struct soap*, const std::string *);

#define soap_ns1__Exact2NumericText2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Exact2NumericText(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns1__Exact2NumericText(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, "[0-9]{2}")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns1__Exact2NumericText(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns1__Exact2NumericText soap_instantiate_std__string


#define soap_new_ns1__Exact2NumericText soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__Exact2NumericText(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns1__Exact2NumericText(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__Exact2NumericText(soap, p, "ns1:Exact2NumericText", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__Exact2NumericText(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__Exact2NumericText(soap, p, "ns1:Exact2NumericText", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__Exact2NumericText(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__Exact2NumericText(soap, p, "ns1:Exact2NumericText", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__Exact2NumericText(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__Exact2NumericText(soap, p, "ns1:Exact2NumericText", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns1__Exact2NumericText(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns1__Exact2NumericText(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__Exact2NumericText(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__Exact2NumericText(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__Exact2NumericText(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__Exact2NumericText(struct soap *soap, std::string *p)
{
	if (::soap_read_ns1__Exact2NumericText(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif
/* ns1__DecimalNumber is a typedef synonym of xsd__decimal */

#ifndef SOAP_TYPE_ns1__DecimalNumber_DEFINED
#define SOAP_TYPE_ns1__DecimalNumber_DEFINED

#define soap_default_ns1__DecimalNumber soap_default_xsd__decimal


#define soap_serialize_ns1__DecimalNumber soap_serialize_xsd__decimal


#define soap_ns1__DecimalNumber2s(soap, a) ((a).c_str())

#define soap_out_ns1__DecimalNumber soap_out_xsd__decimal


#define soap_s2ns1__DecimalNumber(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, "[-+]?(\\d+|\\d*\\.\\d*)")

#define soap_in_ns1__DecimalNumber soap_in_xsd__decimal


#define soap_instantiate_ns1__DecimalNumber soap_instantiate_xsd__decimal


#define soap_new_ns1__DecimalNumber soap_new_xsd__decimal


#define soap_put_ns1__DecimalNumber soap_put_xsd__decimal


#define soap_write_ns1__DecimalNumber soap_write_xsd__decimal


#define soap_PUT_ns1__DecimalNumber soap_PUT_xsd__decimal


#define soap_PATCH_ns1__DecimalNumber soap_PATCH_xsd__decimal


#define soap_POST_send_ns1__DecimalNumber soap_POST_send_xsd__decimal


#define soap_get_ns1__DecimalNumber soap_get_xsd__decimal


#define soap_read_ns1__DecimalNumber soap_read_xsd__decimal


#define soap_GET_ns1__DecimalNumber soap_GET_xsd__decimal


#define soap_POST_recv_ns1__DecimalNumber soap_POST_recv_xsd__decimal

#endif

#ifndef SOAP_TYPE_ns1__CountryCode_DEFINED
#define SOAP_TYPE_ns1__CountryCode_DEFINED

inline void soap_default_ns1__CountryCode(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__CountryCode(struct soap*, const std::string *);

#define soap_ns1__CountryCode2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CountryCode(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns1__CountryCode(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, "[A-Z]{2,2}")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns1__CountryCode(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns1__CountryCode soap_instantiate_std__string


#define soap_new_ns1__CountryCode soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__CountryCode(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns1__CountryCode(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__CountryCode(soap, p, "ns1:CountryCode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__CountryCode(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__CountryCode(soap, p, "ns1:CountryCode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__CountryCode(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__CountryCode(soap, p, "ns1:CountryCode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__CountryCode(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__CountryCode(soap, p, "ns1:CountryCode", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns1__CountryCode(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns1__CountryCode(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__CountryCode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__CountryCode(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__CountryCode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__CountryCode(struct soap *soap, std::string *p)
{
	if (::soap_read_ns1__CountryCode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif
/* ns1__BaseOneRate is a typedef synonym of xsd__decimal */

#ifndef SOAP_TYPE_ns1__BaseOneRate_DEFINED
#define SOAP_TYPE_ns1__BaseOneRate_DEFINED

#define soap_default_ns1__BaseOneRate soap_default_xsd__decimal


#define soap_serialize_ns1__BaseOneRate soap_serialize_xsd__decimal


#define soap_ns1__BaseOneRate2s(soap, a) ((a).c_str())

#define soap_out_ns1__BaseOneRate soap_out_xsd__decimal


#define soap_s2ns1__BaseOneRate(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, "[-+]?(\\d+|\\d*\\.\\d*)")

#define soap_in_ns1__BaseOneRate soap_in_xsd__decimal


#define soap_instantiate_ns1__BaseOneRate soap_instantiate_xsd__decimal


#define soap_new_ns1__BaseOneRate soap_new_xsd__decimal


#define soap_put_ns1__BaseOneRate soap_put_xsd__decimal


#define soap_write_ns1__BaseOneRate soap_write_xsd__decimal


#define soap_PUT_ns1__BaseOneRate soap_PUT_xsd__decimal


#define soap_PATCH_ns1__BaseOneRate soap_PATCH_xsd__decimal


#define soap_POST_send_ns1__BaseOneRate soap_POST_send_xsd__decimal


#define soap_get_ns1__BaseOneRate soap_get_xsd__decimal


#define soap_read_ns1__BaseOneRate soap_read_xsd__decimal


#define soap_GET_ns1__BaseOneRate soap_GET_xsd__decimal


#define soap_POST_recv_ns1__BaseOneRate soap_POST_recv_xsd__decimal

#endif

#ifndef SOAP_TYPE_ns1__BICFIDec2014Identifier_DEFINED
#define SOAP_TYPE_ns1__BICFIDec2014Identifier_DEFINED

inline void soap_default_ns1__BICFIDec2014Identifier(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__BICFIDec2014Identifier(struct soap*, const std::string *);

#define soap_ns1__BICFIDec2014Identifier2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__BICFIDec2014Identifier(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns1__BICFIDec2014Identifier(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, "[A-Z0-9]{4,4}[A-Z]{2,2}[A-Z0-9]{2,2}([A-Z0-9]{3,3}){0,1}")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns1__BICFIDec2014Identifier(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns1__BICFIDec2014Identifier soap_instantiate_std__string


#define soap_new_ns1__BICFIDec2014Identifier soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__BICFIDec2014Identifier(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns1__BICFIDec2014Identifier(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__BICFIDec2014Identifier(soap, p, "ns1:BICFIDec2014Identifier", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__BICFIDec2014Identifier(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__BICFIDec2014Identifier(soap, p, "ns1:BICFIDec2014Identifier", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__BICFIDec2014Identifier(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__BICFIDec2014Identifier(soap, p, "ns1:BICFIDec2014Identifier", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__BICFIDec2014Identifier(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__BICFIDec2014Identifier(soap, p, "ns1:BICFIDec2014Identifier", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns1__BICFIDec2014Identifier(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns1__BICFIDec2014Identifier(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__BICFIDec2014Identifier(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__BICFIDec2014Identifier(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__BICFIDec2014Identifier(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__BICFIDec2014Identifier(struct soap *soap, std::string *p)
{
	if (::soap_read_ns1__BICFIDec2014Identifier(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__AnyBICDec2014Identifier_DEFINED
#define SOAP_TYPE_ns1__AnyBICDec2014Identifier_DEFINED

inline void soap_default_ns1__AnyBICDec2014Identifier(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__AnyBICDec2014Identifier(struct soap*, const std::string *);

#define soap_ns1__AnyBICDec2014Identifier2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AnyBICDec2014Identifier(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns1__AnyBICDec2014Identifier(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, "[A-Z0-9]{4,4}[A-Z]{2,2}[A-Z0-9]{2,2}([A-Z0-9]{3,3}){0,1}")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns1__AnyBICDec2014Identifier(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns1__AnyBICDec2014Identifier soap_instantiate_std__string


#define soap_new_ns1__AnyBICDec2014Identifier soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__AnyBICDec2014Identifier(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns1__AnyBICDec2014Identifier(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__AnyBICDec2014Identifier(soap, p, "ns1:AnyBICDec2014Identifier", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__AnyBICDec2014Identifier(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__AnyBICDec2014Identifier(soap, p, "ns1:AnyBICDec2014Identifier", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__AnyBICDec2014Identifier(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__AnyBICDec2014Identifier(soap, p, "ns1:AnyBICDec2014Identifier", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__AnyBICDec2014Identifier(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__AnyBICDec2014Identifier(soap, p, "ns1:AnyBICDec2014Identifier", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns1__AnyBICDec2014Identifier(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns1__AnyBICDec2014Identifier(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__AnyBICDec2014Identifier(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__AnyBICDec2014Identifier(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__AnyBICDec2014Identifier(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__AnyBICDec2014Identifier(struct soap *soap, std::string *p)
{
	if (::soap_read_ns1__AnyBICDec2014Identifier(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__ActiveOrHistoricCurrencyCode_DEFINED
#define SOAP_TYPE_ns1__ActiveOrHistoricCurrencyCode_DEFINED

inline void soap_default_ns1__ActiveOrHistoricCurrencyCode(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__ActiveOrHistoricCurrencyCode(struct soap*, const std::string *);

#define soap_ns1__ActiveOrHistoricCurrencyCode2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ActiveOrHistoricCurrencyCode(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2ns1__ActiveOrHistoricCurrencyCode(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, "[A-Z]{3,3}")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns1__ActiveOrHistoricCurrencyCode(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_ns1__ActiveOrHistoricCurrencyCode soap_instantiate_std__string


#define soap_new_ns1__ActiveOrHistoricCurrencyCode soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__ActiveOrHistoricCurrencyCode(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_ns1__ActiveOrHistoricCurrencyCode(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns1__ActiveOrHistoricCurrencyCode(soap, p, "ns1:ActiveOrHistoricCurrencyCode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__ActiveOrHistoricCurrencyCode(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ActiveOrHistoricCurrencyCode(soap, p, "ns1:ActiveOrHistoricCurrencyCode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ActiveOrHistoricCurrencyCode(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ActiveOrHistoricCurrencyCode(soap, p, "ns1:ActiveOrHistoricCurrencyCode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ActiveOrHistoricCurrencyCode(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns1__ActiveOrHistoricCurrencyCode(soap, p, "ns1:ActiveOrHistoricCurrencyCode", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns1__ActiveOrHistoricCurrencyCode(struct soap*, std::string *, const char*, const char*);

inline int soap_read_ns1__ActiveOrHistoricCurrencyCode(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns1__ActiveOrHistoricCurrencyCode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ActiveOrHistoricCurrencyCode(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ActiveOrHistoricCurrencyCode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__ActiveOrHistoricCurrencyCode(struct soap *soap, std::string *p)
{
	if (::soap_read_ns1__ActiveOrHistoricCurrencyCode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif
/* ns1__ActiveOrHistoricCurrencyAndAmount_USCORESimpleType is a typedef synonym of xsd__decimal */

#ifndef SOAP_TYPE_ns1__ActiveOrHistoricCurrencyAndAmount_USCORESimpleType_DEFINED
#define SOAP_TYPE_ns1__ActiveOrHistoricCurrencyAndAmount_USCORESimpleType_DEFINED

#define soap_default_ns1__ActiveOrHistoricCurrencyAndAmount_USCORESimpleType soap_default_xsd__decimal


#define soap_serialize_ns1__ActiveOrHistoricCurrencyAndAmount_USCORESimpleType soap_serialize_xsd__decimal


#define soap_ns1__ActiveOrHistoricCurrencyAndAmount_USCORESimpleType2s(soap, a) ((a).c_str())

#define soap_out_ns1__ActiveOrHistoricCurrencyAndAmount_USCORESimpleType soap_out_xsd__decimal


#define soap_s2ns1__ActiveOrHistoricCurrencyAndAmount_USCORESimpleType(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, "[-+]?(\\d+|\\d*\\.\\d*)")

#define soap_in_ns1__ActiveOrHistoricCurrencyAndAmount_USCORESimpleType soap_in_xsd__decimal


#define soap_instantiate_ns1__ActiveOrHistoricCurrencyAndAmount_USCORESimpleType soap_instantiate_xsd__decimal


#define soap_new_ns1__ActiveOrHistoricCurrencyAndAmount_USCORESimpleType soap_new_xsd__decimal


#define soap_put_ns1__ActiveOrHistoricCurrencyAndAmount_USCORESimpleType soap_put_xsd__decimal


#define soap_write_ns1__ActiveOrHistoricCurrencyAndAmount_USCORESimpleType soap_write_xsd__decimal


#define soap_PUT_ns1__ActiveOrHistoricCurrencyAndAmount_USCORESimpleType soap_PUT_xsd__decimal


#define soap_PATCH_ns1__ActiveOrHistoricCurrencyAndAmount_USCORESimpleType soap_PATCH_xsd__decimal


#define soap_POST_send_ns1__ActiveOrHistoricCurrencyAndAmount_USCORESimpleType soap_POST_send_xsd__decimal


#define soap_get_ns1__ActiveOrHistoricCurrencyAndAmount_USCORESimpleType soap_get_xsd__decimal


#define soap_read_ns1__ActiveOrHistoricCurrencyAndAmount_USCORESimpleType soap_read_xsd__decimal


#define soap_GET_ns1__ActiveOrHistoricCurrencyAndAmount_USCORESimpleType soap_GET_xsd__decimal


#define soap_POST_recv_ns1__ActiveOrHistoricCurrencyAndAmount_USCORESimpleType soap_POST_recv_xsd__decimal

#endif

#ifndef SOAP_TYPE_ns1__TaxRecordDetails3_DEFINED
#define SOAP_TYPE_ns1__TaxRecordDetails3_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__TaxRecordDetails3(struct soap*, const char*, int, const ns1__TaxRecordDetails3 *, const char*);
SOAP_FMAC3 ns1__TaxRecordDetails3 * SOAP_FMAC4 soap_in_ns1__TaxRecordDetails3(struct soap*, const char*, ns1__TaxRecordDetails3 *, const char*);
SOAP_FMAC1 ns1__TaxRecordDetails3 * SOAP_FMAC2 soap_instantiate_ns1__TaxRecordDetails3(struct soap*, int, const char*, const char*, size_t*);

inline ns1__TaxRecordDetails3 * soap_new_ns1__TaxRecordDetails3(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__TaxRecordDetails3(soap, n, NULL, NULL, NULL);
}

inline ns1__TaxRecordDetails3 * soap_new_req_ns1__TaxRecordDetails3(
	struct soap *soap,
	ns1__ActiveOrHistoricCurrencyAndAmount *Amt)
{
	ns1__TaxRecordDetails3 *_p = ::soap_new_ns1__TaxRecordDetails3(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__TaxRecordDetails3::Amt = Amt;
	}
	return _p;
}

inline ns1__TaxRecordDetails3 * soap_new_set_ns1__TaxRecordDetails3(
	struct soap *soap,
	ns1__TaxPeriod3 *Prd,
	ns1__ActiveOrHistoricCurrencyAndAmount *Amt)
{
	ns1__TaxRecordDetails3 *_p = ::soap_new_ns1__TaxRecordDetails3(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__TaxRecordDetails3::Prd = Prd;
		_p->ns1__TaxRecordDetails3::Amt = Amt;
	}
	return _p;
}

inline int soap_write_ns1__TaxRecordDetails3(struct soap *soap, ns1__TaxRecordDetails3 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TaxRecordDetails3", p->soap_type() == SOAP_TYPE_ns1__TaxRecordDetails3 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__TaxRecordDetails3(struct soap *soap, const char *URL, ns1__TaxRecordDetails3 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TaxRecordDetails3", p->soap_type() == SOAP_TYPE_ns1__TaxRecordDetails3 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__TaxRecordDetails3(struct soap *soap, const char *URL, ns1__TaxRecordDetails3 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TaxRecordDetails3", p->soap_type() == SOAP_TYPE_ns1__TaxRecordDetails3 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__TaxRecordDetails3(struct soap *soap, const char *URL, ns1__TaxRecordDetails3 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TaxRecordDetails3", p->soap_type() == SOAP_TYPE_ns1__TaxRecordDetails3 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__TaxRecordDetails3 * SOAP_FMAC4 soap_get_ns1__TaxRecordDetails3(struct soap*, ns1__TaxRecordDetails3 *, const char*, const char*);

inline int soap_read_ns1__TaxRecordDetails3(struct soap *soap, ns1__TaxRecordDetails3 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__TaxRecordDetails3(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__TaxRecordDetails3(struct soap *soap, const char *URL, ns1__TaxRecordDetails3 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__TaxRecordDetails3(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__TaxRecordDetails3(struct soap *soap, ns1__TaxRecordDetails3 *p)
{
	if (::soap_read_ns1__TaxRecordDetails3(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__TaxRecord3_DEFINED
#define SOAP_TYPE_ns1__TaxRecord3_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__TaxRecord3(struct soap*, const char*, int, const ns1__TaxRecord3 *, const char*);
SOAP_FMAC3 ns1__TaxRecord3 * SOAP_FMAC4 soap_in_ns1__TaxRecord3(struct soap*, const char*, ns1__TaxRecord3 *, const char*);
SOAP_FMAC1 ns1__TaxRecord3 * SOAP_FMAC2 soap_instantiate_ns1__TaxRecord3(struct soap*, int, const char*, const char*, size_t*);

inline ns1__TaxRecord3 * soap_new_ns1__TaxRecord3(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__TaxRecord3(soap, n, NULL, NULL, NULL);
}

inline ns1__TaxRecord3 * soap_new_req_ns1__TaxRecord3(
	struct soap *soap)
{
	ns1__TaxRecord3 *_p = ::soap_new_ns1__TaxRecord3(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__TaxRecord3 * soap_new_set_ns1__TaxRecord3(
	struct soap *soap,
	std::string *Tp,
	std::string *Ctgy,
	std::string *CtgyDtls,
	std::string *DbtrSts,
	std::string *CertId,
	std::string *FrmsCd,
	ns1__TaxPeriod3 *Prd,
	ns1__TaxAmount3 *TaxAmt,
	std::string *AddtlInf)
{
	ns1__TaxRecord3 *_p = ::soap_new_ns1__TaxRecord3(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__TaxRecord3::Tp = Tp;
		_p->ns1__TaxRecord3::Ctgy = Ctgy;
		_p->ns1__TaxRecord3::CtgyDtls = CtgyDtls;
		_p->ns1__TaxRecord3::DbtrSts = DbtrSts;
		_p->ns1__TaxRecord3::CertId = CertId;
		_p->ns1__TaxRecord3::FrmsCd = FrmsCd;
		_p->ns1__TaxRecord3::Prd = Prd;
		_p->ns1__TaxRecord3::TaxAmt = TaxAmt;
		_p->ns1__TaxRecord3::AddtlInf = AddtlInf;
	}
	return _p;
}

inline int soap_write_ns1__TaxRecord3(struct soap *soap, ns1__TaxRecord3 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TaxRecord3", p->soap_type() == SOAP_TYPE_ns1__TaxRecord3 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__TaxRecord3(struct soap *soap, const char *URL, ns1__TaxRecord3 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TaxRecord3", p->soap_type() == SOAP_TYPE_ns1__TaxRecord3 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__TaxRecord3(struct soap *soap, const char *URL, ns1__TaxRecord3 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TaxRecord3", p->soap_type() == SOAP_TYPE_ns1__TaxRecord3 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__TaxRecord3(struct soap *soap, const char *URL, ns1__TaxRecord3 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TaxRecord3", p->soap_type() == SOAP_TYPE_ns1__TaxRecord3 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__TaxRecord3 * SOAP_FMAC4 soap_get_ns1__TaxRecord3(struct soap*, ns1__TaxRecord3 *, const char*, const char*);

inline int soap_read_ns1__TaxRecord3(struct soap *soap, ns1__TaxRecord3 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__TaxRecord3(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__TaxRecord3(struct soap *soap, const char *URL, ns1__TaxRecord3 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__TaxRecord3(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__TaxRecord3(struct soap *soap, ns1__TaxRecord3 *p)
{
	if (::soap_read_ns1__TaxRecord3(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__TaxPeriod3_DEFINED
#define SOAP_TYPE_ns1__TaxPeriod3_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__TaxPeriod3(struct soap*, const char*, int, const ns1__TaxPeriod3 *, const char*);
SOAP_FMAC3 ns1__TaxPeriod3 * SOAP_FMAC4 soap_in_ns1__TaxPeriod3(struct soap*, const char*, ns1__TaxPeriod3 *, const char*);
SOAP_FMAC1 ns1__TaxPeriod3 * SOAP_FMAC2 soap_instantiate_ns1__TaxPeriod3(struct soap*, int, const char*, const char*, size_t*);

inline ns1__TaxPeriod3 * soap_new_ns1__TaxPeriod3(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__TaxPeriod3(soap, n, NULL, NULL, NULL);
}

inline ns1__TaxPeriod3 * soap_new_req_ns1__TaxPeriod3(
	struct soap *soap)
{
	ns1__TaxPeriod3 *_p = ::soap_new_ns1__TaxPeriod3(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__TaxPeriod3 * soap_new_set_ns1__TaxPeriod3(
	struct soap *soap,
	std::string *Yr,
	enum ns1__TaxRecordPeriod1Code *Tp,
	ns1__DatePeriod2 *FrToDt)
{
	ns1__TaxPeriod3 *_p = ::soap_new_ns1__TaxPeriod3(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__TaxPeriod3::Yr = Yr;
		_p->ns1__TaxPeriod3::Tp = Tp;
		_p->ns1__TaxPeriod3::FrToDt = FrToDt;
	}
	return _p;
}

inline int soap_write_ns1__TaxPeriod3(struct soap *soap, ns1__TaxPeriod3 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TaxPeriod3", p->soap_type() == SOAP_TYPE_ns1__TaxPeriod3 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__TaxPeriod3(struct soap *soap, const char *URL, ns1__TaxPeriod3 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TaxPeriod3", p->soap_type() == SOAP_TYPE_ns1__TaxPeriod3 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__TaxPeriod3(struct soap *soap, const char *URL, ns1__TaxPeriod3 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TaxPeriod3", p->soap_type() == SOAP_TYPE_ns1__TaxPeriod3 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__TaxPeriod3(struct soap *soap, const char *URL, ns1__TaxPeriod3 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TaxPeriod3", p->soap_type() == SOAP_TYPE_ns1__TaxPeriod3 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__TaxPeriod3 * SOAP_FMAC4 soap_get_ns1__TaxPeriod3(struct soap*, ns1__TaxPeriod3 *, const char*, const char*);

inline int soap_read_ns1__TaxPeriod3(struct soap *soap, ns1__TaxPeriod3 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__TaxPeriod3(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__TaxPeriod3(struct soap *soap, const char *URL, ns1__TaxPeriod3 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__TaxPeriod3(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__TaxPeriod3(struct soap *soap, ns1__TaxPeriod3 *p)
{
	if (::soap_read_ns1__TaxPeriod3(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__TaxParty2_DEFINED
#define SOAP_TYPE_ns1__TaxParty2_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__TaxParty2(struct soap*, const char*, int, const ns1__TaxParty2 *, const char*);
SOAP_FMAC3 ns1__TaxParty2 * SOAP_FMAC4 soap_in_ns1__TaxParty2(struct soap*, const char*, ns1__TaxParty2 *, const char*);
SOAP_FMAC1 ns1__TaxParty2 * SOAP_FMAC2 soap_instantiate_ns1__TaxParty2(struct soap*, int, const char*, const char*, size_t*);

inline ns1__TaxParty2 * soap_new_ns1__TaxParty2(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__TaxParty2(soap, n, NULL, NULL, NULL);
}

inline ns1__TaxParty2 * soap_new_req_ns1__TaxParty2(
	struct soap *soap)
{
	ns1__TaxParty2 *_p = ::soap_new_ns1__TaxParty2(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__TaxParty2 * soap_new_set_ns1__TaxParty2(
	struct soap *soap,
	std::string *TaxId,
	std::string *RegnId,
	std::string *TaxTp,
	ns1__TaxAuthorisation1 *Authstn)
{
	ns1__TaxParty2 *_p = ::soap_new_ns1__TaxParty2(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__TaxParty2::TaxId = TaxId;
		_p->ns1__TaxParty2::RegnId = RegnId;
		_p->ns1__TaxParty2::TaxTp = TaxTp;
		_p->ns1__TaxParty2::Authstn = Authstn;
	}
	return _p;
}

inline int soap_write_ns1__TaxParty2(struct soap *soap, ns1__TaxParty2 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TaxParty2", p->soap_type() == SOAP_TYPE_ns1__TaxParty2 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__TaxParty2(struct soap *soap, const char *URL, ns1__TaxParty2 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TaxParty2", p->soap_type() == SOAP_TYPE_ns1__TaxParty2 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__TaxParty2(struct soap *soap, const char *URL, ns1__TaxParty2 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TaxParty2", p->soap_type() == SOAP_TYPE_ns1__TaxParty2 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__TaxParty2(struct soap *soap, const char *URL, ns1__TaxParty2 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TaxParty2", p->soap_type() == SOAP_TYPE_ns1__TaxParty2 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__TaxParty2 * SOAP_FMAC4 soap_get_ns1__TaxParty2(struct soap*, ns1__TaxParty2 *, const char*, const char*);

inline int soap_read_ns1__TaxParty2(struct soap *soap, ns1__TaxParty2 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__TaxParty2(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__TaxParty2(struct soap *soap, const char *URL, ns1__TaxParty2 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__TaxParty2(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__TaxParty2(struct soap *soap, ns1__TaxParty2 *p)
{
	if (::soap_read_ns1__TaxParty2(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__TaxParty1_DEFINED
#define SOAP_TYPE_ns1__TaxParty1_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__TaxParty1(struct soap*, const char*, int, const ns1__TaxParty1 *, const char*);
SOAP_FMAC3 ns1__TaxParty1 * SOAP_FMAC4 soap_in_ns1__TaxParty1(struct soap*, const char*, ns1__TaxParty1 *, const char*);
SOAP_FMAC1 ns1__TaxParty1 * SOAP_FMAC2 soap_instantiate_ns1__TaxParty1(struct soap*, int, const char*, const char*, size_t*);

inline ns1__TaxParty1 * soap_new_ns1__TaxParty1(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__TaxParty1(soap, n, NULL, NULL, NULL);
}

inline ns1__TaxParty1 * soap_new_req_ns1__TaxParty1(
	struct soap *soap)
{
	ns1__TaxParty1 *_p = ::soap_new_ns1__TaxParty1(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__TaxParty1 * soap_new_set_ns1__TaxParty1(
	struct soap *soap,
	std::string *TaxId,
	std::string *RegnId,
	std::string *TaxTp)
{
	ns1__TaxParty1 *_p = ::soap_new_ns1__TaxParty1(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__TaxParty1::TaxId = TaxId;
		_p->ns1__TaxParty1::RegnId = RegnId;
		_p->ns1__TaxParty1::TaxTp = TaxTp;
	}
	return _p;
}

inline int soap_write_ns1__TaxParty1(struct soap *soap, ns1__TaxParty1 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TaxParty1", p->soap_type() == SOAP_TYPE_ns1__TaxParty1 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__TaxParty1(struct soap *soap, const char *URL, ns1__TaxParty1 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TaxParty1", p->soap_type() == SOAP_TYPE_ns1__TaxParty1 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__TaxParty1(struct soap *soap, const char *URL, ns1__TaxParty1 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TaxParty1", p->soap_type() == SOAP_TYPE_ns1__TaxParty1 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__TaxParty1(struct soap *soap, const char *URL, ns1__TaxParty1 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TaxParty1", p->soap_type() == SOAP_TYPE_ns1__TaxParty1 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__TaxParty1 * SOAP_FMAC4 soap_get_ns1__TaxParty1(struct soap*, ns1__TaxParty1 *, const char*, const char*);

inline int soap_read_ns1__TaxParty1(struct soap *soap, ns1__TaxParty1 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__TaxParty1(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__TaxParty1(struct soap *soap, const char *URL, ns1__TaxParty1 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__TaxParty1(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__TaxParty1(struct soap *soap, ns1__TaxParty1 *p)
{
	if (::soap_read_ns1__TaxParty1(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__TaxInformation10_DEFINED
#define SOAP_TYPE_ns1__TaxInformation10_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__TaxInformation10(struct soap*, const char*, int, const ns1__TaxInformation10 *, const char*);
SOAP_FMAC3 ns1__TaxInformation10 * SOAP_FMAC4 soap_in_ns1__TaxInformation10(struct soap*, const char*, ns1__TaxInformation10 *, const char*);
SOAP_FMAC1 ns1__TaxInformation10 * SOAP_FMAC2 soap_instantiate_ns1__TaxInformation10(struct soap*, int, const char*, const char*, size_t*);

inline ns1__TaxInformation10 * soap_new_ns1__TaxInformation10(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__TaxInformation10(soap, n, NULL, NULL, NULL);
}

inline ns1__TaxInformation10 * soap_new_req_ns1__TaxInformation10(
	struct soap *soap)
{
	ns1__TaxInformation10 *_p = ::soap_new_ns1__TaxInformation10(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__TaxInformation10 * soap_new_set_ns1__TaxInformation10(
	struct soap *soap,
	ns1__TaxParty1 *Cdtr,
	ns1__TaxParty2 *Dbtr,
	std::string *AdmstnZone,
	std::string *RefNb,
	std::string *Mtd,
	ns1__ActiveOrHistoricCurrencyAndAmount *TtlTaxblBaseAmt,
	ns1__ActiveOrHistoricCurrencyAndAmount *TtlTaxAmt,
	std::string *Dt,
	std::string *SeqNb,
	const std::vector<ns1__TaxRecord3 *> & Rcrd)
{
	ns1__TaxInformation10 *_p = ::soap_new_ns1__TaxInformation10(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__TaxInformation10::Cdtr = Cdtr;
		_p->ns1__TaxInformation10::Dbtr = Dbtr;
		_p->ns1__TaxInformation10::AdmstnZone = AdmstnZone;
		_p->ns1__TaxInformation10::RefNb = RefNb;
		_p->ns1__TaxInformation10::Mtd = Mtd;
		_p->ns1__TaxInformation10::TtlTaxblBaseAmt = TtlTaxblBaseAmt;
		_p->ns1__TaxInformation10::TtlTaxAmt = TtlTaxAmt;
		_p->ns1__TaxInformation10::Dt = Dt;
		_p->ns1__TaxInformation10::SeqNb = SeqNb;
		_p->ns1__TaxInformation10::Rcrd = Rcrd;
	}
	return _p;
}

inline int soap_write_ns1__TaxInformation10(struct soap *soap, ns1__TaxInformation10 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TaxInformation10", p->soap_type() == SOAP_TYPE_ns1__TaxInformation10 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__TaxInformation10(struct soap *soap, const char *URL, ns1__TaxInformation10 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TaxInformation10", p->soap_type() == SOAP_TYPE_ns1__TaxInformation10 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__TaxInformation10(struct soap *soap, const char *URL, ns1__TaxInformation10 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TaxInformation10", p->soap_type() == SOAP_TYPE_ns1__TaxInformation10 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__TaxInformation10(struct soap *soap, const char *URL, ns1__TaxInformation10 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TaxInformation10", p->soap_type() == SOAP_TYPE_ns1__TaxInformation10 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__TaxInformation10 * SOAP_FMAC4 soap_get_ns1__TaxInformation10(struct soap*, ns1__TaxInformation10 *, const char*, const char*);

inline int soap_read_ns1__TaxInformation10(struct soap *soap, ns1__TaxInformation10 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__TaxInformation10(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__TaxInformation10(struct soap *soap, const char *URL, ns1__TaxInformation10 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__TaxInformation10(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__TaxInformation10(struct soap *soap, ns1__TaxInformation10 *p)
{
	if (::soap_read_ns1__TaxInformation10(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__TaxData1_DEFINED
#define SOAP_TYPE_ns1__TaxData1_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__TaxData1(struct soap*, const char*, int, const ns1__TaxData1 *, const char*);
SOAP_FMAC3 ns1__TaxData1 * SOAP_FMAC4 soap_in_ns1__TaxData1(struct soap*, const char*, ns1__TaxData1 *, const char*);
SOAP_FMAC1 ns1__TaxData1 * SOAP_FMAC2 soap_instantiate_ns1__TaxData1(struct soap*, int, const char*, const char*, size_t*);

inline ns1__TaxData1 * soap_new_ns1__TaxData1(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__TaxData1(soap, n, NULL, NULL, NULL);
}

inline ns1__TaxData1 * soap_new_req_ns1__TaxData1(
	struct soap *soap)
{
	ns1__TaxData1 *_p = ::soap_new_ns1__TaxData1(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__TaxData1 * soap_new_set_ns1__TaxData1(
	struct soap *soap,
	ns1__TaxParty1 *Cdtr,
	ns1__TaxParty2 *Dbtr,
	ns1__TaxParty2 *UltmtDbtr,
	std::string *AdmstnZone,
	std::string *RefNb,
	std::string *Mtd,
	ns1__ActiveOrHistoricCurrencyAndAmount *TtlTaxblBaseAmt,
	ns1__ActiveOrHistoricCurrencyAndAmount *TtlTaxAmt,
	std::string *Dt,
	std::string *SeqNb,
	const std::vector<ns1__TaxRecord3 *> & Rcrd)
{
	ns1__TaxData1 *_p = ::soap_new_ns1__TaxData1(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__TaxData1::Cdtr = Cdtr;
		_p->ns1__TaxData1::Dbtr = Dbtr;
		_p->ns1__TaxData1::UltmtDbtr = UltmtDbtr;
		_p->ns1__TaxData1::AdmstnZone = AdmstnZone;
		_p->ns1__TaxData1::RefNb = RefNb;
		_p->ns1__TaxData1::Mtd = Mtd;
		_p->ns1__TaxData1::TtlTaxblBaseAmt = TtlTaxblBaseAmt;
		_p->ns1__TaxData1::TtlTaxAmt = TtlTaxAmt;
		_p->ns1__TaxData1::Dt = Dt;
		_p->ns1__TaxData1::SeqNb = SeqNb;
		_p->ns1__TaxData1::Rcrd = Rcrd;
	}
	return _p;
}

inline int soap_write_ns1__TaxData1(struct soap *soap, ns1__TaxData1 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TaxData1", p->soap_type() == SOAP_TYPE_ns1__TaxData1 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__TaxData1(struct soap *soap, const char *URL, ns1__TaxData1 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TaxData1", p->soap_type() == SOAP_TYPE_ns1__TaxData1 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__TaxData1(struct soap *soap, const char *URL, ns1__TaxData1 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TaxData1", p->soap_type() == SOAP_TYPE_ns1__TaxData1 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__TaxData1(struct soap *soap, const char *URL, ns1__TaxData1 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TaxData1", p->soap_type() == SOAP_TYPE_ns1__TaxData1 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__TaxData1 * SOAP_FMAC4 soap_get_ns1__TaxData1(struct soap*, ns1__TaxData1 *, const char*, const char*);

inline int soap_read_ns1__TaxData1(struct soap *soap, ns1__TaxData1 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__TaxData1(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__TaxData1(struct soap *soap, const char *URL, ns1__TaxData1 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__TaxData1(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__TaxData1(struct soap *soap, ns1__TaxData1 *p)
{
	if (::soap_read_ns1__TaxData1(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__TaxAuthorisation1_DEFINED
#define SOAP_TYPE_ns1__TaxAuthorisation1_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__TaxAuthorisation1(struct soap*, const char*, int, const ns1__TaxAuthorisation1 *, const char*);
SOAP_FMAC3 ns1__TaxAuthorisation1 * SOAP_FMAC4 soap_in_ns1__TaxAuthorisation1(struct soap*, const char*, ns1__TaxAuthorisation1 *, const char*);
SOAP_FMAC1 ns1__TaxAuthorisation1 * SOAP_FMAC2 soap_instantiate_ns1__TaxAuthorisation1(struct soap*, int, const char*, const char*, size_t*);

inline ns1__TaxAuthorisation1 * soap_new_ns1__TaxAuthorisation1(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__TaxAuthorisation1(soap, n, NULL, NULL, NULL);
}

inline ns1__TaxAuthorisation1 * soap_new_req_ns1__TaxAuthorisation1(
	struct soap *soap)
{
	ns1__TaxAuthorisation1 *_p = ::soap_new_ns1__TaxAuthorisation1(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__TaxAuthorisation1 * soap_new_set_ns1__TaxAuthorisation1(
	struct soap *soap,
	std::string *Titl,
	std::string *Nm)
{
	ns1__TaxAuthorisation1 *_p = ::soap_new_ns1__TaxAuthorisation1(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__TaxAuthorisation1::Titl = Titl;
		_p->ns1__TaxAuthorisation1::Nm = Nm;
	}
	return _p;
}

inline int soap_write_ns1__TaxAuthorisation1(struct soap *soap, ns1__TaxAuthorisation1 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TaxAuthorisation1", p->soap_type() == SOAP_TYPE_ns1__TaxAuthorisation1 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__TaxAuthorisation1(struct soap *soap, const char *URL, ns1__TaxAuthorisation1 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TaxAuthorisation1", p->soap_type() == SOAP_TYPE_ns1__TaxAuthorisation1 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__TaxAuthorisation1(struct soap *soap, const char *URL, ns1__TaxAuthorisation1 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TaxAuthorisation1", p->soap_type() == SOAP_TYPE_ns1__TaxAuthorisation1 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__TaxAuthorisation1(struct soap *soap, const char *URL, ns1__TaxAuthorisation1 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TaxAuthorisation1", p->soap_type() == SOAP_TYPE_ns1__TaxAuthorisation1 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__TaxAuthorisation1 * SOAP_FMAC4 soap_get_ns1__TaxAuthorisation1(struct soap*, ns1__TaxAuthorisation1 *, const char*, const char*);

inline int soap_read_ns1__TaxAuthorisation1(struct soap *soap, ns1__TaxAuthorisation1 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__TaxAuthorisation1(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__TaxAuthorisation1(struct soap *soap, const char *URL, ns1__TaxAuthorisation1 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__TaxAuthorisation1(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__TaxAuthorisation1(struct soap *soap, ns1__TaxAuthorisation1 *p)
{
	if (::soap_read_ns1__TaxAuthorisation1(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__TaxAmountType1Choice_DEFINED
#define SOAP_TYPE_ns1__TaxAmountType1Choice_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__TaxAmountType1Choice(struct soap*, const char*, int, const ns1__TaxAmountType1Choice *, const char*);
SOAP_FMAC3 ns1__TaxAmountType1Choice * SOAP_FMAC4 soap_in_ns1__TaxAmountType1Choice(struct soap*, const char*, ns1__TaxAmountType1Choice *, const char*);
SOAP_FMAC1 ns1__TaxAmountType1Choice * SOAP_FMAC2 soap_instantiate_ns1__TaxAmountType1Choice(struct soap*, int, const char*, const char*, size_t*);

inline ns1__TaxAmountType1Choice * soap_new_ns1__TaxAmountType1Choice(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__TaxAmountType1Choice(soap, n, NULL, NULL, NULL);
}

inline ns1__TaxAmountType1Choice * soap_new_req_ns1__TaxAmountType1Choice(
	struct soap *soap,
	const union _ns1__union_TaxAmountType1Choice& union_TaxAmountType1Choice)
{
	ns1__TaxAmountType1Choice *_p = ::soap_new_ns1__TaxAmountType1Choice(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__TaxAmountType1Choice::union_TaxAmountType1Choice = union_TaxAmountType1Choice;
	}
	return _p;
}

inline ns1__TaxAmountType1Choice * soap_new_set_ns1__TaxAmountType1Choice(
	struct soap *soap,
	int __union_TaxAmountType1Choice,
	const union _ns1__union_TaxAmountType1Choice& union_TaxAmountType1Choice)
{
	ns1__TaxAmountType1Choice *_p = ::soap_new_ns1__TaxAmountType1Choice(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__TaxAmountType1Choice::__union_TaxAmountType1Choice = __union_TaxAmountType1Choice;
		_p->ns1__TaxAmountType1Choice::union_TaxAmountType1Choice = union_TaxAmountType1Choice;
	}
	return _p;
}

inline int soap_write_ns1__TaxAmountType1Choice(struct soap *soap, ns1__TaxAmountType1Choice const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TaxAmountType1Choice", p->soap_type() == SOAP_TYPE_ns1__TaxAmountType1Choice ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__TaxAmountType1Choice(struct soap *soap, const char *URL, ns1__TaxAmountType1Choice const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TaxAmountType1Choice", p->soap_type() == SOAP_TYPE_ns1__TaxAmountType1Choice ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__TaxAmountType1Choice(struct soap *soap, const char *URL, ns1__TaxAmountType1Choice const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TaxAmountType1Choice", p->soap_type() == SOAP_TYPE_ns1__TaxAmountType1Choice ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__TaxAmountType1Choice(struct soap *soap, const char *URL, ns1__TaxAmountType1Choice const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TaxAmountType1Choice", p->soap_type() == SOAP_TYPE_ns1__TaxAmountType1Choice ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__TaxAmountType1Choice * SOAP_FMAC4 soap_get_ns1__TaxAmountType1Choice(struct soap*, ns1__TaxAmountType1Choice *, const char*, const char*);

inline int soap_read_ns1__TaxAmountType1Choice(struct soap *soap, ns1__TaxAmountType1Choice *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__TaxAmountType1Choice(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__TaxAmountType1Choice(struct soap *soap, const char *URL, ns1__TaxAmountType1Choice *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__TaxAmountType1Choice(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__TaxAmountType1Choice(struct soap *soap, ns1__TaxAmountType1Choice *p)
{
	if (::soap_read_ns1__TaxAmountType1Choice(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__TaxAmountAndType1_DEFINED
#define SOAP_TYPE_ns1__TaxAmountAndType1_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__TaxAmountAndType1(struct soap*, const char*, int, const ns1__TaxAmountAndType1 *, const char*);
SOAP_FMAC3 ns1__TaxAmountAndType1 * SOAP_FMAC4 soap_in_ns1__TaxAmountAndType1(struct soap*, const char*, ns1__TaxAmountAndType1 *, const char*);
SOAP_FMAC1 ns1__TaxAmountAndType1 * SOAP_FMAC2 soap_instantiate_ns1__TaxAmountAndType1(struct soap*, int, const char*, const char*, size_t*);

inline ns1__TaxAmountAndType1 * soap_new_ns1__TaxAmountAndType1(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__TaxAmountAndType1(soap, n, NULL, NULL, NULL);
}

inline ns1__TaxAmountAndType1 * soap_new_req_ns1__TaxAmountAndType1(
	struct soap *soap,
	ns1__ActiveOrHistoricCurrencyAndAmount *Amt)
{
	ns1__TaxAmountAndType1 *_p = ::soap_new_ns1__TaxAmountAndType1(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__TaxAmountAndType1::Amt = Amt;
	}
	return _p;
}

inline ns1__TaxAmountAndType1 * soap_new_set_ns1__TaxAmountAndType1(
	struct soap *soap,
	ns1__TaxAmountType1Choice *Tp,
	ns1__ActiveOrHistoricCurrencyAndAmount *Amt)
{
	ns1__TaxAmountAndType1 *_p = ::soap_new_ns1__TaxAmountAndType1(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__TaxAmountAndType1::Tp = Tp;
		_p->ns1__TaxAmountAndType1::Amt = Amt;
	}
	return _p;
}

inline int soap_write_ns1__TaxAmountAndType1(struct soap *soap, ns1__TaxAmountAndType1 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TaxAmountAndType1", p->soap_type() == SOAP_TYPE_ns1__TaxAmountAndType1 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__TaxAmountAndType1(struct soap *soap, const char *URL, ns1__TaxAmountAndType1 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TaxAmountAndType1", p->soap_type() == SOAP_TYPE_ns1__TaxAmountAndType1 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__TaxAmountAndType1(struct soap *soap, const char *URL, ns1__TaxAmountAndType1 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TaxAmountAndType1", p->soap_type() == SOAP_TYPE_ns1__TaxAmountAndType1 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__TaxAmountAndType1(struct soap *soap, const char *URL, ns1__TaxAmountAndType1 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TaxAmountAndType1", p->soap_type() == SOAP_TYPE_ns1__TaxAmountAndType1 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__TaxAmountAndType1 * SOAP_FMAC4 soap_get_ns1__TaxAmountAndType1(struct soap*, ns1__TaxAmountAndType1 *, const char*, const char*);

inline int soap_read_ns1__TaxAmountAndType1(struct soap *soap, ns1__TaxAmountAndType1 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__TaxAmountAndType1(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__TaxAmountAndType1(struct soap *soap, const char *URL, ns1__TaxAmountAndType1 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__TaxAmountAndType1(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__TaxAmountAndType1(struct soap *soap, ns1__TaxAmountAndType1 *p)
{
	if (::soap_read_ns1__TaxAmountAndType1(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__TaxAmount3_DEFINED
#define SOAP_TYPE_ns1__TaxAmount3_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__TaxAmount3(struct soap*, const char*, int, const ns1__TaxAmount3 *, const char*);
SOAP_FMAC3 ns1__TaxAmount3 * SOAP_FMAC4 soap_in_ns1__TaxAmount3(struct soap*, const char*, ns1__TaxAmount3 *, const char*);
SOAP_FMAC1 ns1__TaxAmount3 * SOAP_FMAC2 soap_instantiate_ns1__TaxAmount3(struct soap*, int, const char*, const char*, size_t*);

inline ns1__TaxAmount3 * soap_new_ns1__TaxAmount3(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__TaxAmount3(soap, n, NULL, NULL, NULL);
}

inline ns1__TaxAmount3 * soap_new_req_ns1__TaxAmount3(
	struct soap *soap)
{
	ns1__TaxAmount3 *_p = ::soap_new_ns1__TaxAmount3(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__TaxAmount3 * soap_new_set_ns1__TaxAmount3(
	struct soap *soap,
	std::string *Rate,
	ns1__ActiveOrHistoricCurrencyAndAmount *TaxblBaseAmt,
	ns1__ActiveOrHistoricCurrencyAndAmount *TtlAmt,
	const std::vector<ns1__TaxRecordDetails3 *> & Dtls)
{
	ns1__TaxAmount3 *_p = ::soap_new_ns1__TaxAmount3(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__TaxAmount3::Rate = Rate;
		_p->ns1__TaxAmount3::TaxblBaseAmt = TaxblBaseAmt;
		_p->ns1__TaxAmount3::TtlAmt = TtlAmt;
		_p->ns1__TaxAmount3::Dtls = Dtls;
	}
	return _p;
}

inline int soap_write_ns1__TaxAmount3(struct soap *soap, ns1__TaxAmount3 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TaxAmount3", p->soap_type() == SOAP_TYPE_ns1__TaxAmount3 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__TaxAmount3(struct soap *soap, const char *URL, ns1__TaxAmount3 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TaxAmount3", p->soap_type() == SOAP_TYPE_ns1__TaxAmount3 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__TaxAmount3(struct soap *soap, const char *URL, ns1__TaxAmount3 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TaxAmount3", p->soap_type() == SOAP_TYPE_ns1__TaxAmount3 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__TaxAmount3(struct soap *soap, const char *URL, ns1__TaxAmount3 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TaxAmount3", p->soap_type() == SOAP_TYPE_ns1__TaxAmount3 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__TaxAmount3 * SOAP_FMAC4 soap_get_ns1__TaxAmount3(struct soap*, ns1__TaxAmount3 *, const char*, const char*);

inline int soap_read_ns1__TaxAmount3(struct soap *soap, ns1__TaxAmount3 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__TaxAmount3(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__TaxAmount3(struct soap *soap, const char *URL, ns1__TaxAmount3 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__TaxAmount3(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__TaxAmount3(struct soap *soap, ns1__TaxAmount3 *p)
{
	if (::soap_read_ns1__TaxAmount3(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__SupplementaryDataEnvelope1_DEFINED
#define SOAP_TYPE_ns1__SupplementaryDataEnvelope1_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SupplementaryDataEnvelope1(struct soap*, const char*, int, const ns1__SupplementaryDataEnvelope1 *, const char*);
SOAP_FMAC3 ns1__SupplementaryDataEnvelope1 * SOAP_FMAC4 soap_in_ns1__SupplementaryDataEnvelope1(struct soap*, const char*, ns1__SupplementaryDataEnvelope1 *, const char*);
SOAP_FMAC1 ns1__SupplementaryDataEnvelope1 * SOAP_FMAC2 soap_instantiate_ns1__SupplementaryDataEnvelope1(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SupplementaryDataEnvelope1 * soap_new_ns1__SupplementaryDataEnvelope1(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SupplementaryDataEnvelope1(soap, n, NULL, NULL, NULL);
}

inline ns1__SupplementaryDataEnvelope1 * soap_new_req_ns1__SupplementaryDataEnvelope1(
	struct soap *soap)
{
	ns1__SupplementaryDataEnvelope1 *_p = ::soap_new_ns1__SupplementaryDataEnvelope1(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__SupplementaryDataEnvelope1 * soap_new_set_ns1__SupplementaryDataEnvelope1(
	struct soap *soap,
	char *__any)
{
	ns1__SupplementaryDataEnvelope1 *_p = ::soap_new_ns1__SupplementaryDataEnvelope1(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SupplementaryDataEnvelope1::__any = __any;
	}
	return _p;
}

inline int soap_write_ns1__SupplementaryDataEnvelope1(struct soap *soap, ns1__SupplementaryDataEnvelope1 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SupplementaryDataEnvelope1", p->soap_type() == SOAP_TYPE_ns1__SupplementaryDataEnvelope1 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SupplementaryDataEnvelope1(struct soap *soap, const char *URL, ns1__SupplementaryDataEnvelope1 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SupplementaryDataEnvelope1", p->soap_type() == SOAP_TYPE_ns1__SupplementaryDataEnvelope1 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__SupplementaryDataEnvelope1(struct soap *soap, const char *URL, ns1__SupplementaryDataEnvelope1 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SupplementaryDataEnvelope1", p->soap_type() == SOAP_TYPE_ns1__SupplementaryDataEnvelope1 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SupplementaryDataEnvelope1(struct soap *soap, const char *URL, ns1__SupplementaryDataEnvelope1 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SupplementaryDataEnvelope1", p->soap_type() == SOAP_TYPE_ns1__SupplementaryDataEnvelope1 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SupplementaryDataEnvelope1 * SOAP_FMAC4 soap_get_ns1__SupplementaryDataEnvelope1(struct soap*, ns1__SupplementaryDataEnvelope1 *, const char*, const char*);

inline int soap_read_ns1__SupplementaryDataEnvelope1(struct soap *soap, ns1__SupplementaryDataEnvelope1 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__SupplementaryDataEnvelope1(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SupplementaryDataEnvelope1(struct soap *soap, const char *URL, ns1__SupplementaryDataEnvelope1 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__SupplementaryDataEnvelope1(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__SupplementaryDataEnvelope1(struct soap *soap, ns1__SupplementaryDataEnvelope1 *p)
{
	if (::soap_read_ns1__SupplementaryDataEnvelope1(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__SupplementaryData1_DEFINED
#define SOAP_TYPE_ns1__SupplementaryData1_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SupplementaryData1(struct soap*, const char*, int, const ns1__SupplementaryData1 *, const char*);
SOAP_FMAC3 ns1__SupplementaryData1 * SOAP_FMAC4 soap_in_ns1__SupplementaryData1(struct soap*, const char*, ns1__SupplementaryData1 *, const char*);
SOAP_FMAC1 ns1__SupplementaryData1 * SOAP_FMAC2 soap_instantiate_ns1__SupplementaryData1(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SupplementaryData1 * soap_new_ns1__SupplementaryData1(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SupplementaryData1(soap, n, NULL, NULL, NULL);
}

inline ns1__SupplementaryData1 * soap_new_req_ns1__SupplementaryData1(
	struct soap *soap,
	ns1__SupplementaryDataEnvelope1 *Envlp)
{
	ns1__SupplementaryData1 *_p = ::soap_new_ns1__SupplementaryData1(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SupplementaryData1::Envlp = Envlp;
	}
	return _p;
}

inline ns1__SupplementaryData1 * soap_new_set_ns1__SupplementaryData1(
	struct soap *soap,
	std::string *PlcAndNm,
	ns1__SupplementaryDataEnvelope1 *Envlp)
{
	ns1__SupplementaryData1 *_p = ::soap_new_ns1__SupplementaryData1(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SupplementaryData1::PlcAndNm = PlcAndNm;
		_p->ns1__SupplementaryData1::Envlp = Envlp;
	}
	return _p;
}

inline int soap_write_ns1__SupplementaryData1(struct soap *soap, ns1__SupplementaryData1 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SupplementaryData1", p->soap_type() == SOAP_TYPE_ns1__SupplementaryData1 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SupplementaryData1(struct soap *soap, const char *URL, ns1__SupplementaryData1 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SupplementaryData1", p->soap_type() == SOAP_TYPE_ns1__SupplementaryData1 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__SupplementaryData1(struct soap *soap, const char *URL, ns1__SupplementaryData1 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SupplementaryData1", p->soap_type() == SOAP_TYPE_ns1__SupplementaryData1 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SupplementaryData1(struct soap *soap, const char *URL, ns1__SupplementaryData1 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SupplementaryData1", p->soap_type() == SOAP_TYPE_ns1__SupplementaryData1 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SupplementaryData1 * SOAP_FMAC4 soap_get_ns1__SupplementaryData1(struct soap*, ns1__SupplementaryData1 *, const char*, const char*);

inline int soap_read_ns1__SupplementaryData1(struct soap *soap, ns1__SupplementaryData1 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__SupplementaryData1(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SupplementaryData1(struct soap *soap, const char *URL, ns1__SupplementaryData1 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__SupplementaryData1(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__SupplementaryData1(struct soap *soap, ns1__SupplementaryData1 *p)
{
	if (::soap_read_ns1__SupplementaryData1(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__StructuredRemittanceInformation17_DEFINED
#define SOAP_TYPE_ns1__StructuredRemittanceInformation17_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__StructuredRemittanceInformation17(struct soap*, const char*, int, const ns1__StructuredRemittanceInformation17 *, const char*);
SOAP_FMAC3 ns1__StructuredRemittanceInformation17 * SOAP_FMAC4 soap_in_ns1__StructuredRemittanceInformation17(struct soap*, const char*, ns1__StructuredRemittanceInformation17 *, const char*);
SOAP_FMAC1 ns1__StructuredRemittanceInformation17 * SOAP_FMAC2 soap_instantiate_ns1__StructuredRemittanceInformation17(struct soap*, int, const char*, const char*, size_t*);

inline ns1__StructuredRemittanceInformation17 * soap_new_ns1__StructuredRemittanceInformation17(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__StructuredRemittanceInformation17(soap, n, NULL, NULL, NULL);
}

inline ns1__StructuredRemittanceInformation17 * soap_new_req_ns1__StructuredRemittanceInformation17(
	struct soap *soap)
{
	ns1__StructuredRemittanceInformation17 *_p = ::soap_new_ns1__StructuredRemittanceInformation17(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__StructuredRemittanceInformation17 * soap_new_set_ns1__StructuredRemittanceInformation17(
	struct soap *soap,
	const std::vector<ns1__ReferredDocumentInformation7 *> & RfrdDocInf,
	ns1__RemittanceAmount2 *RfrdDocAmt,
	ns1__CreditorReferenceInformation2 *CdtrRefInf,
	ns1__PartyIdentification135 *Invcr,
	ns1__PartyIdentification135 *Invcee,
	ns1__TaxData1 *TaxRmt,
	ns1__Garnishment3 *GrnshmtRmt,
	const std::vector<std::string> & AddtlRmtInf)
{
	ns1__StructuredRemittanceInformation17 *_p = ::soap_new_ns1__StructuredRemittanceInformation17(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__StructuredRemittanceInformation17::RfrdDocInf = RfrdDocInf;
		_p->ns1__StructuredRemittanceInformation17::RfrdDocAmt = RfrdDocAmt;
		_p->ns1__StructuredRemittanceInformation17::CdtrRefInf = CdtrRefInf;
		_p->ns1__StructuredRemittanceInformation17::Invcr = Invcr;
		_p->ns1__StructuredRemittanceInformation17::Invcee = Invcee;
		_p->ns1__StructuredRemittanceInformation17::TaxRmt = TaxRmt;
		_p->ns1__StructuredRemittanceInformation17::GrnshmtRmt = GrnshmtRmt;
		_p->ns1__StructuredRemittanceInformation17::AddtlRmtInf = AddtlRmtInf;
	}
	return _p;
}

inline int soap_write_ns1__StructuredRemittanceInformation17(struct soap *soap, ns1__StructuredRemittanceInformation17 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:StructuredRemittanceInformation17", p->soap_type() == SOAP_TYPE_ns1__StructuredRemittanceInformation17 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__StructuredRemittanceInformation17(struct soap *soap, const char *URL, ns1__StructuredRemittanceInformation17 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:StructuredRemittanceInformation17", p->soap_type() == SOAP_TYPE_ns1__StructuredRemittanceInformation17 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__StructuredRemittanceInformation17(struct soap *soap, const char *URL, ns1__StructuredRemittanceInformation17 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:StructuredRemittanceInformation17", p->soap_type() == SOAP_TYPE_ns1__StructuredRemittanceInformation17 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__StructuredRemittanceInformation17(struct soap *soap, const char *URL, ns1__StructuredRemittanceInformation17 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:StructuredRemittanceInformation17", p->soap_type() == SOAP_TYPE_ns1__StructuredRemittanceInformation17 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__StructuredRemittanceInformation17 * SOAP_FMAC4 soap_get_ns1__StructuredRemittanceInformation17(struct soap*, ns1__StructuredRemittanceInformation17 *, const char*, const char*);

inline int soap_read_ns1__StructuredRemittanceInformation17(struct soap *soap, ns1__StructuredRemittanceInformation17 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__StructuredRemittanceInformation17(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__StructuredRemittanceInformation17(struct soap *soap, const char *URL, ns1__StructuredRemittanceInformation17 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__StructuredRemittanceInformation17(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__StructuredRemittanceInformation17(struct soap *soap, ns1__StructuredRemittanceInformation17 *p)
{
	if (::soap_read_ns1__StructuredRemittanceInformation17(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__StructuredRegulatoryReporting3_DEFINED
#define SOAP_TYPE_ns1__StructuredRegulatoryReporting3_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__StructuredRegulatoryReporting3(struct soap*, const char*, int, const ns1__StructuredRegulatoryReporting3 *, const char*);
SOAP_FMAC3 ns1__StructuredRegulatoryReporting3 * SOAP_FMAC4 soap_in_ns1__StructuredRegulatoryReporting3(struct soap*, const char*, ns1__StructuredRegulatoryReporting3 *, const char*);
SOAP_FMAC1 ns1__StructuredRegulatoryReporting3 * SOAP_FMAC2 soap_instantiate_ns1__StructuredRegulatoryReporting3(struct soap*, int, const char*, const char*, size_t*);

inline ns1__StructuredRegulatoryReporting3 * soap_new_ns1__StructuredRegulatoryReporting3(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__StructuredRegulatoryReporting3(soap, n, NULL, NULL, NULL);
}

inline ns1__StructuredRegulatoryReporting3 * soap_new_req_ns1__StructuredRegulatoryReporting3(
	struct soap *soap)
{
	ns1__StructuredRegulatoryReporting3 *_p = ::soap_new_ns1__StructuredRegulatoryReporting3(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__StructuredRegulatoryReporting3 * soap_new_set_ns1__StructuredRegulatoryReporting3(
	struct soap *soap,
	std::string *Tp,
	std::string *Dt,
	std::string *Ctry,
	std::string *Cd,
	ns1__ActiveOrHistoricCurrencyAndAmount *Amt,
	const std::vector<std::string> & Inf)
{
	ns1__StructuredRegulatoryReporting3 *_p = ::soap_new_ns1__StructuredRegulatoryReporting3(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__StructuredRegulatoryReporting3::Tp = Tp;
		_p->ns1__StructuredRegulatoryReporting3::Dt = Dt;
		_p->ns1__StructuredRegulatoryReporting3::Ctry = Ctry;
		_p->ns1__StructuredRegulatoryReporting3::Cd = Cd;
		_p->ns1__StructuredRegulatoryReporting3::Amt = Amt;
		_p->ns1__StructuredRegulatoryReporting3::Inf = Inf;
	}
	return _p;
}

inline int soap_write_ns1__StructuredRegulatoryReporting3(struct soap *soap, ns1__StructuredRegulatoryReporting3 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:StructuredRegulatoryReporting3", p->soap_type() == SOAP_TYPE_ns1__StructuredRegulatoryReporting3 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__StructuredRegulatoryReporting3(struct soap *soap, const char *URL, ns1__StructuredRegulatoryReporting3 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:StructuredRegulatoryReporting3", p->soap_type() == SOAP_TYPE_ns1__StructuredRegulatoryReporting3 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__StructuredRegulatoryReporting3(struct soap *soap, const char *URL, ns1__StructuredRegulatoryReporting3 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:StructuredRegulatoryReporting3", p->soap_type() == SOAP_TYPE_ns1__StructuredRegulatoryReporting3 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__StructuredRegulatoryReporting3(struct soap *soap, const char *URL, ns1__StructuredRegulatoryReporting3 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:StructuredRegulatoryReporting3", p->soap_type() == SOAP_TYPE_ns1__StructuredRegulatoryReporting3 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__StructuredRegulatoryReporting3 * SOAP_FMAC4 soap_get_ns1__StructuredRegulatoryReporting3(struct soap*, ns1__StructuredRegulatoryReporting3 *, const char*, const char*);

inline int soap_read_ns1__StructuredRegulatoryReporting3(struct soap *soap, ns1__StructuredRegulatoryReporting3 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__StructuredRegulatoryReporting3(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__StructuredRegulatoryReporting3(struct soap *soap, const char *URL, ns1__StructuredRegulatoryReporting3 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__StructuredRegulatoryReporting3(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__StructuredRegulatoryReporting3(struct soap *soap, ns1__StructuredRegulatoryReporting3 *p)
{
	if (::soap_read_ns1__StructuredRegulatoryReporting3(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__ServiceLevel8Choice_DEFINED
#define SOAP_TYPE_ns1__ServiceLevel8Choice_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ServiceLevel8Choice(struct soap*, const char*, int, const ns1__ServiceLevel8Choice *, const char*);
SOAP_FMAC3 ns1__ServiceLevel8Choice * SOAP_FMAC4 soap_in_ns1__ServiceLevel8Choice(struct soap*, const char*, ns1__ServiceLevel8Choice *, const char*);
SOAP_FMAC1 ns1__ServiceLevel8Choice * SOAP_FMAC2 soap_instantiate_ns1__ServiceLevel8Choice(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ServiceLevel8Choice * soap_new_ns1__ServiceLevel8Choice(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ServiceLevel8Choice(soap, n, NULL, NULL, NULL);
}

inline ns1__ServiceLevel8Choice * soap_new_req_ns1__ServiceLevel8Choice(
	struct soap *soap,
	const union _ns1__union_ServiceLevel8Choice& union_ServiceLevel8Choice)
{
	ns1__ServiceLevel8Choice *_p = ::soap_new_ns1__ServiceLevel8Choice(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ServiceLevel8Choice::union_ServiceLevel8Choice = union_ServiceLevel8Choice;
	}
	return _p;
}

inline ns1__ServiceLevel8Choice * soap_new_set_ns1__ServiceLevel8Choice(
	struct soap *soap,
	int __union_ServiceLevel8Choice,
	const union _ns1__union_ServiceLevel8Choice& union_ServiceLevel8Choice)
{
	ns1__ServiceLevel8Choice *_p = ::soap_new_ns1__ServiceLevel8Choice(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ServiceLevel8Choice::__union_ServiceLevel8Choice = __union_ServiceLevel8Choice;
		_p->ns1__ServiceLevel8Choice::union_ServiceLevel8Choice = union_ServiceLevel8Choice;
	}
	return _p;
}

inline int soap_write_ns1__ServiceLevel8Choice(struct soap *soap, ns1__ServiceLevel8Choice const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ServiceLevel8Choice", p->soap_type() == SOAP_TYPE_ns1__ServiceLevel8Choice ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ServiceLevel8Choice(struct soap *soap, const char *URL, ns1__ServiceLevel8Choice const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ServiceLevel8Choice", p->soap_type() == SOAP_TYPE_ns1__ServiceLevel8Choice ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ServiceLevel8Choice(struct soap *soap, const char *URL, ns1__ServiceLevel8Choice const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ServiceLevel8Choice", p->soap_type() == SOAP_TYPE_ns1__ServiceLevel8Choice ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ServiceLevel8Choice(struct soap *soap, const char *URL, ns1__ServiceLevel8Choice const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ServiceLevel8Choice", p->soap_type() == SOAP_TYPE_ns1__ServiceLevel8Choice ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ServiceLevel8Choice * SOAP_FMAC4 soap_get_ns1__ServiceLevel8Choice(struct soap*, ns1__ServiceLevel8Choice *, const char*, const char*);

inline int soap_read_ns1__ServiceLevel8Choice(struct soap *soap, ns1__ServiceLevel8Choice *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__ServiceLevel8Choice(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ServiceLevel8Choice(struct soap *soap, const char *URL, ns1__ServiceLevel8Choice *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ServiceLevel8Choice(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__ServiceLevel8Choice(struct soap *soap, ns1__ServiceLevel8Choice *p)
{
	if (::soap_read_ns1__ServiceLevel8Choice(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__RemittanceLocationData1_DEFINED
#define SOAP_TYPE_ns1__RemittanceLocationData1_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RemittanceLocationData1(struct soap*, const char*, int, const ns1__RemittanceLocationData1 *, const char*);
SOAP_FMAC3 ns1__RemittanceLocationData1 * SOAP_FMAC4 soap_in_ns1__RemittanceLocationData1(struct soap*, const char*, ns1__RemittanceLocationData1 *, const char*);
SOAP_FMAC1 ns1__RemittanceLocationData1 * SOAP_FMAC2 soap_instantiate_ns1__RemittanceLocationData1(struct soap*, int, const char*, const char*, size_t*);

inline ns1__RemittanceLocationData1 * soap_new_ns1__RemittanceLocationData1(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__RemittanceLocationData1(soap, n, NULL, NULL, NULL);
}

inline ns1__RemittanceLocationData1 * soap_new_req_ns1__RemittanceLocationData1(
	struct soap *soap,
	enum ns1__RemittanceLocationMethod2Code Mtd)
{
	ns1__RemittanceLocationData1 *_p = ::soap_new_ns1__RemittanceLocationData1(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RemittanceLocationData1::Mtd = Mtd;
	}
	return _p;
}

inline ns1__RemittanceLocationData1 * soap_new_set_ns1__RemittanceLocationData1(
	struct soap *soap,
	enum ns1__RemittanceLocationMethod2Code Mtd,
	std::string *ElctrncAdr,
	ns1__NameAndAddress16 *PstlAdr)
{
	ns1__RemittanceLocationData1 *_p = ::soap_new_ns1__RemittanceLocationData1(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RemittanceLocationData1::Mtd = Mtd;
		_p->ns1__RemittanceLocationData1::ElctrncAdr = ElctrncAdr;
		_p->ns1__RemittanceLocationData1::PstlAdr = PstlAdr;
	}
	return _p;
}

inline int soap_write_ns1__RemittanceLocationData1(struct soap *soap, ns1__RemittanceLocationData1 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RemittanceLocationData1", p->soap_type() == SOAP_TYPE_ns1__RemittanceLocationData1 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__RemittanceLocationData1(struct soap *soap, const char *URL, ns1__RemittanceLocationData1 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RemittanceLocationData1", p->soap_type() == SOAP_TYPE_ns1__RemittanceLocationData1 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__RemittanceLocationData1(struct soap *soap, const char *URL, ns1__RemittanceLocationData1 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RemittanceLocationData1", p->soap_type() == SOAP_TYPE_ns1__RemittanceLocationData1 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__RemittanceLocationData1(struct soap *soap, const char *URL, ns1__RemittanceLocationData1 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RemittanceLocationData1", p->soap_type() == SOAP_TYPE_ns1__RemittanceLocationData1 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__RemittanceLocationData1 * SOAP_FMAC4 soap_get_ns1__RemittanceLocationData1(struct soap*, ns1__RemittanceLocationData1 *, const char*, const char*);

inline int soap_read_ns1__RemittanceLocationData1(struct soap *soap, ns1__RemittanceLocationData1 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__RemittanceLocationData1(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__RemittanceLocationData1(struct soap *soap, const char *URL, ns1__RemittanceLocationData1 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__RemittanceLocationData1(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__RemittanceLocationData1(struct soap *soap, ns1__RemittanceLocationData1 *p)
{
	if (::soap_read_ns1__RemittanceLocationData1(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__RemittanceLocation7_DEFINED
#define SOAP_TYPE_ns1__RemittanceLocation7_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RemittanceLocation7(struct soap*, const char*, int, const ns1__RemittanceLocation7 *, const char*);
SOAP_FMAC3 ns1__RemittanceLocation7 * SOAP_FMAC4 soap_in_ns1__RemittanceLocation7(struct soap*, const char*, ns1__RemittanceLocation7 *, const char*);
SOAP_FMAC1 ns1__RemittanceLocation7 * SOAP_FMAC2 soap_instantiate_ns1__RemittanceLocation7(struct soap*, int, const char*, const char*, size_t*);

inline ns1__RemittanceLocation7 * soap_new_ns1__RemittanceLocation7(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__RemittanceLocation7(soap, n, NULL, NULL, NULL);
}

inline ns1__RemittanceLocation7 * soap_new_req_ns1__RemittanceLocation7(
	struct soap *soap)
{
	ns1__RemittanceLocation7 *_p = ::soap_new_ns1__RemittanceLocation7(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__RemittanceLocation7 * soap_new_set_ns1__RemittanceLocation7(
	struct soap *soap,
	std::string *RmtId,
	const std::vector<ns1__RemittanceLocationData1 *> & RmtLctnDtls)
{
	ns1__RemittanceLocation7 *_p = ::soap_new_ns1__RemittanceLocation7(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RemittanceLocation7::RmtId = RmtId;
		_p->ns1__RemittanceLocation7::RmtLctnDtls = RmtLctnDtls;
	}
	return _p;
}

inline int soap_write_ns1__RemittanceLocation7(struct soap *soap, ns1__RemittanceLocation7 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RemittanceLocation7", p->soap_type() == SOAP_TYPE_ns1__RemittanceLocation7 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__RemittanceLocation7(struct soap *soap, const char *URL, ns1__RemittanceLocation7 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RemittanceLocation7", p->soap_type() == SOAP_TYPE_ns1__RemittanceLocation7 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__RemittanceLocation7(struct soap *soap, const char *URL, ns1__RemittanceLocation7 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RemittanceLocation7", p->soap_type() == SOAP_TYPE_ns1__RemittanceLocation7 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__RemittanceLocation7(struct soap *soap, const char *URL, ns1__RemittanceLocation7 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RemittanceLocation7", p->soap_type() == SOAP_TYPE_ns1__RemittanceLocation7 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__RemittanceLocation7 * SOAP_FMAC4 soap_get_ns1__RemittanceLocation7(struct soap*, ns1__RemittanceLocation7 *, const char*, const char*);

inline int soap_read_ns1__RemittanceLocation7(struct soap *soap, ns1__RemittanceLocation7 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__RemittanceLocation7(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__RemittanceLocation7(struct soap *soap, const char *URL, ns1__RemittanceLocation7 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__RemittanceLocation7(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__RemittanceLocation7(struct soap *soap, ns1__RemittanceLocation7 *p)
{
	if (::soap_read_ns1__RemittanceLocation7(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__RemittanceInformation21_DEFINED
#define SOAP_TYPE_ns1__RemittanceInformation21_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RemittanceInformation21(struct soap*, const char*, int, const ns1__RemittanceInformation21 *, const char*);
SOAP_FMAC3 ns1__RemittanceInformation21 * SOAP_FMAC4 soap_in_ns1__RemittanceInformation21(struct soap*, const char*, ns1__RemittanceInformation21 *, const char*);
SOAP_FMAC1 ns1__RemittanceInformation21 * SOAP_FMAC2 soap_instantiate_ns1__RemittanceInformation21(struct soap*, int, const char*, const char*, size_t*);

inline ns1__RemittanceInformation21 * soap_new_ns1__RemittanceInformation21(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__RemittanceInformation21(soap, n, NULL, NULL, NULL);
}

inline ns1__RemittanceInformation21 * soap_new_req_ns1__RemittanceInformation21(
	struct soap *soap)
{
	ns1__RemittanceInformation21 *_p = ::soap_new_ns1__RemittanceInformation21(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__RemittanceInformation21 * soap_new_set_ns1__RemittanceInformation21(
	struct soap *soap,
	const std::vector<std::string> & Ustrd,
	const std::vector<ns1__StructuredRemittanceInformation17 *> & Strd)
{
	ns1__RemittanceInformation21 *_p = ::soap_new_ns1__RemittanceInformation21(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RemittanceInformation21::Ustrd = Ustrd;
		_p->ns1__RemittanceInformation21::Strd = Strd;
	}
	return _p;
}

inline int soap_write_ns1__RemittanceInformation21(struct soap *soap, ns1__RemittanceInformation21 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RemittanceInformation21", p->soap_type() == SOAP_TYPE_ns1__RemittanceInformation21 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__RemittanceInformation21(struct soap *soap, const char *URL, ns1__RemittanceInformation21 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RemittanceInformation21", p->soap_type() == SOAP_TYPE_ns1__RemittanceInformation21 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__RemittanceInformation21(struct soap *soap, const char *URL, ns1__RemittanceInformation21 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RemittanceInformation21", p->soap_type() == SOAP_TYPE_ns1__RemittanceInformation21 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__RemittanceInformation21(struct soap *soap, const char *URL, ns1__RemittanceInformation21 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RemittanceInformation21", p->soap_type() == SOAP_TYPE_ns1__RemittanceInformation21 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__RemittanceInformation21 * SOAP_FMAC4 soap_get_ns1__RemittanceInformation21(struct soap*, ns1__RemittanceInformation21 *, const char*, const char*);

inline int soap_read_ns1__RemittanceInformation21(struct soap *soap, ns1__RemittanceInformation21 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__RemittanceInformation21(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__RemittanceInformation21(struct soap *soap, const char *URL, ns1__RemittanceInformation21 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__RemittanceInformation21(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__RemittanceInformation21(struct soap *soap, ns1__RemittanceInformation21 *p)
{
	if (::soap_read_ns1__RemittanceInformation21(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__RemittanceAmount3_DEFINED
#define SOAP_TYPE_ns1__RemittanceAmount3_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RemittanceAmount3(struct soap*, const char*, int, const ns1__RemittanceAmount3 *, const char*);
SOAP_FMAC3 ns1__RemittanceAmount3 * SOAP_FMAC4 soap_in_ns1__RemittanceAmount3(struct soap*, const char*, ns1__RemittanceAmount3 *, const char*);
SOAP_FMAC1 ns1__RemittanceAmount3 * SOAP_FMAC2 soap_instantiate_ns1__RemittanceAmount3(struct soap*, int, const char*, const char*, size_t*);

inline ns1__RemittanceAmount3 * soap_new_ns1__RemittanceAmount3(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__RemittanceAmount3(soap, n, NULL, NULL, NULL);
}

inline ns1__RemittanceAmount3 * soap_new_req_ns1__RemittanceAmount3(
	struct soap *soap)
{
	ns1__RemittanceAmount3 *_p = ::soap_new_ns1__RemittanceAmount3(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__RemittanceAmount3 * soap_new_set_ns1__RemittanceAmount3(
	struct soap *soap,
	ns1__ActiveOrHistoricCurrencyAndAmount *DuePyblAmt,
	const std::vector<ns1__DiscountAmountAndType1 *> & DscntApldAmt,
	ns1__ActiveOrHistoricCurrencyAndAmount *CdtNoteAmt,
	const std::vector<ns1__TaxAmountAndType1 *> & TaxAmt,
	const std::vector<ns1__DocumentAdjustment1 *> & AdjstmntAmtAndRsn,
	ns1__ActiveOrHistoricCurrencyAndAmount *RmtdAmt)
{
	ns1__RemittanceAmount3 *_p = ::soap_new_ns1__RemittanceAmount3(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RemittanceAmount3::DuePyblAmt = DuePyblAmt;
		_p->ns1__RemittanceAmount3::DscntApldAmt = DscntApldAmt;
		_p->ns1__RemittanceAmount3::CdtNoteAmt = CdtNoteAmt;
		_p->ns1__RemittanceAmount3::TaxAmt = TaxAmt;
		_p->ns1__RemittanceAmount3::AdjstmntAmtAndRsn = AdjstmntAmtAndRsn;
		_p->ns1__RemittanceAmount3::RmtdAmt = RmtdAmt;
	}
	return _p;
}

inline int soap_write_ns1__RemittanceAmount3(struct soap *soap, ns1__RemittanceAmount3 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RemittanceAmount3", p->soap_type() == SOAP_TYPE_ns1__RemittanceAmount3 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__RemittanceAmount3(struct soap *soap, const char *URL, ns1__RemittanceAmount3 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RemittanceAmount3", p->soap_type() == SOAP_TYPE_ns1__RemittanceAmount3 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__RemittanceAmount3(struct soap *soap, const char *URL, ns1__RemittanceAmount3 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RemittanceAmount3", p->soap_type() == SOAP_TYPE_ns1__RemittanceAmount3 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__RemittanceAmount3(struct soap *soap, const char *URL, ns1__RemittanceAmount3 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RemittanceAmount3", p->soap_type() == SOAP_TYPE_ns1__RemittanceAmount3 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__RemittanceAmount3 * SOAP_FMAC4 soap_get_ns1__RemittanceAmount3(struct soap*, ns1__RemittanceAmount3 *, const char*, const char*);

inline int soap_read_ns1__RemittanceAmount3(struct soap *soap, ns1__RemittanceAmount3 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__RemittanceAmount3(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__RemittanceAmount3(struct soap *soap, const char *URL, ns1__RemittanceAmount3 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__RemittanceAmount3(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__RemittanceAmount3(struct soap *soap, ns1__RemittanceAmount3 *p)
{
	if (::soap_read_ns1__RemittanceAmount3(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__RemittanceAmount2_DEFINED
#define SOAP_TYPE_ns1__RemittanceAmount2_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RemittanceAmount2(struct soap*, const char*, int, const ns1__RemittanceAmount2 *, const char*);
SOAP_FMAC3 ns1__RemittanceAmount2 * SOAP_FMAC4 soap_in_ns1__RemittanceAmount2(struct soap*, const char*, ns1__RemittanceAmount2 *, const char*);
SOAP_FMAC1 ns1__RemittanceAmount2 * SOAP_FMAC2 soap_instantiate_ns1__RemittanceAmount2(struct soap*, int, const char*, const char*, size_t*);

inline ns1__RemittanceAmount2 * soap_new_ns1__RemittanceAmount2(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__RemittanceAmount2(soap, n, NULL, NULL, NULL);
}

inline ns1__RemittanceAmount2 * soap_new_req_ns1__RemittanceAmount2(
	struct soap *soap)
{
	ns1__RemittanceAmount2 *_p = ::soap_new_ns1__RemittanceAmount2(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__RemittanceAmount2 * soap_new_set_ns1__RemittanceAmount2(
	struct soap *soap,
	ns1__ActiveOrHistoricCurrencyAndAmount *DuePyblAmt,
	const std::vector<ns1__DiscountAmountAndType1 *> & DscntApldAmt,
	ns1__ActiveOrHistoricCurrencyAndAmount *CdtNoteAmt,
	const std::vector<ns1__TaxAmountAndType1 *> & TaxAmt,
	const std::vector<ns1__DocumentAdjustment1 *> & AdjstmntAmtAndRsn,
	ns1__ActiveOrHistoricCurrencyAndAmount *RmtdAmt)
{
	ns1__RemittanceAmount2 *_p = ::soap_new_ns1__RemittanceAmount2(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RemittanceAmount2::DuePyblAmt = DuePyblAmt;
		_p->ns1__RemittanceAmount2::DscntApldAmt = DscntApldAmt;
		_p->ns1__RemittanceAmount2::CdtNoteAmt = CdtNoteAmt;
		_p->ns1__RemittanceAmount2::TaxAmt = TaxAmt;
		_p->ns1__RemittanceAmount2::AdjstmntAmtAndRsn = AdjstmntAmtAndRsn;
		_p->ns1__RemittanceAmount2::RmtdAmt = RmtdAmt;
	}
	return _p;
}

inline int soap_write_ns1__RemittanceAmount2(struct soap *soap, ns1__RemittanceAmount2 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RemittanceAmount2", p->soap_type() == SOAP_TYPE_ns1__RemittanceAmount2 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__RemittanceAmount2(struct soap *soap, const char *URL, ns1__RemittanceAmount2 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RemittanceAmount2", p->soap_type() == SOAP_TYPE_ns1__RemittanceAmount2 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__RemittanceAmount2(struct soap *soap, const char *URL, ns1__RemittanceAmount2 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RemittanceAmount2", p->soap_type() == SOAP_TYPE_ns1__RemittanceAmount2 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__RemittanceAmount2(struct soap *soap, const char *URL, ns1__RemittanceAmount2 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RemittanceAmount2", p->soap_type() == SOAP_TYPE_ns1__RemittanceAmount2 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__RemittanceAmount2 * SOAP_FMAC4 soap_get_ns1__RemittanceAmount2(struct soap*, ns1__RemittanceAmount2 *, const char*, const char*);

inline int soap_read_ns1__RemittanceAmount2(struct soap *soap, ns1__RemittanceAmount2 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__RemittanceAmount2(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__RemittanceAmount2(struct soap *soap, const char *URL, ns1__RemittanceAmount2 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__RemittanceAmount2(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__RemittanceAmount2(struct soap *soap, ns1__RemittanceAmount2 *p)
{
	if (::soap_read_ns1__RemittanceAmount2(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__RegulatoryReporting3_DEFINED
#define SOAP_TYPE_ns1__RegulatoryReporting3_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RegulatoryReporting3(struct soap*, const char*, int, const ns1__RegulatoryReporting3 *, const char*);
SOAP_FMAC3 ns1__RegulatoryReporting3 * SOAP_FMAC4 soap_in_ns1__RegulatoryReporting3(struct soap*, const char*, ns1__RegulatoryReporting3 *, const char*);
SOAP_FMAC1 ns1__RegulatoryReporting3 * SOAP_FMAC2 soap_instantiate_ns1__RegulatoryReporting3(struct soap*, int, const char*, const char*, size_t*);

inline ns1__RegulatoryReporting3 * soap_new_ns1__RegulatoryReporting3(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__RegulatoryReporting3(soap, n, NULL, NULL, NULL);
}

inline ns1__RegulatoryReporting3 * soap_new_req_ns1__RegulatoryReporting3(
	struct soap *soap)
{
	ns1__RegulatoryReporting3 *_p = ::soap_new_ns1__RegulatoryReporting3(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__RegulatoryReporting3 * soap_new_set_ns1__RegulatoryReporting3(
	struct soap *soap,
	enum ns1__RegulatoryReportingType1Code *DbtCdtRptgInd,
	ns1__RegulatoryAuthority2 *Authrty,
	const std::vector<ns1__StructuredRegulatoryReporting3 *> & Dtls)
{
	ns1__RegulatoryReporting3 *_p = ::soap_new_ns1__RegulatoryReporting3(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RegulatoryReporting3::DbtCdtRptgInd = DbtCdtRptgInd;
		_p->ns1__RegulatoryReporting3::Authrty = Authrty;
		_p->ns1__RegulatoryReporting3::Dtls = Dtls;
	}
	return _p;
}

inline int soap_write_ns1__RegulatoryReporting3(struct soap *soap, ns1__RegulatoryReporting3 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RegulatoryReporting3", p->soap_type() == SOAP_TYPE_ns1__RegulatoryReporting3 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__RegulatoryReporting3(struct soap *soap, const char *URL, ns1__RegulatoryReporting3 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RegulatoryReporting3", p->soap_type() == SOAP_TYPE_ns1__RegulatoryReporting3 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__RegulatoryReporting3(struct soap *soap, const char *URL, ns1__RegulatoryReporting3 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RegulatoryReporting3", p->soap_type() == SOAP_TYPE_ns1__RegulatoryReporting3 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__RegulatoryReporting3(struct soap *soap, const char *URL, ns1__RegulatoryReporting3 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RegulatoryReporting3", p->soap_type() == SOAP_TYPE_ns1__RegulatoryReporting3 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__RegulatoryReporting3 * SOAP_FMAC4 soap_get_ns1__RegulatoryReporting3(struct soap*, ns1__RegulatoryReporting3 *, const char*, const char*);

inline int soap_read_ns1__RegulatoryReporting3(struct soap *soap, ns1__RegulatoryReporting3 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__RegulatoryReporting3(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__RegulatoryReporting3(struct soap *soap, const char *URL, ns1__RegulatoryReporting3 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__RegulatoryReporting3(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__RegulatoryReporting3(struct soap *soap, ns1__RegulatoryReporting3 *p)
{
	if (::soap_read_ns1__RegulatoryReporting3(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__RegulatoryAuthority2_DEFINED
#define SOAP_TYPE_ns1__RegulatoryAuthority2_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RegulatoryAuthority2(struct soap*, const char*, int, const ns1__RegulatoryAuthority2 *, const char*);
SOAP_FMAC3 ns1__RegulatoryAuthority2 * SOAP_FMAC4 soap_in_ns1__RegulatoryAuthority2(struct soap*, const char*, ns1__RegulatoryAuthority2 *, const char*);
SOAP_FMAC1 ns1__RegulatoryAuthority2 * SOAP_FMAC2 soap_instantiate_ns1__RegulatoryAuthority2(struct soap*, int, const char*, const char*, size_t*);

inline ns1__RegulatoryAuthority2 * soap_new_ns1__RegulatoryAuthority2(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__RegulatoryAuthority2(soap, n, NULL, NULL, NULL);
}

inline ns1__RegulatoryAuthority2 * soap_new_req_ns1__RegulatoryAuthority2(
	struct soap *soap)
{
	ns1__RegulatoryAuthority2 *_p = ::soap_new_ns1__RegulatoryAuthority2(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__RegulatoryAuthority2 * soap_new_set_ns1__RegulatoryAuthority2(
	struct soap *soap,
	std::string *Nm,
	std::string *Ctry)
{
	ns1__RegulatoryAuthority2 *_p = ::soap_new_ns1__RegulatoryAuthority2(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RegulatoryAuthority2::Nm = Nm;
		_p->ns1__RegulatoryAuthority2::Ctry = Ctry;
	}
	return _p;
}

inline int soap_write_ns1__RegulatoryAuthority2(struct soap *soap, ns1__RegulatoryAuthority2 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RegulatoryAuthority2", p->soap_type() == SOAP_TYPE_ns1__RegulatoryAuthority2 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__RegulatoryAuthority2(struct soap *soap, const char *URL, ns1__RegulatoryAuthority2 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RegulatoryAuthority2", p->soap_type() == SOAP_TYPE_ns1__RegulatoryAuthority2 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__RegulatoryAuthority2(struct soap *soap, const char *URL, ns1__RegulatoryAuthority2 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RegulatoryAuthority2", p->soap_type() == SOAP_TYPE_ns1__RegulatoryAuthority2 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__RegulatoryAuthority2(struct soap *soap, const char *URL, ns1__RegulatoryAuthority2 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RegulatoryAuthority2", p->soap_type() == SOAP_TYPE_ns1__RegulatoryAuthority2 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__RegulatoryAuthority2 * SOAP_FMAC4 soap_get_ns1__RegulatoryAuthority2(struct soap*, ns1__RegulatoryAuthority2 *, const char*, const char*);

inline int soap_read_ns1__RegulatoryAuthority2(struct soap *soap, ns1__RegulatoryAuthority2 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__RegulatoryAuthority2(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__RegulatoryAuthority2(struct soap *soap, const char *URL, ns1__RegulatoryAuthority2 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__RegulatoryAuthority2(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__RegulatoryAuthority2(struct soap *soap, ns1__RegulatoryAuthority2 *p)
{
	if (::soap_read_ns1__RegulatoryAuthority2(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__ReferredDocumentType4_DEFINED
#define SOAP_TYPE_ns1__ReferredDocumentType4_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ReferredDocumentType4(struct soap*, const char*, int, const ns1__ReferredDocumentType4 *, const char*);
SOAP_FMAC3 ns1__ReferredDocumentType4 * SOAP_FMAC4 soap_in_ns1__ReferredDocumentType4(struct soap*, const char*, ns1__ReferredDocumentType4 *, const char*);
SOAP_FMAC1 ns1__ReferredDocumentType4 * SOAP_FMAC2 soap_instantiate_ns1__ReferredDocumentType4(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ReferredDocumentType4 * soap_new_ns1__ReferredDocumentType4(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ReferredDocumentType4(soap, n, NULL, NULL, NULL);
}

inline ns1__ReferredDocumentType4 * soap_new_req_ns1__ReferredDocumentType4(
	struct soap *soap,
	ns1__ReferredDocumentType3Choice *CdOrPrtry)
{
	ns1__ReferredDocumentType4 *_p = ::soap_new_ns1__ReferredDocumentType4(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ReferredDocumentType4::CdOrPrtry = CdOrPrtry;
	}
	return _p;
}

inline ns1__ReferredDocumentType4 * soap_new_set_ns1__ReferredDocumentType4(
	struct soap *soap,
	ns1__ReferredDocumentType3Choice *CdOrPrtry,
	std::string *Issr)
{
	ns1__ReferredDocumentType4 *_p = ::soap_new_ns1__ReferredDocumentType4(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ReferredDocumentType4::CdOrPrtry = CdOrPrtry;
		_p->ns1__ReferredDocumentType4::Issr = Issr;
	}
	return _p;
}

inline int soap_write_ns1__ReferredDocumentType4(struct soap *soap, ns1__ReferredDocumentType4 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReferredDocumentType4", p->soap_type() == SOAP_TYPE_ns1__ReferredDocumentType4 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ReferredDocumentType4(struct soap *soap, const char *URL, ns1__ReferredDocumentType4 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReferredDocumentType4", p->soap_type() == SOAP_TYPE_ns1__ReferredDocumentType4 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ReferredDocumentType4(struct soap *soap, const char *URL, ns1__ReferredDocumentType4 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReferredDocumentType4", p->soap_type() == SOAP_TYPE_ns1__ReferredDocumentType4 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ReferredDocumentType4(struct soap *soap, const char *URL, ns1__ReferredDocumentType4 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReferredDocumentType4", p->soap_type() == SOAP_TYPE_ns1__ReferredDocumentType4 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ReferredDocumentType4 * SOAP_FMAC4 soap_get_ns1__ReferredDocumentType4(struct soap*, ns1__ReferredDocumentType4 *, const char*, const char*);

inline int soap_read_ns1__ReferredDocumentType4(struct soap *soap, ns1__ReferredDocumentType4 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__ReferredDocumentType4(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ReferredDocumentType4(struct soap *soap, const char *URL, ns1__ReferredDocumentType4 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ReferredDocumentType4(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__ReferredDocumentType4(struct soap *soap, ns1__ReferredDocumentType4 *p)
{
	if (::soap_read_ns1__ReferredDocumentType4(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__ReferredDocumentType3Choice_DEFINED
#define SOAP_TYPE_ns1__ReferredDocumentType3Choice_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ReferredDocumentType3Choice(struct soap*, const char*, int, const ns1__ReferredDocumentType3Choice *, const char*);
SOAP_FMAC3 ns1__ReferredDocumentType3Choice * SOAP_FMAC4 soap_in_ns1__ReferredDocumentType3Choice(struct soap*, const char*, ns1__ReferredDocumentType3Choice *, const char*);
SOAP_FMAC1 ns1__ReferredDocumentType3Choice * SOAP_FMAC2 soap_instantiate_ns1__ReferredDocumentType3Choice(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ReferredDocumentType3Choice * soap_new_ns1__ReferredDocumentType3Choice(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ReferredDocumentType3Choice(soap, n, NULL, NULL, NULL);
}

inline ns1__ReferredDocumentType3Choice * soap_new_req_ns1__ReferredDocumentType3Choice(
	struct soap *soap,
	const union _ns1__union_ReferredDocumentType3Choice& union_ReferredDocumentType3Choice)
{
	ns1__ReferredDocumentType3Choice *_p = ::soap_new_ns1__ReferredDocumentType3Choice(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ReferredDocumentType3Choice::union_ReferredDocumentType3Choice = union_ReferredDocumentType3Choice;
	}
	return _p;
}

inline ns1__ReferredDocumentType3Choice * soap_new_set_ns1__ReferredDocumentType3Choice(
	struct soap *soap,
	int __union_ReferredDocumentType3Choice,
	const union _ns1__union_ReferredDocumentType3Choice& union_ReferredDocumentType3Choice)
{
	ns1__ReferredDocumentType3Choice *_p = ::soap_new_ns1__ReferredDocumentType3Choice(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ReferredDocumentType3Choice::__union_ReferredDocumentType3Choice = __union_ReferredDocumentType3Choice;
		_p->ns1__ReferredDocumentType3Choice::union_ReferredDocumentType3Choice = union_ReferredDocumentType3Choice;
	}
	return _p;
}

inline int soap_write_ns1__ReferredDocumentType3Choice(struct soap *soap, ns1__ReferredDocumentType3Choice const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReferredDocumentType3Choice", p->soap_type() == SOAP_TYPE_ns1__ReferredDocumentType3Choice ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ReferredDocumentType3Choice(struct soap *soap, const char *URL, ns1__ReferredDocumentType3Choice const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReferredDocumentType3Choice", p->soap_type() == SOAP_TYPE_ns1__ReferredDocumentType3Choice ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ReferredDocumentType3Choice(struct soap *soap, const char *URL, ns1__ReferredDocumentType3Choice const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReferredDocumentType3Choice", p->soap_type() == SOAP_TYPE_ns1__ReferredDocumentType3Choice ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ReferredDocumentType3Choice(struct soap *soap, const char *URL, ns1__ReferredDocumentType3Choice const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReferredDocumentType3Choice", p->soap_type() == SOAP_TYPE_ns1__ReferredDocumentType3Choice ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ReferredDocumentType3Choice * SOAP_FMAC4 soap_get_ns1__ReferredDocumentType3Choice(struct soap*, ns1__ReferredDocumentType3Choice *, const char*, const char*);

inline int soap_read_ns1__ReferredDocumentType3Choice(struct soap *soap, ns1__ReferredDocumentType3Choice *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__ReferredDocumentType3Choice(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ReferredDocumentType3Choice(struct soap *soap, const char *URL, ns1__ReferredDocumentType3Choice *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ReferredDocumentType3Choice(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__ReferredDocumentType3Choice(struct soap *soap, ns1__ReferredDocumentType3Choice *p)
{
	if (::soap_read_ns1__ReferredDocumentType3Choice(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__ReferredDocumentInformation7_DEFINED
#define SOAP_TYPE_ns1__ReferredDocumentInformation7_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ReferredDocumentInformation7(struct soap*, const char*, int, const ns1__ReferredDocumentInformation7 *, const char*);
SOAP_FMAC3 ns1__ReferredDocumentInformation7 * SOAP_FMAC4 soap_in_ns1__ReferredDocumentInformation7(struct soap*, const char*, ns1__ReferredDocumentInformation7 *, const char*);
SOAP_FMAC1 ns1__ReferredDocumentInformation7 * SOAP_FMAC2 soap_instantiate_ns1__ReferredDocumentInformation7(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ReferredDocumentInformation7 * soap_new_ns1__ReferredDocumentInformation7(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ReferredDocumentInformation7(soap, n, NULL, NULL, NULL);
}

inline ns1__ReferredDocumentInformation7 * soap_new_req_ns1__ReferredDocumentInformation7(
	struct soap *soap)
{
	ns1__ReferredDocumentInformation7 *_p = ::soap_new_ns1__ReferredDocumentInformation7(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__ReferredDocumentInformation7 * soap_new_set_ns1__ReferredDocumentInformation7(
	struct soap *soap,
	ns1__ReferredDocumentType4 *Tp,
	std::string *Nb,
	std::string *RltdDt,
	const std::vector<ns1__DocumentLineInformation1 *> & LineDtls)
{
	ns1__ReferredDocumentInformation7 *_p = ::soap_new_ns1__ReferredDocumentInformation7(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ReferredDocumentInformation7::Tp = Tp;
		_p->ns1__ReferredDocumentInformation7::Nb = Nb;
		_p->ns1__ReferredDocumentInformation7::RltdDt = RltdDt;
		_p->ns1__ReferredDocumentInformation7::LineDtls = LineDtls;
	}
	return _p;
}

inline int soap_write_ns1__ReferredDocumentInformation7(struct soap *soap, ns1__ReferredDocumentInformation7 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReferredDocumentInformation7", p->soap_type() == SOAP_TYPE_ns1__ReferredDocumentInformation7 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ReferredDocumentInformation7(struct soap *soap, const char *URL, ns1__ReferredDocumentInformation7 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReferredDocumentInformation7", p->soap_type() == SOAP_TYPE_ns1__ReferredDocumentInformation7 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ReferredDocumentInformation7(struct soap *soap, const char *URL, ns1__ReferredDocumentInformation7 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReferredDocumentInformation7", p->soap_type() == SOAP_TYPE_ns1__ReferredDocumentInformation7 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ReferredDocumentInformation7(struct soap *soap, const char *URL, ns1__ReferredDocumentInformation7 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReferredDocumentInformation7", p->soap_type() == SOAP_TYPE_ns1__ReferredDocumentInformation7 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ReferredDocumentInformation7 * SOAP_FMAC4 soap_get_ns1__ReferredDocumentInformation7(struct soap*, ns1__ReferredDocumentInformation7 *, const char*, const char*);

inline int soap_read_ns1__ReferredDocumentInformation7(struct soap *soap, ns1__ReferredDocumentInformation7 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__ReferredDocumentInformation7(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ReferredDocumentInformation7(struct soap *soap, const char *URL, ns1__ReferredDocumentInformation7 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ReferredDocumentInformation7(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__ReferredDocumentInformation7(struct soap *soap, ns1__ReferredDocumentInformation7 *p)
{
	if (::soap_read_ns1__ReferredDocumentInformation7(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__Purpose2Choice_DEFINED
#define SOAP_TYPE_ns1__Purpose2Choice_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Purpose2Choice(struct soap*, const char*, int, const ns1__Purpose2Choice *, const char*);
SOAP_FMAC3 ns1__Purpose2Choice * SOAP_FMAC4 soap_in_ns1__Purpose2Choice(struct soap*, const char*, ns1__Purpose2Choice *, const char*);
SOAP_FMAC1 ns1__Purpose2Choice * SOAP_FMAC2 soap_instantiate_ns1__Purpose2Choice(struct soap*, int, const char*, const char*, size_t*);

inline ns1__Purpose2Choice * soap_new_ns1__Purpose2Choice(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__Purpose2Choice(soap, n, NULL, NULL, NULL);
}

inline ns1__Purpose2Choice * soap_new_req_ns1__Purpose2Choice(
	struct soap *soap,
	const union _ns1__union_Purpose2Choice& union_Purpose2Choice)
{
	ns1__Purpose2Choice *_p = ::soap_new_ns1__Purpose2Choice(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__Purpose2Choice::union_Purpose2Choice = union_Purpose2Choice;
	}
	return _p;
}

inline ns1__Purpose2Choice * soap_new_set_ns1__Purpose2Choice(
	struct soap *soap,
	int __union_Purpose2Choice,
	const union _ns1__union_Purpose2Choice& union_Purpose2Choice)
{
	ns1__Purpose2Choice *_p = ::soap_new_ns1__Purpose2Choice(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__Purpose2Choice::__union_Purpose2Choice = __union_Purpose2Choice;
		_p->ns1__Purpose2Choice::union_Purpose2Choice = union_Purpose2Choice;
	}
	return _p;
}

inline int soap_write_ns1__Purpose2Choice(struct soap *soap, ns1__Purpose2Choice const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Purpose2Choice", p->soap_type() == SOAP_TYPE_ns1__Purpose2Choice ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__Purpose2Choice(struct soap *soap, const char *URL, ns1__Purpose2Choice const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Purpose2Choice", p->soap_type() == SOAP_TYPE_ns1__Purpose2Choice ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__Purpose2Choice(struct soap *soap, const char *URL, ns1__Purpose2Choice const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Purpose2Choice", p->soap_type() == SOAP_TYPE_ns1__Purpose2Choice ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__Purpose2Choice(struct soap *soap, const char *URL, ns1__Purpose2Choice const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Purpose2Choice", p->soap_type() == SOAP_TYPE_ns1__Purpose2Choice ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__Purpose2Choice * SOAP_FMAC4 soap_get_ns1__Purpose2Choice(struct soap*, ns1__Purpose2Choice *, const char*, const char*);

inline int soap_read_ns1__Purpose2Choice(struct soap *soap, ns1__Purpose2Choice *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__Purpose2Choice(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__Purpose2Choice(struct soap *soap, const char *URL, ns1__Purpose2Choice *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__Purpose2Choice(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__Purpose2Choice(struct soap *soap, ns1__Purpose2Choice *p)
{
	if (::soap_read_ns1__Purpose2Choice(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__ProxyAccountType1Choice_DEFINED
#define SOAP_TYPE_ns1__ProxyAccountType1Choice_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ProxyAccountType1Choice(struct soap*, const char*, int, const ns1__ProxyAccountType1Choice *, const char*);
SOAP_FMAC3 ns1__ProxyAccountType1Choice * SOAP_FMAC4 soap_in_ns1__ProxyAccountType1Choice(struct soap*, const char*, ns1__ProxyAccountType1Choice *, const char*);
SOAP_FMAC1 ns1__ProxyAccountType1Choice * SOAP_FMAC2 soap_instantiate_ns1__ProxyAccountType1Choice(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ProxyAccountType1Choice * soap_new_ns1__ProxyAccountType1Choice(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ProxyAccountType1Choice(soap, n, NULL, NULL, NULL);
}

inline ns1__ProxyAccountType1Choice * soap_new_req_ns1__ProxyAccountType1Choice(
	struct soap *soap,
	const union _ns1__union_ProxyAccountType1Choice& union_ProxyAccountType1Choice)
{
	ns1__ProxyAccountType1Choice *_p = ::soap_new_ns1__ProxyAccountType1Choice(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ProxyAccountType1Choice::union_ProxyAccountType1Choice = union_ProxyAccountType1Choice;
	}
	return _p;
}

inline ns1__ProxyAccountType1Choice * soap_new_set_ns1__ProxyAccountType1Choice(
	struct soap *soap,
	int __union_ProxyAccountType1Choice,
	const union _ns1__union_ProxyAccountType1Choice& union_ProxyAccountType1Choice)
{
	ns1__ProxyAccountType1Choice *_p = ::soap_new_ns1__ProxyAccountType1Choice(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ProxyAccountType1Choice::__union_ProxyAccountType1Choice = __union_ProxyAccountType1Choice;
		_p->ns1__ProxyAccountType1Choice::union_ProxyAccountType1Choice = union_ProxyAccountType1Choice;
	}
	return _p;
}

inline int soap_write_ns1__ProxyAccountType1Choice(struct soap *soap, ns1__ProxyAccountType1Choice const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ProxyAccountType1Choice", p->soap_type() == SOAP_TYPE_ns1__ProxyAccountType1Choice ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ProxyAccountType1Choice(struct soap *soap, const char *URL, ns1__ProxyAccountType1Choice const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ProxyAccountType1Choice", p->soap_type() == SOAP_TYPE_ns1__ProxyAccountType1Choice ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ProxyAccountType1Choice(struct soap *soap, const char *URL, ns1__ProxyAccountType1Choice const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ProxyAccountType1Choice", p->soap_type() == SOAP_TYPE_ns1__ProxyAccountType1Choice ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ProxyAccountType1Choice(struct soap *soap, const char *URL, ns1__ProxyAccountType1Choice const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ProxyAccountType1Choice", p->soap_type() == SOAP_TYPE_ns1__ProxyAccountType1Choice ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ProxyAccountType1Choice * SOAP_FMAC4 soap_get_ns1__ProxyAccountType1Choice(struct soap*, ns1__ProxyAccountType1Choice *, const char*, const char*);

inline int soap_read_ns1__ProxyAccountType1Choice(struct soap *soap, ns1__ProxyAccountType1Choice *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__ProxyAccountType1Choice(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ProxyAccountType1Choice(struct soap *soap, const char *URL, ns1__ProxyAccountType1Choice *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ProxyAccountType1Choice(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__ProxyAccountType1Choice(struct soap *soap, ns1__ProxyAccountType1Choice *p)
{
	if (::soap_read_ns1__ProxyAccountType1Choice(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__ProxyAccountIdentification1_DEFINED
#define SOAP_TYPE_ns1__ProxyAccountIdentification1_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ProxyAccountIdentification1(struct soap*, const char*, int, const ns1__ProxyAccountIdentification1 *, const char*);
SOAP_FMAC3 ns1__ProxyAccountIdentification1 * SOAP_FMAC4 soap_in_ns1__ProxyAccountIdentification1(struct soap*, const char*, ns1__ProxyAccountIdentification1 *, const char*);
SOAP_FMAC1 ns1__ProxyAccountIdentification1 * SOAP_FMAC2 soap_instantiate_ns1__ProxyAccountIdentification1(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ProxyAccountIdentification1 * soap_new_ns1__ProxyAccountIdentification1(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ProxyAccountIdentification1(soap, n, NULL, NULL, NULL);
}

inline ns1__ProxyAccountIdentification1 * soap_new_req_ns1__ProxyAccountIdentification1(
	struct soap *soap,
	const std::string& Id)
{
	ns1__ProxyAccountIdentification1 *_p = ::soap_new_ns1__ProxyAccountIdentification1(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ProxyAccountIdentification1::Id = Id;
	}
	return _p;
}

inline ns1__ProxyAccountIdentification1 * soap_new_set_ns1__ProxyAccountIdentification1(
	struct soap *soap,
	ns1__ProxyAccountType1Choice *Tp,
	const std::string& Id)
{
	ns1__ProxyAccountIdentification1 *_p = ::soap_new_ns1__ProxyAccountIdentification1(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ProxyAccountIdentification1::Tp = Tp;
		_p->ns1__ProxyAccountIdentification1::Id = Id;
	}
	return _p;
}

inline int soap_write_ns1__ProxyAccountIdentification1(struct soap *soap, ns1__ProxyAccountIdentification1 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ProxyAccountIdentification1", p->soap_type() == SOAP_TYPE_ns1__ProxyAccountIdentification1 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ProxyAccountIdentification1(struct soap *soap, const char *URL, ns1__ProxyAccountIdentification1 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ProxyAccountIdentification1", p->soap_type() == SOAP_TYPE_ns1__ProxyAccountIdentification1 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ProxyAccountIdentification1(struct soap *soap, const char *URL, ns1__ProxyAccountIdentification1 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ProxyAccountIdentification1", p->soap_type() == SOAP_TYPE_ns1__ProxyAccountIdentification1 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ProxyAccountIdentification1(struct soap *soap, const char *URL, ns1__ProxyAccountIdentification1 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ProxyAccountIdentification1", p->soap_type() == SOAP_TYPE_ns1__ProxyAccountIdentification1 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ProxyAccountIdentification1 * SOAP_FMAC4 soap_get_ns1__ProxyAccountIdentification1(struct soap*, ns1__ProxyAccountIdentification1 *, const char*, const char*);

inline int soap_read_ns1__ProxyAccountIdentification1(struct soap *soap, ns1__ProxyAccountIdentification1 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__ProxyAccountIdentification1(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ProxyAccountIdentification1(struct soap *soap, const char *URL, ns1__ProxyAccountIdentification1 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ProxyAccountIdentification1(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__ProxyAccountIdentification1(struct soap *soap, ns1__ProxyAccountIdentification1 *p)
{
	if (::soap_read_ns1__ProxyAccountIdentification1(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__PostalAddress24_DEFINED
#define SOAP_TYPE_ns1__PostalAddress24_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__PostalAddress24(struct soap*, const char*, int, const ns1__PostalAddress24 *, const char*);
SOAP_FMAC3 ns1__PostalAddress24 * SOAP_FMAC4 soap_in_ns1__PostalAddress24(struct soap*, const char*, ns1__PostalAddress24 *, const char*);
SOAP_FMAC1 ns1__PostalAddress24 * SOAP_FMAC2 soap_instantiate_ns1__PostalAddress24(struct soap*, int, const char*, const char*, size_t*);

inline ns1__PostalAddress24 * soap_new_ns1__PostalAddress24(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__PostalAddress24(soap, n, NULL, NULL, NULL);
}

inline ns1__PostalAddress24 * soap_new_req_ns1__PostalAddress24(
	struct soap *soap)
{
	ns1__PostalAddress24 *_p = ::soap_new_ns1__PostalAddress24(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__PostalAddress24 * soap_new_set_ns1__PostalAddress24(
	struct soap *soap,
	ns1__AddressType3Choice *AdrTp,
	std::string *Dept,
	std::string *SubDept,
	std::string *StrtNm,
	std::string *BldgNb,
	std::string *BldgNm,
	std::string *Flr,
	std::string *PstBx,
	std::string *Room,
	std::string *PstCd,
	std::string *TwnNm,
	std::string *TwnLctnNm,
	std::string *DstrctNm,
	std::string *CtrySubDvsn,
	std::string *Ctry,
	const std::vector<std::string> & AdrLine)
{
	ns1__PostalAddress24 *_p = ::soap_new_ns1__PostalAddress24(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PostalAddress24::AdrTp = AdrTp;
		_p->ns1__PostalAddress24::Dept = Dept;
		_p->ns1__PostalAddress24::SubDept = SubDept;
		_p->ns1__PostalAddress24::StrtNm = StrtNm;
		_p->ns1__PostalAddress24::BldgNb = BldgNb;
		_p->ns1__PostalAddress24::BldgNm = BldgNm;
		_p->ns1__PostalAddress24::Flr = Flr;
		_p->ns1__PostalAddress24::PstBx = PstBx;
		_p->ns1__PostalAddress24::Room = Room;
		_p->ns1__PostalAddress24::PstCd = PstCd;
		_p->ns1__PostalAddress24::TwnNm = TwnNm;
		_p->ns1__PostalAddress24::TwnLctnNm = TwnLctnNm;
		_p->ns1__PostalAddress24::DstrctNm = DstrctNm;
		_p->ns1__PostalAddress24::CtrySubDvsn = CtrySubDvsn;
		_p->ns1__PostalAddress24::Ctry = Ctry;
		_p->ns1__PostalAddress24::AdrLine = AdrLine;
	}
	return _p;
}

inline int soap_write_ns1__PostalAddress24(struct soap *soap, ns1__PostalAddress24 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PostalAddress24", p->soap_type() == SOAP_TYPE_ns1__PostalAddress24 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__PostalAddress24(struct soap *soap, const char *URL, ns1__PostalAddress24 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PostalAddress24", p->soap_type() == SOAP_TYPE_ns1__PostalAddress24 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__PostalAddress24(struct soap *soap, const char *URL, ns1__PostalAddress24 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PostalAddress24", p->soap_type() == SOAP_TYPE_ns1__PostalAddress24 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__PostalAddress24(struct soap *soap, const char *URL, ns1__PostalAddress24 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PostalAddress24", p->soap_type() == SOAP_TYPE_ns1__PostalAddress24 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__PostalAddress24 * SOAP_FMAC4 soap_get_ns1__PostalAddress24(struct soap*, ns1__PostalAddress24 *, const char*, const char*);

inline int soap_read_ns1__PostalAddress24(struct soap *soap, ns1__PostalAddress24 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__PostalAddress24(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__PostalAddress24(struct soap *soap, const char *URL, ns1__PostalAddress24 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__PostalAddress24(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__PostalAddress24(struct soap *soap, ns1__PostalAddress24 *p)
{
	if (::soap_read_ns1__PostalAddress24(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__PersonIdentificationSchemeName1Choice_DEFINED
#define SOAP_TYPE_ns1__PersonIdentificationSchemeName1Choice_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__PersonIdentificationSchemeName1Choice(struct soap*, const char*, int, const ns1__PersonIdentificationSchemeName1Choice *, const char*);
SOAP_FMAC3 ns1__PersonIdentificationSchemeName1Choice * SOAP_FMAC4 soap_in_ns1__PersonIdentificationSchemeName1Choice(struct soap*, const char*, ns1__PersonIdentificationSchemeName1Choice *, const char*);
SOAP_FMAC1 ns1__PersonIdentificationSchemeName1Choice * SOAP_FMAC2 soap_instantiate_ns1__PersonIdentificationSchemeName1Choice(struct soap*, int, const char*, const char*, size_t*);

inline ns1__PersonIdentificationSchemeName1Choice * soap_new_ns1__PersonIdentificationSchemeName1Choice(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__PersonIdentificationSchemeName1Choice(soap, n, NULL, NULL, NULL);
}

inline ns1__PersonIdentificationSchemeName1Choice * soap_new_req_ns1__PersonIdentificationSchemeName1Choice(
	struct soap *soap,
	const union _ns1__union_PersonIdentificationSchemeName1Choice& union_PersonIdentificationSchemeName1Choice)
{
	ns1__PersonIdentificationSchemeName1Choice *_p = ::soap_new_ns1__PersonIdentificationSchemeName1Choice(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PersonIdentificationSchemeName1Choice::union_PersonIdentificationSchemeName1Choice = union_PersonIdentificationSchemeName1Choice;
	}
	return _p;
}

inline ns1__PersonIdentificationSchemeName1Choice * soap_new_set_ns1__PersonIdentificationSchemeName1Choice(
	struct soap *soap,
	int __union_PersonIdentificationSchemeName1Choice,
	const union _ns1__union_PersonIdentificationSchemeName1Choice& union_PersonIdentificationSchemeName1Choice)
{
	ns1__PersonIdentificationSchemeName1Choice *_p = ::soap_new_ns1__PersonIdentificationSchemeName1Choice(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PersonIdentificationSchemeName1Choice::__union_PersonIdentificationSchemeName1Choice = __union_PersonIdentificationSchemeName1Choice;
		_p->ns1__PersonIdentificationSchemeName1Choice::union_PersonIdentificationSchemeName1Choice = union_PersonIdentificationSchemeName1Choice;
	}
	return _p;
}

inline int soap_write_ns1__PersonIdentificationSchemeName1Choice(struct soap *soap, ns1__PersonIdentificationSchemeName1Choice const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PersonIdentificationSchemeName1Choice", p->soap_type() == SOAP_TYPE_ns1__PersonIdentificationSchemeName1Choice ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__PersonIdentificationSchemeName1Choice(struct soap *soap, const char *URL, ns1__PersonIdentificationSchemeName1Choice const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PersonIdentificationSchemeName1Choice", p->soap_type() == SOAP_TYPE_ns1__PersonIdentificationSchemeName1Choice ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__PersonIdentificationSchemeName1Choice(struct soap *soap, const char *URL, ns1__PersonIdentificationSchemeName1Choice const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PersonIdentificationSchemeName1Choice", p->soap_type() == SOAP_TYPE_ns1__PersonIdentificationSchemeName1Choice ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__PersonIdentificationSchemeName1Choice(struct soap *soap, const char *URL, ns1__PersonIdentificationSchemeName1Choice const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PersonIdentificationSchemeName1Choice", p->soap_type() == SOAP_TYPE_ns1__PersonIdentificationSchemeName1Choice ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__PersonIdentificationSchemeName1Choice * SOAP_FMAC4 soap_get_ns1__PersonIdentificationSchemeName1Choice(struct soap*, ns1__PersonIdentificationSchemeName1Choice *, const char*, const char*);

inline int soap_read_ns1__PersonIdentificationSchemeName1Choice(struct soap *soap, ns1__PersonIdentificationSchemeName1Choice *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__PersonIdentificationSchemeName1Choice(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__PersonIdentificationSchemeName1Choice(struct soap *soap, const char *URL, ns1__PersonIdentificationSchemeName1Choice *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__PersonIdentificationSchemeName1Choice(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__PersonIdentificationSchemeName1Choice(struct soap *soap, ns1__PersonIdentificationSchemeName1Choice *p)
{
	if (::soap_read_ns1__PersonIdentificationSchemeName1Choice(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__PersonIdentification13_DEFINED
#define SOAP_TYPE_ns1__PersonIdentification13_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__PersonIdentification13(struct soap*, const char*, int, const ns1__PersonIdentification13 *, const char*);
SOAP_FMAC3 ns1__PersonIdentification13 * SOAP_FMAC4 soap_in_ns1__PersonIdentification13(struct soap*, const char*, ns1__PersonIdentification13 *, const char*);
SOAP_FMAC1 ns1__PersonIdentification13 * SOAP_FMAC2 soap_instantiate_ns1__PersonIdentification13(struct soap*, int, const char*, const char*, size_t*);

inline ns1__PersonIdentification13 * soap_new_ns1__PersonIdentification13(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__PersonIdentification13(soap, n, NULL, NULL, NULL);
}

inline ns1__PersonIdentification13 * soap_new_req_ns1__PersonIdentification13(
	struct soap *soap)
{
	ns1__PersonIdentification13 *_p = ::soap_new_ns1__PersonIdentification13(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__PersonIdentification13 * soap_new_set_ns1__PersonIdentification13(
	struct soap *soap,
	ns1__DateAndPlaceOfBirth1 *DtAndPlcOfBirth,
	const std::vector<ns1__GenericPersonIdentification1 *> & Othr)
{
	ns1__PersonIdentification13 *_p = ::soap_new_ns1__PersonIdentification13(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PersonIdentification13::DtAndPlcOfBirth = DtAndPlcOfBirth;
		_p->ns1__PersonIdentification13::Othr = Othr;
	}
	return _p;
}

inline int soap_write_ns1__PersonIdentification13(struct soap *soap, ns1__PersonIdentification13 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PersonIdentification13", p->soap_type() == SOAP_TYPE_ns1__PersonIdentification13 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__PersonIdentification13(struct soap *soap, const char *URL, ns1__PersonIdentification13 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PersonIdentification13", p->soap_type() == SOAP_TYPE_ns1__PersonIdentification13 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__PersonIdentification13(struct soap *soap, const char *URL, ns1__PersonIdentification13 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PersonIdentification13", p->soap_type() == SOAP_TYPE_ns1__PersonIdentification13 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__PersonIdentification13(struct soap *soap, const char *URL, ns1__PersonIdentification13 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PersonIdentification13", p->soap_type() == SOAP_TYPE_ns1__PersonIdentification13 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__PersonIdentification13 * SOAP_FMAC4 soap_get_ns1__PersonIdentification13(struct soap*, ns1__PersonIdentification13 *, const char*, const char*);

inline int soap_read_ns1__PersonIdentification13(struct soap *soap, ns1__PersonIdentification13 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__PersonIdentification13(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__PersonIdentification13(struct soap *soap, const char *URL, ns1__PersonIdentification13 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__PersonIdentification13(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__PersonIdentification13(struct soap *soap, ns1__PersonIdentification13 *p)
{
	if (::soap_read_ns1__PersonIdentification13(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__PaymentTypeInformation26_DEFINED
#define SOAP_TYPE_ns1__PaymentTypeInformation26_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__PaymentTypeInformation26(struct soap*, const char*, int, const ns1__PaymentTypeInformation26 *, const char*);
SOAP_FMAC3 ns1__PaymentTypeInformation26 * SOAP_FMAC4 soap_in_ns1__PaymentTypeInformation26(struct soap*, const char*, ns1__PaymentTypeInformation26 *, const char*);
SOAP_FMAC1 ns1__PaymentTypeInformation26 * SOAP_FMAC2 soap_instantiate_ns1__PaymentTypeInformation26(struct soap*, int, const char*, const char*, size_t*);

inline ns1__PaymentTypeInformation26 * soap_new_ns1__PaymentTypeInformation26(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__PaymentTypeInformation26(soap, n, NULL, NULL, NULL);
}

inline ns1__PaymentTypeInformation26 * soap_new_req_ns1__PaymentTypeInformation26(
	struct soap *soap)
{
	ns1__PaymentTypeInformation26 *_p = ::soap_new_ns1__PaymentTypeInformation26(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__PaymentTypeInformation26 * soap_new_set_ns1__PaymentTypeInformation26(
	struct soap *soap,
	enum ns1__Priority2Code *InstrPrty,
	const std::vector<ns1__ServiceLevel8Choice *> & SvcLvl,
	ns1__LocalInstrument2Choice *LclInstrm,
	ns1__CategoryPurpose1Choice *CtgyPurp)
{
	ns1__PaymentTypeInformation26 *_p = ::soap_new_ns1__PaymentTypeInformation26(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PaymentTypeInformation26::InstrPrty = InstrPrty;
		_p->ns1__PaymentTypeInformation26::SvcLvl = SvcLvl;
		_p->ns1__PaymentTypeInformation26::LclInstrm = LclInstrm;
		_p->ns1__PaymentTypeInformation26::CtgyPurp = CtgyPurp;
	}
	return _p;
}

inline int soap_write_ns1__PaymentTypeInformation26(struct soap *soap, ns1__PaymentTypeInformation26 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PaymentTypeInformation26", p->soap_type() == SOAP_TYPE_ns1__PaymentTypeInformation26 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__PaymentTypeInformation26(struct soap *soap, const char *URL, ns1__PaymentTypeInformation26 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PaymentTypeInformation26", p->soap_type() == SOAP_TYPE_ns1__PaymentTypeInformation26 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__PaymentTypeInformation26(struct soap *soap, const char *URL, ns1__PaymentTypeInformation26 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PaymentTypeInformation26", p->soap_type() == SOAP_TYPE_ns1__PaymentTypeInformation26 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__PaymentTypeInformation26(struct soap *soap, const char *URL, ns1__PaymentTypeInformation26 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PaymentTypeInformation26", p->soap_type() == SOAP_TYPE_ns1__PaymentTypeInformation26 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__PaymentTypeInformation26 * SOAP_FMAC4 soap_get_ns1__PaymentTypeInformation26(struct soap*, ns1__PaymentTypeInformation26 *, const char*, const char*);

inline int soap_read_ns1__PaymentTypeInformation26(struct soap *soap, ns1__PaymentTypeInformation26 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__PaymentTypeInformation26(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__PaymentTypeInformation26(struct soap *soap, const char *URL, ns1__PaymentTypeInformation26 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__PaymentTypeInformation26(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__PaymentTypeInformation26(struct soap *soap, ns1__PaymentTypeInformation26 *p)
{
	if (::soap_read_ns1__PaymentTypeInformation26(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__PaymentInstruction40_DEFINED
#define SOAP_TYPE_ns1__PaymentInstruction40_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__PaymentInstruction40(struct soap*, const char*, int, const ns1__PaymentInstruction40 *, const char*);
SOAP_FMAC3 ns1__PaymentInstruction40 * SOAP_FMAC4 soap_in_ns1__PaymentInstruction40(struct soap*, const char*, ns1__PaymentInstruction40 *, const char*);
SOAP_FMAC1 ns1__PaymentInstruction40 * SOAP_FMAC2 soap_instantiate_ns1__PaymentInstruction40(struct soap*, int, const char*, const char*, size_t*);

inline ns1__PaymentInstruction40 * soap_new_ns1__PaymentInstruction40(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__PaymentInstruction40(soap, n, NULL, NULL, NULL);
}

inline ns1__PaymentInstruction40 * soap_new_req_ns1__PaymentInstruction40(
	struct soap *soap,
	const std::string& PmtInfId,
	enum ns1__PaymentMethod3Code PmtMtd,
	ns1__DateAndDateTime2Choice *ReqdExctnDt,
	ns1__PartyIdentification135 *Dbtr,
	ns1__CashAccount40 *DbtrAcct,
	ns1__BranchAndFinancialInstitutionIdentification6 *DbtrAgt,
	const std::vector<ns1__CreditTransferTransaction54 *> & CdtTrfTxInf)
{
	ns1__PaymentInstruction40 *_p = ::soap_new_ns1__PaymentInstruction40(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PaymentInstruction40::PmtInfId = PmtInfId;
		_p->ns1__PaymentInstruction40::PmtMtd = PmtMtd;
		_p->ns1__PaymentInstruction40::ReqdExctnDt = ReqdExctnDt;
		_p->ns1__PaymentInstruction40::Dbtr = Dbtr;
		_p->ns1__PaymentInstruction40::DbtrAcct = DbtrAcct;
		_p->ns1__PaymentInstruction40::DbtrAgt = DbtrAgt;
		_p->ns1__PaymentInstruction40::CdtTrfTxInf = CdtTrfTxInf;
	}
	return _p;
}

inline ns1__PaymentInstruction40 * soap_new_set_ns1__PaymentInstruction40(
	struct soap *soap,
	const std::string& PmtInfId,
	enum ns1__PaymentMethod3Code PmtMtd,
	ns1__AdviceType1 *ReqdAdvcTp,
	bool *BtchBookg,
	std::string *NbOfTxs,
	std::string *CtrlSum,
	ns1__PaymentTypeInformation26 *PmtTpInf,
	ns1__DateAndDateTime2Choice *ReqdExctnDt,
	std::string *PoolgAdjstmntDt,
	ns1__PartyIdentification135 *Dbtr,
	ns1__CashAccount40 *DbtrAcct,
	ns1__BranchAndFinancialInstitutionIdentification6 *DbtrAgt,
	ns1__CashAccount40 *DbtrAgtAcct,
	std::string *InstrForDbtrAgt,
	ns1__PartyIdentification135 *UltmtDbtr,
	enum ns1__ChargeBearerType1Code *ChrgBr,
	ns1__CashAccount40 *ChrgsAcct,
	ns1__BranchAndFinancialInstitutionIdentification6 *ChrgsAcctAgt,
	const std::vector<ns1__CreditTransferTransaction54 *> & CdtTrfTxInf)
{
	ns1__PaymentInstruction40 *_p = ::soap_new_ns1__PaymentInstruction40(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PaymentInstruction40::PmtInfId = PmtInfId;
		_p->ns1__PaymentInstruction40::PmtMtd = PmtMtd;
		_p->ns1__PaymentInstruction40::ReqdAdvcTp = ReqdAdvcTp;
		_p->ns1__PaymentInstruction40::BtchBookg = BtchBookg;
		_p->ns1__PaymentInstruction40::NbOfTxs = NbOfTxs;
		_p->ns1__PaymentInstruction40::CtrlSum = CtrlSum;
		_p->ns1__PaymentInstruction40::PmtTpInf = PmtTpInf;
		_p->ns1__PaymentInstruction40::ReqdExctnDt = ReqdExctnDt;
		_p->ns1__PaymentInstruction40::PoolgAdjstmntDt = PoolgAdjstmntDt;
		_p->ns1__PaymentInstruction40::Dbtr = Dbtr;
		_p->ns1__PaymentInstruction40::DbtrAcct = DbtrAcct;
		_p->ns1__PaymentInstruction40::DbtrAgt = DbtrAgt;
		_p->ns1__PaymentInstruction40::DbtrAgtAcct = DbtrAgtAcct;
		_p->ns1__PaymentInstruction40::InstrForDbtrAgt = InstrForDbtrAgt;
		_p->ns1__PaymentInstruction40::UltmtDbtr = UltmtDbtr;
		_p->ns1__PaymentInstruction40::ChrgBr = ChrgBr;
		_p->ns1__PaymentInstruction40::ChrgsAcct = ChrgsAcct;
		_p->ns1__PaymentInstruction40::ChrgsAcctAgt = ChrgsAcctAgt;
		_p->ns1__PaymentInstruction40::CdtTrfTxInf = CdtTrfTxInf;
	}
	return _p;
}

inline int soap_write_ns1__PaymentInstruction40(struct soap *soap, ns1__PaymentInstruction40 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PaymentInstruction40", p->soap_type() == SOAP_TYPE_ns1__PaymentInstruction40 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__PaymentInstruction40(struct soap *soap, const char *URL, ns1__PaymentInstruction40 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PaymentInstruction40", p->soap_type() == SOAP_TYPE_ns1__PaymentInstruction40 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__PaymentInstruction40(struct soap *soap, const char *URL, ns1__PaymentInstruction40 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PaymentInstruction40", p->soap_type() == SOAP_TYPE_ns1__PaymentInstruction40 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__PaymentInstruction40(struct soap *soap, const char *URL, ns1__PaymentInstruction40 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PaymentInstruction40", p->soap_type() == SOAP_TYPE_ns1__PaymentInstruction40 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__PaymentInstruction40 * SOAP_FMAC4 soap_get_ns1__PaymentInstruction40(struct soap*, ns1__PaymentInstruction40 *, const char*, const char*);

inline int soap_read_ns1__PaymentInstruction40(struct soap *soap, ns1__PaymentInstruction40 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__PaymentInstruction40(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__PaymentInstruction40(struct soap *soap, const char *URL, ns1__PaymentInstruction40 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__PaymentInstruction40(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__PaymentInstruction40(struct soap *soap, ns1__PaymentInstruction40 *p)
{
	if (::soap_read_ns1__PaymentInstruction40(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__PaymentInitiationSource1_DEFINED
#define SOAP_TYPE_ns1__PaymentInitiationSource1_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__PaymentInitiationSource1(struct soap*, const char*, int, const ns1__PaymentInitiationSource1 *, const char*);
SOAP_FMAC3 ns1__PaymentInitiationSource1 * SOAP_FMAC4 soap_in_ns1__PaymentInitiationSource1(struct soap*, const char*, ns1__PaymentInitiationSource1 *, const char*);
SOAP_FMAC1 ns1__PaymentInitiationSource1 * SOAP_FMAC2 soap_instantiate_ns1__PaymentInitiationSource1(struct soap*, int, const char*, const char*, size_t*);

inline ns1__PaymentInitiationSource1 * soap_new_ns1__PaymentInitiationSource1(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__PaymentInitiationSource1(soap, n, NULL, NULL, NULL);
}

inline ns1__PaymentInitiationSource1 * soap_new_req_ns1__PaymentInitiationSource1(
	struct soap *soap,
	const std::string& Nm)
{
	ns1__PaymentInitiationSource1 *_p = ::soap_new_ns1__PaymentInitiationSource1(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PaymentInitiationSource1::Nm = Nm;
	}
	return _p;
}

inline ns1__PaymentInitiationSource1 * soap_new_set_ns1__PaymentInitiationSource1(
	struct soap *soap,
	const std::string& Nm,
	std::string *Prvdr,
	std::string *Vrsn)
{
	ns1__PaymentInitiationSource1 *_p = ::soap_new_ns1__PaymentInitiationSource1(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PaymentInitiationSource1::Nm = Nm;
		_p->ns1__PaymentInitiationSource1::Prvdr = Prvdr;
		_p->ns1__PaymentInitiationSource1::Vrsn = Vrsn;
	}
	return _p;
}

inline int soap_write_ns1__PaymentInitiationSource1(struct soap *soap, ns1__PaymentInitiationSource1 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PaymentInitiationSource1", p->soap_type() == SOAP_TYPE_ns1__PaymentInitiationSource1 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__PaymentInitiationSource1(struct soap *soap, const char *URL, ns1__PaymentInitiationSource1 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PaymentInitiationSource1", p->soap_type() == SOAP_TYPE_ns1__PaymentInitiationSource1 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__PaymentInitiationSource1(struct soap *soap, const char *URL, ns1__PaymentInitiationSource1 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PaymentInitiationSource1", p->soap_type() == SOAP_TYPE_ns1__PaymentInitiationSource1 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__PaymentInitiationSource1(struct soap *soap, const char *URL, ns1__PaymentInitiationSource1 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PaymentInitiationSource1", p->soap_type() == SOAP_TYPE_ns1__PaymentInitiationSource1 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__PaymentInitiationSource1 * SOAP_FMAC4 soap_get_ns1__PaymentInitiationSource1(struct soap*, ns1__PaymentInitiationSource1 *, const char*, const char*);

inline int soap_read_ns1__PaymentInitiationSource1(struct soap *soap, ns1__PaymentInitiationSource1 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__PaymentInitiationSource1(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__PaymentInitiationSource1(struct soap *soap, const char *URL, ns1__PaymentInitiationSource1 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__PaymentInitiationSource1(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__PaymentInitiationSource1(struct soap *soap, ns1__PaymentInitiationSource1 *p)
{
	if (::soap_read_ns1__PaymentInitiationSource1(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__PaymentIdentification6_DEFINED
#define SOAP_TYPE_ns1__PaymentIdentification6_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__PaymentIdentification6(struct soap*, const char*, int, const ns1__PaymentIdentification6 *, const char*);
SOAP_FMAC3 ns1__PaymentIdentification6 * SOAP_FMAC4 soap_in_ns1__PaymentIdentification6(struct soap*, const char*, ns1__PaymentIdentification6 *, const char*);
SOAP_FMAC1 ns1__PaymentIdentification6 * SOAP_FMAC2 soap_instantiate_ns1__PaymentIdentification6(struct soap*, int, const char*, const char*, size_t*);

inline ns1__PaymentIdentification6 * soap_new_ns1__PaymentIdentification6(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__PaymentIdentification6(soap, n, NULL, NULL, NULL);
}

inline ns1__PaymentIdentification6 * soap_new_req_ns1__PaymentIdentification6(
	struct soap *soap,
	const std::string& EndToEndId)
{
	ns1__PaymentIdentification6 *_p = ::soap_new_ns1__PaymentIdentification6(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PaymentIdentification6::EndToEndId = EndToEndId;
	}
	return _p;
}

inline ns1__PaymentIdentification6 * soap_new_set_ns1__PaymentIdentification6(
	struct soap *soap,
	std::string *InstrId,
	const std::string& EndToEndId,
	std::string *UETR)
{
	ns1__PaymentIdentification6 *_p = ::soap_new_ns1__PaymentIdentification6(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PaymentIdentification6::InstrId = InstrId;
		_p->ns1__PaymentIdentification6::EndToEndId = EndToEndId;
		_p->ns1__PaymentIdentification6::UETR = UETR;
	}
	return _p;
}

inline int soap_write_ns1__PaymentIdentification6(struct soap *soap, ns1__PaymentIdentification6 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PaymentIdentification6", p->soap_type() == SOAP_TYPE_ns1__PaymentIdentification6 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__PaymentIdentification6(struct soap *soap, const char *URL, ns1__PaymentIdentification6 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PaymentIdentification6", p->soap_type() == SOAP_TYPE_ns1__PaymentIdentification6 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__PaymentIdentification6(struct soap *soap, const char *URL, ns1__PaymentIdentification6 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PaymentIdentification6", p->soap_type() == SOAP_TYPE_ns1__PaymentIdentification6 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__PaymentIdentification6(struct soap *soap, const char *URL, ns1__PaymentIdentification6 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PaymentIdentification6", p->soap_type() == SOAP_TYPE_ns1__PaymentIdentification6 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__PaymentIdentification6 * SOAP_FMAC4 soap_get_ns1__PaymentIdentification6(struct soap*, ns1__PaymentIdentification6 *, const char*, const char*);

inline int soap_read_ns1__PaymentIdentification6(struct soap *soap, ns1__PaymentIdentification6 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__PaymentIdentification6(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__PaymentIdentification6(struct soap *soap, const char *URL, ns1__PaymentIdentification6 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__PaymentIdentification6(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__PaymentIdentification6(struct soap *soap, ns1__PaymentIdentification6 *p)
{
	if (::soap_read_ns1__PaymentIdentification6(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__PartyIdentification135_DEFINED
#define SOAP_TYPE_ns1__PartyIdentification135_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__PartyIdentification135(struct soap*, const char*, int, const ns1__PartyIdentification135 *, const char*);
SOAP_FMAC3 ns1__PartyIdentification135 * SOAP_FMAC4 soap_in_ns1__PartyIdentification135(struct soap*, const char*, ns1__PartyIdentification135 *, const char*);
SOAP_FMAC1 ns1__PartyIdentification135 * SOAP_FMAC2 soap_instantiate_ns1__PartyIdentification135(struct soap*, int, const char*, const char*, size_t*);

inline ns1__PartyIdentification135 * soap_new_ns1__PartyIdentification135(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__PartyIdentification135(soap, n, NULL, NULL, NULL);
}

inline ns1__PartyIdentification135 * soap_new_req_ns1__PartyIdentification135(
	struct soap *soap)
{
	ns1__PartyIdentification135 *_p = ::soap_new_ns1__PartyIdentification135(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__PartyIdentification135 * soap_new_set_ns1__PartyIdentification135(
	struct soap *soap,
	std::string *Nm,
	ns1__PostalAddress24 *PstlAdr,
	ns1__Party38Choice *Id,
	std::string *CtryOfRes,
	ns1__Contact4 *CtctDtls)
{
	ns1__PartyIdentification135 *_p = ::soap_new_ns1__PartyIdentification135(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PartyIdentification135::Nm = Nm;
		_p->ns1__PartyIdentification135::PstlAdr = PstlAdr;
		_p->ns1__PartyIdentification135::Id = Id;
		_p->ns1__PartyIdentification135::CtryOfRes = CtryOfRes;
		_p->ns1__PartyIdentification135::CtctDtls = CtctDtls;
	}
	return _p;
}

inline int soap_write_ns1__PartyIdentification135(struct soap *soap, ns1__PartyIdentification135 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PartyIdentification135", p->soap_type() == SOAP_TYPE_ns1__PartyIdentification135 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__PartyIdentification135(struct soap *soap, const char *URL, ns1__PartyIdentification135 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PartyIdentification135", p->soap_type() == SOAP_TYPE_ns1__PartyIdentification135 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__PartyIdentification135(struct soap *soap, const char *URL, ns1__PartyIdentification135 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PartyIdentification135", p->soap_type() == SOAP_TYPE_ns1__PartyIdentification135 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__PartyIdentification135(struct soap *soap, const char *URL, ns1__PartyIdentification135 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PartyIdentification135", p->soap_type() == SOAP_TYPE_ns1__PartyIdentification135 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__PartyIdentification135 * SOAP_FMAC4 soap_get_ns1__PartyIdentification135(struct soap*, ns1__PartyIdentification135 *, const char*, const char*);

inline int soap_read_ns1__PartyIdentification135(struct soap *soap, ns1__PartyIdentification135 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__PartyIdentification135(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__PartyIdentification135(struct soap *soap, const char *URL, ns1__PartyIdentification135 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__PartyIdentification135(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__PartyIdentification135(struct soap *soap, ns1__PartyIdentification135 *p)
{
	if (::soap_read_ns1__PartyIdentification135(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__Party38Choice_DEFINED
#define SOAP_TYPE_ns1__Party38Choice_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Party38Choice(struct soap*, const char*, int, const ns1__Party38Choice *, const char*);
SOAP_FMAC3 ns1__Party38Choice * SOAP_FMAC4 soap_in_ns1__Party38Choice(struct soap*, const char*, ns1__Party38Choice *, const char*);
SOAP_FMAC1 ns1__Party38Choice * SOAP_FMAC2 soap_instantiate_ns1__Party38Choice(struct soap*, int, const char*, const char*, size_t*);

inline ns1__Party38Choice * soap_new_ns1__Party38Choice(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__Party38Choice(soap, n, NULL, NULL, NULL);
}

inline ns1__Party38Choice * soap_new_req_ns1__Party38Choice(
	struct soap *soap,
	const union _ns1__union_Party38Choice& union_Party38Choice)
{
	ns1__Party38Choice *_p = ::soap_new_ns1__Party38Choice(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__Party38Choice::union_Party38Choice = union_Party38Choice;
	}
	return _p;
}

inline ns1__Party38Choice * soap_new_set_ns1__Party38Choice(
	struct soap *soap,
	int __union_Party38Choice,
	const union _ns1__union_Party38Choice& union_Party38Choice)
{
	ns1__Party38Choice *_p = ::soap_new_ns1__Party38Choice(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__Party38Choice::__union_Party38Choice = __union_Party38Choice;
		_p->ns1__Party38Choice::union_Party38Choice = union_Party38Choice;
	}
	return _p;
}

inline int soap_write_ns1__Party38Choice(struct soap *soap, ns1__Party38Choice const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Party38Choice", p->soap_type() == SOAP_TYPE_ns1__Party38Choice ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__Party38Choice(struct soap *soap, const char *URL, ns1__Party38Choice const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Party38Choice", p->soap_type() == SOAP_TYPE_ns1__Party38Choice ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__Party38Choice(struct soap *soap, const char *URL, ns1__Party38Choice const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Party38Choice", p->soap_type() == SOAP_TYPE_ns1__Party38Choice ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__Party38Choice(struct soap *soap, const char *URL, ns1__Party38Choice const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Party38Choice", p->soap_type() == SOAP_TYPE_ns1__Party38Choice ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__Party38Choice * SOAP_FMAC4 soap_get_ns1__Party38Choice(struct soap*, ns1__Party38Choice *, const char*, const char*);

inline int soap_read_ns1__Party38Choice(struct soap *soap, ns1__Party38Choice *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__Party38Choice(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__Party38Choice(struct soap *soap, const char *URL, ns1__Party38Choice *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__Party38Choice(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__Party38Choice(struct soap *soap, ns1__Party38Choice *p)
{
	if (::soap_read_ns1__Party38Choice(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__OtherContact1_DEFINED
#define SOAP_TYPE_ns1__OtherContact1_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__OtherContact1(struct soap*, const char*, int, const ns1__OtherContact1 *, const char*);
SOAP_FMAC3 ns1__OtherContact1 * SOAP_FMAC4 soap_in_ns1__OtherContact1(struct soap*, const char*, ns1__OtherContact1 *, const char*);
SOAP_FMAC1 ns1__OtherContact1 * SOAP_FMAC2 soap_instantiate_ns1__OtherContact1(struct soap*, int, const char*, const char*, size_t*);

inline ns1__OtherContact1 * soap_new_ns1__OtherContact1(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__OtherContact1(soap, n, NULL, NULL, NULL);
}

inline ns1__OtherContact1 * soap_new_req_ns1__OtherContact1(
	struct soap *soap,
	const std::string& ChanlTp)
{
	ns1__OtherContact1 *_p = ::soap_new_ns1__OtherContact1(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__OtherContact1::ChanlTp = ChanlTp;
	}
	return _p;
}

inline ns1__OtherContact1 * soap_new_set_ns1__OtherContact1(
	struct soap *soap,
	const std::string& ChanlTp,
	std::string *Id)
{
	ns1__OtherContact1 *_p = ::soap_new_ns1__OtherContact1(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__OtherContact1::ChanlTp = ChanlTp;
		_p->ns1__OtherContact1::Id = Id;
	}
	return _p;
}

inline int soap_write_ns1__OtherContact1(struct soap *soap, ns1__OtherContact1 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OtherContact1", p->soap_type() == SOAP_TYPE_ns1__OtherContact1 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__OtherContact1(struct soap *soap, const char *URL, ns1__OtherContact1 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OtherContact1", p->soap_type() == SOAP_TYPE_ns1__OtherContact1 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__OtherContact1(struct soap *soap, const char *URL, ns1__OtherContact1 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OtherContact1", p->soap_type() == SOAP_TYPE_ns1__OtherContact1 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__OtherContact1(struct soap *soap, const char *URL, ns1__OtherContact1 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OtherContact1", p->soap_type() == SOAP_TYPE_ns1__OtherContact1 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__OtherContact1 * SOAP_FMAC4 soap_get_ns1__OtherContact1(struct soap*, ns1__OtherContact1 *, const char*, const char*);

inline int soap_read_ns1__OtherContact1(struct soap *soap, ns1__OtherContact1 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__OtherContact1(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__OtherContact1(struct soap *soap, const char *URL, ns1__OtherContact1 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__OtherContact1(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__OtherContact1(struct soap *soap, ns1__OtherContact1 *p)
{
	if (::soap_read_ns1__OtherContact1(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__OrganisationIdentificationSchemeName1Choice_DEFINED
#define SOAP_TYPE_ns1__OrganisationIdentificationSchemeName1Choice_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__OrganisationIdentificationSchemeName1Choice(struct soap*, const char*, int, const ns1__OrganisationIdentificationSchemeName1Choice *, const char*);
SOAP_FMAC3 ns1__OrganisationIdentificationSchemeName1Choice * SOAP_FMAC4 soap_in_ns1__OrganisationIdentificationSchemeName1Choice(struct soap*, const char*, ns1__OrganisationIdentificationSchemeName1Choice *, const char*);
SOAP_FMAC1 ns1__OrganisationIdentificationSchemeName1Choice * SOAP_FMAC2 soap_instantiate_ns1__OrganisationIdentificationSchemeName1Choice(struct soap*, int, const char*, const char*, size_t*);

inline ns1__OrganisationIdentificationSchemeName1Choice * soap_new_ns1__OrganisationIdentificationSchemeName1Choice(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__OrganisationIdentificationSchemeName1Choice(soap, n, NULL, NULL, NULL);
}

inline ns1__OrganisationIdentificationSchemeName1Choice * soap_new_req_ns1__OrganisationIdentificationSchemeName1Choice(
	struct soap *soap,
	const union _ns1__union_OrganisationIdentificationSchemeName1Choice& union_OrganisationIdentificationSchemeName1Choice)
{
	ns1__OrganisationIdentificationSchemeName1Choice *_p = ::soap_new_ns1__OrganisationIdentificationSchemeName1Choice(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__OrganisationIdentificationSchemeName1Choice::union_OrganisationIdentificationSchemeName1Choice = union_OrganisationIdentificationSchemeName1Choice;
	}
	return _p;
}

inline ns1__OrganisationIdentificationSchemeName1Choice * soap_new_set_ns1__OrganisationIdentificationSchemeName1Choice(
	struct soap *soap,
	int __union_OrganisationIdentificationSchemeName1Choice,
	const union _ns1__union_OrganisationIdentificationSchemeName1Choice& union_OrganisationIdentificationSchemeName1Choice)
{
	ns1__OrganisationIdentificationSchemeName1Choice *_p = ::soap_new_ns1__OrganisationIdentificationSchemeName1Choice(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__OrganisationIdentificationSchemeName1Choice::__union_OrganisationIdentificationSchemeName1Choice = __union_OrganisationIdentificationSchemeName1Choice;
		_p->ns1__OrganisationIdentificationSchemeName1Choice::union_OrganisationIdentificationSchemeName1Choice = union_OrganisationIdentificationSchemeName1Choice;
	}
	return _p;
}

inline int soap_write_ns1__OrganisationIdentificationSchemeName1Choice(struct soap *soap, ns1__OrganisationIdentificationSchemeName1Choice const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OrganisationIdentificationSchemeName1Choice", p->soap_type() == SOAP_TYPE_ns1__OrganisationIdentificationSchemeName1Choice ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__OrganisationIdentificationSchemeName1Choice(struct soap *soap, const char *URL, ns1__OrganisationIdentificationSchemeName1Choice const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OrganisationIdentificationSchemeName1Choice", p->soap_type() == SOAP_TYPE_ns1__OrganisationIdentificationSchemeName1Choice ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__OrganisationIdentificationSchemeName1Choice(struct soap *soap, const char *URL, ns1__OrganisationIdentificationSchemeName1Choice const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OrganisationIdentificationSchemeName1Choice", p->soap_type() == SOAP_TYPE_ns1__OrganisationIdentificationSchemeName1Choice ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__OrganisationIdentificationSchemeName1Choice(struct soap *soap, const char *URL, ns1__OrganisationIdentificationSchemeName1Choice const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OrganisationIdentificationSchemeName1Choice", p->soap_type() == SOAP_TYPE_ns1__OrganisationIdentificationSchemeName1Choice ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__OrganisationIdentificationSchemeName1Choice * SOAP_FMAC4 soap_get_ns1__OrganisationIdentificationSchemeName1Choice(struct soap*, ns1__OrganisationIdentificationSchemeName1Choice *, const char*, const char*);

inline int soap_read_ns1__OrganisationIdentificationSchemeName1Choice(struct soap *soap, ns1__OrganisationIdentificationSchemeName1Choice *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__OrganisationIdentificationSchemeName1Choice(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__OrganisationIdentificationSchemeName1Choice(struct soap *soap, const char *URL, ns1__OrganisationIdentificationSchemeName1Choice *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__OrganisationIdentificationSchemeName1Choice(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__OrganisationIdentificationSchemeName1Choice(struct soap *soap, ns1__OrganisationIdentificationSchemeName1Choice *p)
{
	if (::soap_read_ns1__OrganisationIdentificationSchemeName1Choice(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__OrganisationIdentification29_DEFINED
#define SOAP_TYPE_ns1__OrganisationIdentification29_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__OrganisationIdentification29(struct soap*, const char*, int, const ns1__OrganisationIdentification29 *, const char*);
SOAP_FMAC3 ns1__OrganisationIdentification29 * SOAP_FMAC4 soap_in_ns1__OrganisationIdentification29(struct soap*, const char*, ns1__OrganisationIdentification29 *, const char*);
SOAP_FMAC1 ns1__OrganisationIdentification29 * SOAP_FMAC2 soap_instantiate_ns1__OrganisationIdentification29(struct soap*, int, const char*, const char*, size_t*);

inline ns1__OrganisationIdentification29 * soap_new_ns1__OrganisationIdentification29(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__OrganisationIdentification29(soap, n, NULL, NULL, NULL);
}

inline ns1__OrganisationIdentification29 * soap_new_req_ns1__OrganisationIdentification29(
	struct soap *soap)
{
	ns1__OrganisationIdentification29 *_p = ::soap_new_ns1__OrganisationIdentification29(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__OrganisationIdentification29 * soap_new_set_ns1__OrganisationIdentification29(
	struct soap *soap,
	std::string *AnyBIC,
	std::string *LEI,
	const std::vector<ns1__GenericOrganisationIdentification1 *> & Othr)
{
	ns1__OrganisationIdentification29 *_p = ::soap_new_ns1__OrganisationIdentification29(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__OrganisationIdentification29::AnyBIC = AnyBIC;
		_p->ns1__OrganisationIdentification29::LEI = LEI;
		_p->ns1__OrganisationIdentification29::Othr = Othr;
	}
	return _p;
}

inline int soap_write_ns1__OrganisationIdentification29(struct soap *soap, ns1__OrganisationIdentification29 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OrganisationIdentification29", p->soap_type() == SOAP_TYPE_ns1__OrganisationIdentification29 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__OrganisationIdentification29(struct soap *soap, const char *URL, ns1__OrganisationIdentification29 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OrganisationIdentification29", p->soap_type() == SOAP_TYPE_ns1__OrganisationIdentification29 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__OrganisationIdentification29(struct soap *soap, const char *URL, ns1__OrganisationIdentification29 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OrganisationIdentification29", p->soap_type() == SOAP_TYPE_ns1__OrganisationIdentification29 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__OrganisationIdentification29(struct soap *soap, const char *URL, ns1__OrganisationIdentification29 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OrganisationIdentification29", p->soap_type() == SOAP_TYPE_ns1__OrganisationIdentification29 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__OrganisationIdentification29 * SOAP_FMAC4 soap_get_ns1__OrganisationIdentification29(struct soap*, ns1__OrganisationIdentification29 *, const char*, const char*);

inline int soap_read_ns1__OrganisationIdentification29(struct soap *soap, ns1__OrganisationIdentification29 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__OrganisationIdentification29(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__OrganisationIdentification29(struct soap *soap, const char *URL, ns1__OrganisationIdentification29 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__OrganisationIdentification29(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__OrganisationIdentification29(struct soap *soap, ns1__OrganisationIdentification29 *p)
{
	if (::soap_read_ns1__OrganisationIdentification29(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__NameAndAddress16_DEFINED
#define SOAP_TYPE_ns1__NameAndAddress16_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__NameAndAddress16(struct soap*, const char*, int, const ns1__NameAndAddress16 *, const char*);
SOAP_FMAC3 ns1__NameAndAddress16 * SOAP_FMAC4 soap_in_ns1__NameAndAddress16(struct soap*, const char*, ns1__NameAndAddress16 *, const char*);
SOAP_FMAC1 ns1__NameAndAddress16 * SOAP_FMAC2 soap_instantiate_ns1__NameAndAddress16(struct soap*, int, const char*, const char*, size_t*);

inline ns1__NameAndAddress16 * soap_new_ns1__NameAndAddress16(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__NameAndAddress16(soap, n, NULL, NULL, NULL);
}

inline ns1__NameAndAddress16 * soap_new_req_ns1__NameAndAddress16(
	struct soap *soap,
	const std::string& Nm,
	ns1__PostalAddress24 *Adr)
{
	ns1__NameAndAddress16 *_p = ::soap_new_ns1__NameAndAddress16(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__NameAndAddress16::Nm = Nm;
		_p->ns1__NameAndAddress16::Adr = Adr;
	}
	return _p;
}

inline ns1__NameAndAddress16 * soap_new_set_ns1__NameAndAddress16(
	struct soap *soap,
	const std::string& Nm,
	ns1__PostalAddress24 *Adr)
{
	ns1__NameAndAddress16 *_p = ::soap_new_ns1__NameAndAddress16(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__NameAndAddress16::Nm = Nm;
		_p->ns1__NameAndAddress16::Adr = Adr;
	}
	return _p;
}

inline int soap_write_ns1__NameAndAddress16(struct soap *soap, ns1__NameAndAddress16 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:NameAndAddress16", p->soap_type() == SOAP_TYPE_ns1__NameAndAddress16 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__NameAndAddress16(struct soap *soap, const char *URL, ns1__NameAndAddress16 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:NameAndAddress16", p->soap_type() == SOAP_TYPE_ns1__NameAndAddress16 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__NameAndAddress16(struct soap *soap, const char *URL, ns1__NameAndAddress16 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:NameAndAddress16", p->soap_type() == SOAP_TYPE_ns1__NameAndAddress16 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__NameAndAddress16(struct soap *soap, const char *URL, ns1__NameAndAddress16 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:NameAndAddress16", p->soap_type() == SOAP_TYPE_ns1__NameAndAddress16 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__NameAndAddress16 * SOAP_FMAC4 soap_get_ns1__NameAndAddress16(struct soap*, ns1__NameAndAddress16 *, const char*, const char*);

inline int soap_read_ns1__NameAndAddress16(struct soap *soap, ns1__NameAndAddress16 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__NameAndAddress16(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__NameAndAddress16(struct soap *soap, const char *URL, ns1__NameAndAddress16 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__NameAndAddress16(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__NameAndAddress16(struct soap *soap, ns1__NameAndAddress16 *p)
{
	if (::soap_read_ns1__NameAndAddress16(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__MandateTypeInformation2_DEFINED
#define SOAP_TYPE_ns1__MandateTypeInformation2_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MandateTypeInformation2(struct soap*, const char*, int, const ns1__MandateTypeInformation2 *, const char*);
SOAP_FMAC3 ns1__MandateTypeInformation2 * SOAP_FMAC4 soap_in_ns1__MandateTypeInformation2(struct soap*, const char*, ns1__MandateTypeInformation2 *, const char*);
SOAP_FMAC1 ns1__MandateTypeInformation2 * SOAP_FMAC2 soap_instantiate_ns1__MandateTypeInformation2(struct soap*, int, const char*, const char*, size_t*);

inline ns1__MandateTypeInformation2 * soap_new_ns1__MandateTypeInformation2(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__MandateTypeInformation2(soap, n, NULL, NULL, NULL);
}

inline ns1__MandateTypeInformation2 * soap_new_req_ns1__MandateTypeInformation2(
	struct soap *soap)
{
	ns1__MandateTypeInformation2 *_p = ::soap_new_ns1__MandateTypeInformation2(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__MandateTypeInformation2 * soap_new_set_ns1__MandateTypeInformation2(
	struct soap *soap,
	ns1__ServiceLevel8Choice *SvcLvl,
	ns1__LocalInstrument2Choice *LclInstrm,
	ns1__CategoryPurpose1Choice *CtgyPurp,
	ns1__MandateClassification1Choice *Clssfctn)
{
	ns1__MandateTypeInformation2 *_p = ::soap_new_ns1__MandateTypeInformation2(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MandateTypeInformation2::SvcLvl = SvcLvl;
		_p->ns1__MandateTypeInformation2::LclInstrm = LclInstrm;
		_p->ns1__MandateTypeInformation2::CtgyPurp = CtgyPurp;
		_p->ns1__MandateTypeInformation2::Clssfctn = Clssfctn;
	}
	return _p;
}

inline int soap_write_ns1__MandateTypeInformation2(struct soap *soap, ns1__MandateTypeInformation2 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MandateTypeInformation2", p->soap_type() == SOAP_TYPE_ns1__MandateTypeInformation2 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__MandateTypeInformation2(struct soap *soap, const char *URL, ns1__MandateTypeInformation2 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MandateTypeInformation2", p->soap_type() == SOAP_TYPE_ns1__MandateTypeInformation2 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__MandateTypeInformation2(struct soap *soap, const char *URL, ns1__MandateTypeInformation2 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MandateTypeInformation2", p->soap_type() == SOAP_TYPE_ns1__MandateTypeInformation2 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__MandateTypeInformation2(struct soap *soap, const char *URL, ns1__MandateTypeInformation2 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MandateTypeInformation2", p->soap_type() == SOAP_TYPE_ns1__MandateTypeInformation2 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__MandateTypeInformation2 * SOAP_FMAC4 soap_get_ns1__MandateTypeInformation2(struct soap*, ns1__MandateTypeInformation2 *, const char*, const char*);

inline int soap_read_ns1__MandateTypeInformation2(struct soap *soap, ns1__MandateTypeInformation2 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__MandateTypeInformation2(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__MandateTypeInformation2(struct soap *soap, const char *URL, ns1__MandateTypeInformation2 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__MandateTypeInformation2(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__MandateTypeInformation2(struct soap *soap, ns1__MandateTypeInformation2 *p)
{
	if (::soap_read_ns1__MandateTypeInformation2(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__MandateSetupReason1Choice_DEFINED
#define SOAP_TYPE_ns1__MandateSetupReason1Choice_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MandateSetupReason1Choice(struct soap*, const char*, int, const ns1__MandateSetupReason1Choice *, const char*);
SOAP_FMAC3 ns1__MandateSetupReason1Choice * SOAP_FMAC4 soap_in_ns1__MandateSetupReason1Choice(struct soap*, const char*, ns1__MandateSetupReason1Choice *, const char*);
SOAP_FMAC1 ns1__MandateSetupReason1Choice * SOAP_FMAC2 soap_instantiate_ns1__MandateSetupReason1Choice(struct soap*, int, const char*, const char*, size_t*);

inline ns1__MandateSetupReason1Choice * soap_new_ns1__MandateSetupReason1Choice(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__MandateSetupReason1Choice(soap, n, NULL, NULL, NULL);
}

inline ns1__MandateSetupReason1Choice * soap_new_req_ns1__MandateSetupReason1Choice(
	struct soap *soap,
	const union _ns1__union_MandateSetupReason1Choice& union_MandateSetupReason1Choice)
{
	ns1__MandateSetupReason1Choice *_p = ::soap_new_ns1__MandateSetupReason1Choice(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MandateSetupReason1Choice::union_MandateSetupReason1Choice = union_MandateSetupReason1Choice;
	}
	return _p;
}

inline ns1__MandateSetupReason1Choice * soap_new_set_ns1__MandateSetupReason1Choice(
	struct soap *soap,
	int __union_MandateSetupReason1Choice,
	const union _ns1__union_MandateSetupReason1Choice& union_MandateSetupReason1Choice)
{
	ns1__MandateSetupReason1Choice *_p = ::soap_new_ns1__MandateSetupReason1Choice(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MandateSetupReason1Choice::__union_MandateSetupReason1Choice = __union_MandateSetupReason1Choice;
		_p->ns1__MandateSetupReason1Choice::union_MandateSetupReason1Choice = union_MandateSetupReason1Choice;
	}
	return _p;
}

inline int soap_write_ns1__MandateSetupReason1Choice(struct soap *soap, ns1__MandateSetupReason1Choice const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MandateSetupReason1Choice", p->soap_type() == SOAP_TYPE_ns1__MandateSetupReason1Choice ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__MandateSetupReason1Choice(struct soap *soap, const char *URL, ns1__MandateSetupReason1Choice const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MandateSetupReason1Choice", p->soap_type() == SOAP_TYPE_ns1__MandateSetupReason1Choice ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__MandateSetupReason1Choice(struct soap *soap, const char *URL, ns1__MandateSetupReason1Choice const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MandateSetupReason1Choice", p->soap_type() == SOAP_TYPE_ns1__MandateSetupReason1Choice ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__MandateSetupReason1Choice(struct soap *soap, const char *URL, ns1__MandateSetupReason1Choice const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MandateSetupReason1Choice", p->soap_type() == SOAP_TYPE_ns1__MandateSetupReason1Choice ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__MandateSetupReason1Choice * SOAP_FMAC4 soap_get_ns1__MandateSetupReason1Choice(struct soap*, ns1__MandateSetupReason1Choice *, const char*, const char*);

inline int soap_read_ns1__MandateSetupReason1Choice(struct soap *soap, ns1__MandateSetupReason1Choice *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__MandateSetupReason1Choice(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__MandateSetupReason1Choice(struct soap *soap, const char *URL, ns1__MandateSetupReason1Choice *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__MandateSetupReason1Choice(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__MandateSetupReason1Choice(struct soap *soap, ns1__MandateSetupReason1Choice *p)
{
	if (::soap_read_ns1__MandateSetupReason1Choice(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__MandateClassification1Choice_DEFINED
#define SOAP_TYPE_ns1__MandateClassification1Choice_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MandateClassification1Choice(struct soap*, const char*, int, const ns1__MandateClassification1Choice *, const char*);
SOAP_FMAC3 ns1__MandateClassification1Choice * SOAP_FMAC4 soap_in_ns1__MandateClassification1Choice(struct soap*, const char*, ns1__MandateClassification1Choice *, const char*);
SOAP_FMAC1 ns1__MandateClassification1Choice * SOAP_FMAC2 soap_instantiate_ns1__MandateClassification1Choice(struct soap*, int, const char*, const char*, size_t*);

inline ns1__MandateClassification1Choice * soap_new_ns1__MandateClassification1Choice(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__MandateClassification1Choice(soap, n, NULL, NULL, NULL);
}

inline ns1__MandateClassification1Choice * soap_new_req_ns1__MandateClassification1Choice(
	struct soap *soap,
	const union _ns1__union_MandateClassification1Choice& union_MandateClassification1Choice)
{
	ns1__MandateClassification1Choice *_p = ::soap_new_ns1__MandateClassification1Choice(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MandateClassification1Choice::union_MandateClassification1Choice = union_MandateClassification1Choice;
	}
	return _p;
}

inline ns1__MandateClassification1Choice * soap_new_set_ns1__MandateClassification1Choice(
	struct soap *soap,
	int __union_MandateClassification1Choice,
	const union _ns1__union_MandateClassification1Choice& union_MandateClassification1Choice)
{
	ns1__MandateClassification1Choice *_p = ::soap_new_ns1__MandateClassification1Choice(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MandateClassification1Choice::__union_MandateClassification1Choice = __union_MandateClassification1Choice;
		_p->ns1__MandateClassification1Choice::union_MandateClassification1Choice = union_MandateClassification1Choice;
	}
	return _p;
}

inline int soap_write_ns1__MandateClassification1Choice(struct soap *soap, ns1__MandateClassification1Choice const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MandateClassification1Choice", p->soap_type() == SOAP_TYPE_ns1__MandateClassification1Choice ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__MandateClassification1Choice(struct soap *soap, const char *URL, ns1__MandateClassification1Choice const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MandateClassification1Choice", p->soap_type() == SOAP_TYPE_ns1__MandateClassification1Choice ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__MandateClassification1Choice(struct soap *soap, const char *URL, ns1__MandateClassification1Choice const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MandateClassification1Choice", p->soap_type() == SOAP_TYPE_ns1__MandateClassification1Choice ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__MandateClassification1Choice(struct soap *soap, const char *URL, ns1__MandateClassification1Choice const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MandateClassification1Choice", p->soap_type() == SOAP_TYPE_ns1__MandateClassification1Choice ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__MandateClassification1Choice * SOAP_FMAC4 soap_get_ns1__MandateClassification1Choice(struct soap*, ns1__MandateClassification1Choice *, const char*, const char*);

inline int soap_read_ns1__MandateClassification1Choice(struct soap *soap, ns1__MandateClassification1Choice *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__MandateClassification1Choice(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__MandateClassification1Choice(struct soap *soap, const char *URL, ns1__MandateClassification1Choice *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__MandateClassification1Choice(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__MandateClassification1Choice(struct soap *soap, ns1__MandateClassification1Choice *p)
{
	if (::soap_read_ns1__MandateClassification1Choice(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__LocalInstrument2Choice_DEFINED
#define SOAP_TYPE_ns1__LocalInstrument2Choice_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__LocalInstrument2Choice(struct soap*, const char*, int, const ns1__LocalInstrument2Choice *, const char*);
SOAP_FMAC3 ns1__LocalInstrument2Choice * SOAP_FMAC4 soap_in_ns1__LocalInstrument2Choice(struct soap*, const char*, ns1__LocalInstrument2Choice *, const char*);
SOAP_FMAC1 ns1__LocalInstrument2Choice * SOAP_FMAC2 soap_instantiate_ns1__LocalInstrument2Choice(struct soap*, int, const char*, const char*, size_t*);

inline ns1__LocalInstrument2Choice * soap_new_ns1__LocalInstrument2Choice(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__LocalInstrument2Choice(soap, n, NULL, NULL, NULL);
}

inline ns1__LocalInstrument2Choice * soap_new_req_ns1__LocalInstrument2Choice(
	struct soap *soap,
	const union _ns1__union_LocalInstrument2Choice& union_LocalInstrument2Choice)
{
	ns1__LocalInstrument2Choice *_p = ::soap_new_ns1__LocalInstrument2Choice(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__LocalInstrument2Choice::union_LocalInstrument2Choice = union_LocalInstrument2Choice;
	}
	return _p;
}

inline ns1__LocalInstrument2Choice * soap_new_set_ns1__LocalInstrument2Choice(
	struct soap *soap,
	int __union_LocalInstrument2Choice,
	const union _ns1__union_LocalInstrument2Choice& union_LocalInstrument2Choice)
{
	ns1__LocalInstrument2Choice *_p = ::soap_new_ns1__LocalInstrument2Choice(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__LocalInstrument2Choice::__union_LocalInstrument2Choice = __union_LocalInstrument2Choice;
		_p->ns1__LocalInstrument2Choice::union_LocalInstrument2Choice = union_LocalInstrument2Choice;
	}
	return _p;
}

inline int soap_write_ns1__LocalInstrument2Choice(struct soap *soap, ns1__LocalInstrument2Choice const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LocalInstrument2Choice", p->soap_type() == SOAP_TYPE_ns1__LocalInstrument2Choice ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__LocalInstrument2Choice(struct soap *soap, const char *URL, ns1__LocalInstrument2Choice const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LocalInstrument2Choice", p->soap_type() == SOAP_TYPE_ns1__LocalInstrument2Choice ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__LocalInstrument2Choice(struct soap *soap, const char *URL, ns1__LocalInstrument2Choice const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LocalInstrument2Choice", p->soap_type() == SOAP_TYPE_ns1__LocalInstrument2Choice ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__LocalInstrument2Choice(struct soap *soap, const char *URL, ns1__LocalInstrument2Choice const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LocalInstrument2Choice", p->soap_type() == SOAP_TYPE_ns1__LocalInstrument2Choice ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__LocalInstrument2Choice * SOAP_FMAC4 soap_get_ns1__LocalInstrument2Choice(struct soap*, ns1__LocalInstrument2Choice *, const char*, const char*);

inline int soap_read_ns1__LocalInstrument2Choice(struct soap *soap, ns1__LocalInstrument2Choice *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__LocalInstrument2Choice(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__LocalInstrument2Choice(struct soap *soap, const char *URL, ns1__LocalInstrument2Choice *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__LocalInstrument2Choice(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__LocalInstrument2Choice(struct soap *soap, ns1__LocalInstrument2Choice *p)
{
	if (::soap_read_ns1__LocalInstrument2Choice(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__InstructionForDebtorAgent1_DEFINED
#define SOAP_TYPE_ns1__InstructionForDebtorAgent1_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__InstructionForDebtorAgent1(struct soap*, const char*, int, const ns1__InstructionForDebtorAgent1 *, const char*);
SOAP_FMAC3 ns1__InstructionForDebtorAgent1 * SOAP_FMAC4 soap_in_ns1__InstructionForDebtorAgent1(struct soap*, const char*, ns1__InstructionForDebtorAgent1 *, const char*);
SOAP_FMAC1 ns1__InstructionForDebtorAgent1 * SOAP_FMAC2 soap_instantiate_ns1__InstructionForDebtorAgent1(struct soap*, int, const char*, const char*, size_t*);

inline ns1__InstructionForDebtorAgent1 * soap_new_ns1__InstructionForDebtorAgent1(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__InstructionForDebtorAgent1(soap, n, NULL, NULL, NULL);
}

inline ns1__InstructionForDebtorAgent1 * soap_new_req_ns1__InstructionForDebtorAgent1(
	struct soap *soap)
{
	ns1__InstructionForDebtorAgent1 *_p = ::soap_new_ns1__InstructionForDebtorAgent1(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__InstructionForDebtorAgent1 * soap_new_set_ns1__InstructionForDebtorAgent1(
	struct soap *soap,
	std::string *Cd,
	std::string *InstrInf)
{
	ns1__InstructionForDebtorAgent1 *_p = ::soap_new_ns1__InstructionForDebtorAgent1(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__InstructionForDebtorAgent1::Cd = Cd;
		_p->ns1__InstructionForDebtorAgent1::InstrInf = InstrInf;
	}
	return _p;
}

inline int soap_write_ns1__InstructionForDebtorAgent1(struct soap *soap, ns1__InstructionForDebtorAgent1 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InstructionForDebtorAgent1", p->soap_type() == SOAP_TYPE_ns1__InstructionForDebtorAgent1 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__InstructionForDebtorAgent1(struct soap *soap, const char *URL, ns1__InstructionForDebtorAgent1 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InstructionForDebtorAgent1", p->soap_type() == SOAP_TYPE_ns1__InstructionForDebtorAgent1 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__InstructionForDebtorAgent1(struct soap *soap, const char *URL, ns1__InstructionForDebtorAgent1 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InstructionForDebtorAgent1", p->soap_type() == SOAP_TYPE_ns1__InstructionForDebtorAgent1 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__InstructionForDebtorAgent1(struct soap *soap, const char *URL, ns1__InstructionForDebtorAgent1 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InstructionForDebtorAgent1", p->soap_type() == SOAP_TYPE_ns1__InstructionForDebtorAgent1 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__InstructionForDebtorAgent1 * SOAP_FMAC4 soap_get_ns1__InstructionForDebtorAgent1(struct soap*, ns1__InstructionForDebtorAgent1 *, const char*, const char*);

inline int soap_read_ns1__InstructionForDebtorAgent1(struct soap *soap, ns1__InstructionForDebtorAgent1 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__InstructionForDebtorAgent1(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__InstructionForDebtorAgent1(struct soap *soap, const char *URL, ns1__InstructionForDebtorAgent1 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__InstructionForDebtorAgent1(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__InstructionForDebtorAgent1(struct soap *soap, ns1__InstructionForDebtorAgent1 *p)
{
	if (::soap_read_ns1__InstructionForDebtorAgent1(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__InstructionForCreditorAgent3_DEFINED
#define SOAP_TYPE_ns1__InstructionForCreditorAgent3_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__InstructionForCreditorAgent3(struct soap*, const char*, int, const ns1__InstructionForCreditorAgent3 *, const char*);
SOAP_FMAC3 ns1__InstructionForCreditorAgent3 * SOAP_FMAC4 soap_in_ns1__InstructionForCreditorAgent3(struct soap*, const char*, ns1__InstructionForCreditorAgent3 *, const char*);
SOAP_FMAC1 ns1__InstructionForCreditorAgent3 * SOAP_FMAC2 soap_instantiate_ns1__InstructionForCreditorAgent3(struct soap*, int, const char*, const char*, size_t*);

inline ns1__InstructionForCreditorAgent3 * soap_new_ns1__InstructionForCreditorAgent3(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__InstructionForCreditorAgent3(soap, n, NULL, NULL, NULL);
}

inline ns1__InstructionForCreditorAgent3 * soap_new_req_ns1__InstructionForCreditorAgent3(
	struct soap *soap)
{
	ns1__InstructionForCreditorAgent3 *_p = ::soap_new_ns1__InstructionForCreditorAgent3(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__InstructionForCreditorAgent3 * soap_new_set_ns1__InstructionForCreditorAgent3(
	struct soap *soap,
	std::string *Cd,
	std::string *InstrInf)
{
	ns1__InstructionForCreditorAgent3 *_p = ::soap_new_ns1__InstructionForCreditorAgent3(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__InstructionForCreditorAgent3::Cd = Cd;
		_p->ns1__InstructionForCreditorAgent3::InstrInf = InstrInf;
	}
	return _p;
}

inline int soap_write_ns1__InstructionForCreditorAgent3(struct soap *soap, ns1__InstructionForCreditorAgent3 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InstructionForCreditorAgent3", p->soap_type() == SOAP_TYPE_ns1__InstructionForCreditorAgent3 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__InstructionForCreditorAgent3(struct soap *soap, const char *URL, ns1__InstructionForCreditorAgent3 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InstructionForCreditorAgent3", p->soap_type() == SOAP_TYPE_ns1__InstructionForCreditorAgent3 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__InstructionForCreditorAgent3(struct soap *soap, const char *URL, ns1__InstructionForCreditorAgent3 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InstructionForCreditorAgent3", p->soap_type() == SOAP_TYPE_ns1__InstructionForCreditorAgent3 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__InstructionForCreditorAgent3(struct soap *soap, const char *URL, ns1__InstructionForCreditorAgent3 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InstructionForCreditorAgent3", p->soap_type() == SOAP_TYPE_ns1__InstructionForCreditorAgent3 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__InstructionForCreditorAgent3 * SOAP_FMAC4 soap_get_ns1__InstructionForCreditorAgent3(struct soap*, ns1__InstructionForCreditorAgent3 *, const char*, const char*);

inline int soap_read_ns1__InstructionForCreditorAgent3(struct soap *soap, ns1__InstructionForCreditorAgent3 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__InstructionForCreditorAgent3(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__InstructionForCreditorAgent3(struct soap *soap, const char *URL, ns1__InstructionForCreditorAgent3 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__InstructionForCreditorAgent3(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__InstructionForCreditorAgent3(struct soap *soap, ns1__InstructionForCreditorAgent3 *p)
{
	if (::soap_read_ns1__InstructionForCreditorAgent3(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__GroupHeader95_DEFINED
#define SOAP_TYPE_ns1__GroupHeader95_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GroupHeader95(struct soap*, const char*, int, const ns1__GroupHeader95 *, const char*);
SOAP_FMAC3 ns1__GroupHeader95 * SOAP_FMAC4 soap_in_ns1__GroupHeader95(struct soap*, const char*, ns1__GroupHeader95 *, const char*);
SOAP_FMAC1 ns1__GroupHeader95 * SOAP_FMAC2 soap_instantiate_ns1__GroupHeader95(struct soap*, int, const char*, const char*, size_t*);

inline ns1__GroupHeader95 * soap_new_ns1__GroupHeader95(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GroupHeader95(soap, n, NULL, NULL, NULL);
}

inline ns1__GroupHeader95 * soap_new_req_ns1__GroupHeader95(
	struct soap *soap,
	const std::string& MsgId,
	time_t CreDtTm,
	const std::string& NbOfTxs,
	ns1__PartyIdentification135 *InitgPty)
{
	ns1__GroupHeader95 *_p = ::soap_new_ns1__GroupHeader95(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GroupHeader95::MsgId = MsgId;
		_p->ns1__GroupHeader95::CreDtTm = CreDtTm;
		_p->ns1__GroupHeader95::NbOfTxs = NbOfTxs;
		_p->ns1__GroupHeader95::InitgPty = InitgPty;
	}
	return _p;
}

inline ns1__GroupHeader95 * soap_new_set_ns1__GroupHeader95(
	struct soap *soap,
	const std::string& MsgId,
	time_t CreDtTm,
	const std::vector<ns1__Authorisation1Choice *> & Authstn,
	const std::string& NbOfTxs,
	std::string *CtrlSum,
	ns1__PartyIdentification135 *InitgPty,
	ns1__BranchAndFinancialInstitutionIdentification6 *FwdgAgt,
	ns1__PaymentInitiationSource1 *InitnSrc)
{
	ns1__GroupHeader95 *_p = ::soap_new_ns1__GroupHeader95(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GroupHeader95::MsgId = MsgId;
		_p->ns1__GroupHeader95::CreDtTm = CreDtTm;
		_p->ns1__GroupHeader95::Authstn = Authstn;
		_p->ns1__GroupHeader95::NbOfTxs = NbOfTxs;
		_p->ns1__GroupHeader95::CtrlSum = CtrlSum;
		_p->ns1__GroupHeader95::InitgPty = InitgPty;
		_p->ns1__GroupHeader95::FwdgAgt = FwdgAgt;
		_p->ns1__GroupHeader95::InitnSrc = InitnSrc;
	}
	return _p;
}

inline int soap_write_ns1__GroupHeader95(struct soap *soap, ns1__GroupHeader95 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GroupHeader95", p->soap_type() == SOAP_TYPE_ns1__GroupHeader95 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GroupHeader95(struct soap *soap, const char *URL, ns1__GroupHeader95 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GroupHeader95", p->soap_type() == SOAP_TYPE_ns1__GroupHeader95 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GroupHeader95(struct soap *soap, const char *URL, ns1__GroupHeader95 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GroupHeader95", p->soap_type() == SOAP_TYPE_ns1__GroupHeader95 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GroupHeader95(struct soap *soap, const char *URL, ns1__GroupHeader95 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GroupHeader95", p->soap_type() == SOAP_TYPE_ns1__GroupHeader95 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__GroupHeader95 * SOAP_FMAC4 soap_get_ns1__GroupHeader95(struct soap*, ns1__GroupHeader95 *, const char*, const char*);

inline int soap_read_ns1__GroupHeader95(struct soap *soap, ns1__GroupHeader95 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GroupHeader95(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GroupHeader95(struct soap *soap, const char *URL, ns1__GroupHeader95 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GroupHeader95(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__GroupHeader95(struct soap *soap, ns1__GroupHeader95 *p)
{
	if (::soap_read_ns1__GroupHeader95(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__GenericPersonIdentification1_DEFINED
#define SOAP_TYPE_ns1__GenericPersonIdentification1_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GenericPersonIdentification1(struct soap*, const char*, int, const ns1__GenericPersonIdentification1 *, const char*);
SOAP_FMAC3 ns1__GenericPersonIdentification1 * SOAP_FMAC4 soap_in_ns1__GenericPersonIdentification1(struct soap*, const char*, ns1__GenericPersonIdentification1 *, const char*);
SOAP_FMAC1 ns1__GenericPersonIdentification1 * SOAP_FMAC2 soap_instantiate_ns1__GenericPersonIdentification1(struct soap*, int, const char*, const char*, size_t*);

inline ns1__GenericPersonIdentification1 * soap_new_ns1__GenericPersonIdentification1(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GenericPersonIdentification1(soap, n, NULL, NULL, NULL);
}

inline ns1__GenericPersonIdentification1 * soap_new_req_ns1__GenericPersonIdentification1(
	struct soap *soap,
	const std::string& Id)
{
	ns1__GenericPersonIdentification1 *_p = ::soap_new_ns1__GenericPersonIdentification1(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GenericPersonIdentification1::Id = Id;
	}
	return _p;
}

inline ns1__GenericPersonIdentification1 * soap_new_set_ns1__GenericPersonIdentification1(
	struct soap *soap,
	const std::string& Id,
	ns1__PersonIdentificationSchemeName1Choice *SchmeNm,
	std::string *Issr)
{
	ns1__GenericPersonIdentification1 *_p = ::soap_new_ns1__GenericPersonIdentification1(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GenericPersonIdentification1::Id = Id;
		_p->ns1__GenericPersonIdentification1::SchmeNm = SchmeNm;
		_p->ns1__GenericPersonIdentification1::Issr = Issr;
	}
	return _p;
}

inline int soap_write_ns1__GenericPersonIdentification1(struct soap *soap, ns1__GenericPersonIdentification1 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GenericPersonIdentification1", p->soap_type() == SOAP_TYPE_ns1__GenericPersonIdentification1 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GenericPersonIdentification1(struct soap *soap, const char *URL, ns1__GenericPersonIdentification1 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GenericPersonIdentification1", p->soap_type() == SOAP_TYPE_ns1__GenericPersonIdentification1 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GenericPersonIdentification1(struct soap *soap, const char *URL, ns1__GenericPersonIdentification1 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GenericPersonIdentification1", p->soap_type() == SOAP_TYPE_ns1__GenericPersonIdentification1 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GenericPersonIdentification1(struct soap *soap, const char *URL, ns1__GenericPersonIdentification1 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GenericPersonIdentification1", p->soap_type() == SOAP_TYPE_ns1__GenericPersonIdentification1 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__GenericPersonIdentification1 * SOAP_FMAC4 soap_get_ns1__GenericPersonIdentification1(struct soap*, ns1__GenericPersonIdentification1 *, const char*, const char*);

inline int soap_read_ns1__GenericPersonIdentification1(struct soap *soap, ns1__GenericPersonIdentification1 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GenericPersonIdentification1(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GenericPersonIdentification1(struct soap *soap, const char *URL, ns1__GenericPersonIdentification1 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GenericPersonIdentification1(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__GenericPersonIdentification1(struct soap *soap, ns1__GenericPersonIdentification1 *p)
{
	if (::soap_read_ns1__GenericPersonIdentification1(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__GenericOrganisationIdentification1_DEFINED
#define SOAP_TYPE_ns1__GenericOrganisationIdentification1_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GenericOrganisationIdentification1(struct soap*, const char*, int, const ns1__GenericOrganisationIdentification1 *, const char*);
SOAP_FMAC3 ns1__GenericOrganisationIdentification1 * SOAP_FMAC4 soap_in_ns1__GenericOrganisationIdentification1(struct soap*, const char*, ns1__GenericOrganisationIdentification1 *, const char*);
SOAP_FMAC1 ns1__GenericOrganisationIdentification1 * SOAP_FMAC2 soap_instantiate_ns1__GenericOrganisationIdentification1(struct soap*, int, const char*, const char*, size_t*);

inline ns1__GenericOrganisationIdentification1 * soap_new_ns1__GenericOrganisationIdentification1(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GenericOrganisationIdentification1(soap, n, NULL, NULL, NULL);
}

inline ns1__GenericOrganisationIdentification1 * soap_new_req_ns1__GenericOrganisationIdentification1(
	struct soap *soap,
	const std::string& Id)
{
	ns1__GenericOrganisationIdentification1 *_p = ::soap_new_ns1__GenericOrganisationIdentification1(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GenericOrganisationIdentification1::Id = Id;
	}
	return _p;
}

inline ns1__GenericOrganisationIdentification1 * soap_new_set_ns1__GenericOrganisationIdentification1(
	struct soap *soap,
	const std::string& Id,
	ns1__OrganisationIdentificationSchemeName1Choice *SchmeNm,
	std::string *Issr)
{
	ns1__GenericOrganisationIdentification1 *_p = ::soap_new_ns1__GenericOrganisationIdentification1(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GenericOrganisationIdentification1::Id = Id;
		_p->ns1__GenericOrganisationIdentification1::SchmeNm = SchmeNm;
		_p->ns1__GenericOrganisationIdentification1::Issr = Issr;
	}
	return _p;
}

inline int soap_write_ns1__GenericOrganisationIdentification1(struct soap *soap, ns1__GenericOrganisationIdentification1 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GenericOrganisationIdentification1", p->soap_type() == SOAP_TYPE_ns1__GenericOrganisationIdentification1 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GenericOrganisationIdentification1(struct soap *soap, const char *URL, ns1__GenericOrganisationIdentification1 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GenericOrganisationIdentification1", p->soap_type() == SOAP_TYPE_ns1__GenericOrganisationIdentification1 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GenericOrganisationIdentification1(struct soap *soap, const char *URL, ns1__GenericOrganisationIdentification1 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GenericOrganisationIdentification1", p->soap_type() == SOAP_TYPE_ns1__GenericOrganisationIdentification1 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GenericOrganisationIdentification1(struct soap *soap, const char *URL, ns1__GenericOrganisationIdentification1 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GenericOrganisationIdentification1", p->soap_type() == SOAP_TYPE_ns1__GenericOrganisationIdentification1 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__GenericOrganisationIdentification1 * SOAP_FMAC4 soap_get_ns1__GenericOrganisationIdentification1(struct soap*, ns1__GenericOrganisationIdentification1 *, const char*, const char*);

inline int soap_read_ns1__GenericOrganisationIdentification1(struct soap *soap, ns1__GenericOrganisationIdentification1 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GenericOrganisationIdentification1(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GenericOrganisationIdentification1(struct soap *soap, const char *URL, ns1__GenericOrganisationIdentification1 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GenericOrganisationIdentification1(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__GenericOrganisationIdentification1(struct soap *soap, ns1__GenericOrganisationIdentification1 *p)
{
	if (::soap_read_ns1__GenericOrganisationIdentification1(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__GenericIdentification30_DEFINED
#define SOAP_TYPE_ns1__GenericIdentification30_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GenericIdentification30(struct soap*, const char*, int, const ns1__GenericIdentification30 *, const char*);
SOAP_FMAC3 ns1__GenericIdentification30 * SOAP_FMAC4 soap_in_ns1__GenericIdentification30(struct soap*, const char*, ns1__GenericIdentification30 *, const char*);
SOAP_FMAC1 ns1__GenericIdentification30 * SOAP_FMAC2 soap_instantiate_ns1__GenericIdentification30(struct soap*, int, const char*, const char*, size_t*);

inline ns1__GenericIdentification30 * soap_new_ns1__GenericIdentification30(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GenericIdentification30(soap, n, NULL, NULL, NULL);
}

inline ns1__GenericIdentification30 * soap_new_req_ns1__GenericIdentification30(
	struct soap *soap,
	const std::string& Id,
	const std::string& Issr)
{
	ns1__GenericIdentification30 *_p = ::soap_new_ns1__GenericIdentification30(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GenericIdentification30::Id = Id;
		_p->ns1__GenericIdentification30::Issr = Issr;
	}
	return _p;
}

inline ns1__GenericIdentification30 * soap_new_set_ns1__GenericIdentification30(
	struct soap *soap,
	const std::string& Id,
	const std::string& Issr,
	std::string *SchmeNm)
{
	ns1__GenericIdentification30 *_p = ::soap_new_ns1__GenericIdentification30(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GenericIdentification30::Id = Id;
		_p->ns1__GenericIdentification30::Issr = Issr;
		_p->ns1__GenericIdentification30::SchmeNm = SchmeNm;
	}
	return _p;
}

inline int soap_write_ns1__GenericIdentification30(struct soap *soap, ns1__GenericIdentification30 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GenericIdentification30", p->soap_type() == SOAP_TYPE_ns1__GenericIdentification30 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GenericIdentification30(struct soap *soap, const char *URL, ns1__GenericIdentification30 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GenericIdentification30", p->soap_type() == SOAP_TYPE_ns1__GenericIdentification30 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GenericIdentification30(struct soap *soap, const char *URL, ns1__GenericIdentification30 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GenericIdentification30", p->soap_type() == SOAP_TYPE_ns1__GenericIdentification30 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GenericIdentification30(struct soap *soap, const char *URL, ns1__GenericIdentification30 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GenericIdentification30", p->soap_type() == SOAP_TYPE_ns1__GenericIdentification30 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__GenericIdentification30 * SOAP_FMAC4 soap_get_ns1__GenericIdentification30(struct soap*, ns1__GenericIdentification30 *, const char*, const char*);

inline int soap_read_ns1__GenericIdentification30(struct soap *soap, ns1__GenericIdentification30 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GenericIdentification30(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GenericIdentification30(struct soap *soap, const char *URL, ns1__GenericIdentification30 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GenericIdentification30(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__GenericIdentification30(struct soap *soap, ns1__GenericIdentification30 *p)
{
	if (::soap_read_ns1__GenericIdentification30(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__GenericFinancialIdentification1_DEFINED
#define SOAP_TYPE_ns1__GenericFinancialIdentification1_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GenericFinancialIdentification1(struct soap*, const char*, int, const ns1__GenericFinancialIdentification1 *, const char*);
SOAP_FMAC3 ns1__GenericFinancialIdentification1 * SOAP_FMAC4 soap_in_ns1__GenericFinancialIdentification1(struct soap*, const char*, ns1__GenericFinancialIdentification1 *, const char*);
SOAP_FMAC1 ns1__GenericFinancialIdentification1 * SOAP_FMAC2 soap_instantiate_ns1__GenericFinancialIdentification1(struct soap*, int, const char*, const char*, size_t*);

inline ns1__GenericFinancialIdentification1 * soap_new_ns1__GenericFinancialIdentification1(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GenericFinancialIdentification1(soap, n, NULL, NULL, NULL);
}

inline ns1__GenericFinancialIdentification1 * soap_new_req_ns1__GenericFinancialIdentification1(
	struct soap *soap,
	const std::string& Id)
{
	ns1__GenericFinancialIdentification1 *_p = ::soap_new_ns1__GenericFinancialIdentification1(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GenericFinancialIdentification1::Id = Id;
	}
	return _p;
}

inline ns1__GenericFinancialIdentification1 * soap_new_set_ns1__GenericFinancialIdentification1(
	struct soap *soap,
	const std::string& Id,
	ns1__FinancialIdentificationSchemeName1Choice *SchmeNm,
	std::string *Issr)
{
	ns1__GenericFinancialIdentification1 *_p = ::soap_new_ns1__GenericFinancialIdentification1(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GenericFinancialIdentification1::Id = Id;
		_p->ns1__GenericFinancialIdentification1::SchmeNm = SchmeNm;
		_p->ns1__GenericFinancialIdentification1::Issr = Issr;
	}
	return _p;
}

inline int soap_write_ns1__GenericFinancialIdentification1(struct soap *soap, ns1__GenericFinancialIdentification1 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GenericFinancialIdentification1", p->soap_type() == SOAP_TYPE_ns1__GenericFinancialIdentification1 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GenericFinancialIdentification1(struct soap *soap, const char *URL, ns1__GenericFinancialIdentification1 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GenericFinancialIdentification1", p->soap_type() == SOAP_TYPE_ns1__GenericFinancialIdentification1 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GenericFinancialIdentification1(struct soap *soap, const char *URL, ns1__GenericFinancialIdentification1 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GenericFinancialIdentification1", p->soap_type() == SOAP_TYPE_ns1__GenericFinancialIdentification1 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GenericFinancialIdentification1(struct soap *soap, const char *URL, ns1__GenericFinancialIdentification1 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GenericFinancialIdentification1", p->soap_type() == SOAP_TYPE_ns1__GenericFinancialIdentification1 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__GenericFinancialIdentification1 * SOAP_FMAC4 soap_get_ns1__GenericFinancialIdentification1(struct soap*, ns1__GenericFinancialIdentification1 *, const char*, const char*);

inline int soap_read_ns1__GenericFinancialIdentification1(struct soap *soap, ns1__GenericFinancialIdentification1 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GenericFinancialIdentification1(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GenericFinancialIdentification1(struct soap *soap, const char *URL, ns1__GenericFinancialIdentification1 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GenericFinancialIdentification1(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__GenericFinancialIdentification1(struct soap *soap, ns1__GenericFinancialIdentification1 *p)
{
	if (::soap_read_ns1__GenericFinancialIdentification1(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__GenericAccountIdentification1_DEFINED
#define SOAP_TYPE_ns1__GenericAccountIdentification1_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GenericAccountIdentification1(struct soap*, const char*, int, const ns1__GenericAccountIdentification1 *, const char*);
SOAP_FMAC3 ns1__GenericAccountIdentification1 * SOAP_FMAC4 soap_in_ns1__GenericAccountIdentification1(struct soap*, const char*, ns1__GenericAccountIdentification1 *, const char*);
SOAP_FMAC1 ns1__GenericAccountIdentification1 * SOAP_FMAC2 soap_instantiate_ns1__GenericAccountIdentification1(struct soap*, int, const char*, const char*, size_t*);

inline ns1__GenericAccountIdentification1 * soap_new_ns1__GenericAccountIdentification1(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GenericAccountIdentification1(soap, n, NULL, NULL, NULL);
}

inline ns1__GenericAccountIdentification1 * soap_new_req_ns1__GenericAccountIdentification1(
	struct soap *soap,
	const std::string& Id)
{
	ns1__GenericAccountIdentification1 *_p = ::soap_new_ns1__GenericAccountIdentification1(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GenericAccountIdentification1::Id = Id;
	}
	return _p;
}

inline ns1__GenericAccountIdentification1 * soap_new_set_ns1__GenericAccountIdentification1(
	struct soap *soap,
	const std::string& Id,
	ns1__AccountSchemeName1Choice *SchmeNm,
	std::string *Issr)
{
	ns1__GenericAccountIdentification1 *_p = ::soap_new_ns1__GenericAccountIdentification1(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GenericAccountIdentification1::Id = Id;
		_p->ns1__GenericAccountIdentification1::SchmeNm = SchmeNm;
		_p->ns1__GenericAccountIdentification1::Issr = Issr;
	}
	return _p;
}

inline int soap_write_ns1__GenericAccountIdentification1(struct soap *soap, ns1__GenericAccountIdentification1 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GenericAccountIdentification1", p->soap_type() == SOAP_TYPE_ns1__GenericAccountIdentification1 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GenericAccountIdentification1(struct soap *soap, const char *URL, ns1__GenericAccountIdentification1 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GenericAccountIdentification1", p->soap_type() == SOAP_TYPE_ns1__GenericAccountIdentification1 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GenericAccountIdentification1(struct soap *soap, const char *URL, ns1__GenericAccountIdentification1 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GenericAccountIdentification1", p->soap_type() == SOAP_TYPE_ns1__GenericAccountIdentification1 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GenericAccountIdentification1(struct soap *soap, const char *URL, ns1__GenericAccountIdentification1 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GenericAccountIdentification1", p->soap_type() == SOAP_TYPE_ns1__GenericAccountIdentification1 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__GenericAccountIdentification1 * SOAP_FMAC4 soap_get_ns1__GenericAccountIdentification1(struct soap*, ns1__GenericAccountIdentification1 *, const char*, const char*);

inline int soap_read_ns1__GenericAccountIdentification1(struct soap *soap, ns1__GenericAccountIdentification1 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GenericAccountIdentification1(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GenericAccountIdentification1(struct soap *soap, const char *URL, ns1__GenericAccountIdentification1 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GenericAccountIdentification1(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__GenericAccountIdentification1(struct soap *soap, ns1__GenericAccountIdentification1 *p)
{
	if (::soap_read_ns1__GenericAccountIdentification1(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__GarnishmentType1Choice_DEFINED
#define SOAP_TYPE_ns1__GarnishmentType1Choice_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GarnishmentType1Choice(struct soap*, const char*, int, const ns1__GarnishmentType1Choice *, const char*);
SOAP_FMAC3 ns1__GarnishmentType1Choice * SOAP_FMAC4 soap_in_ns1__GarnishmentType1Choice(struct soap*, const char*, ns1__GarnishmentType1Choice *, const char*);
SOAP_FMAC1 ns1__GarnishmentType1Choice * SOAP_FMAC2 soap_instantiate_ns1__GarnishmentType1Choice(struct soap*, int, const char*, const char*, size_t*);

inline ns1__GarnishmentType1Choice * soap_new_ns1__GarnishmentType1Choice(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GarnishmentType1Choice(soap, n, NULL, NULL, NULL);
}

inline ns1__GarnishmentType1Choice * soap_new_req_ns1__GarnishmentType1Choice(
	struct soap *soap,
	const union _ns1__union_GarnishmentType1Choice& union_GarnishmentType1Choice)
{
	ns1__GarnishmentType1Choice *_p = ::soap_new_ns1__GarnishmentType1Choice(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GarnishmentType1Choice::union_GarnishmentType1Choice = union_GarnishmentType1Choice;
	}
	return _p;
}

inline ns1__GarnishmentType1Choice * soap_new_set_ns1__GarnishmentType1Choice(
	struct soap *soap,
	int __union_GarnishmentType1Choice,
	const union _ns1__union_GarnishmentType1Choice& union_GarnishmentType1Choice)
{
	ns1__GarnishmentType1Choice *_p = ::soap_new_ns1__GarnishmentType1Choice(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GarnishmentType1Choice::__union_GarnishmentType1Choice = __union_GarnishmentType1Choice;
		_p->ns1__GarnishmentType1Choice::union_GarnishmentType1Choice = union_GarnishmentType1Choice;
	}
	return _p;
}

inline int soap_write_ns1__GarnishmentType1Choice(struct soap *soap, ns1__GarnishmentType1Choice const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GarnishmentType1Choice", p->soap_type() == SOAP_TYPE_ns1__GarnishmentType1Choice ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GarnishmentType1Choice(struct soap *soap, const char *URL, ns1__GarnishmentType1Choice const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GarnishmentType1Choice", p->soap_type() == SOAP_TYPE_ns1__GarnishmentType1Choice ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GarnishmentType1Choice(struct soap *soap, const char *URL, ns1__GarnishmentType1Choice const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GarnishmentType1Choice", p->soap_type() == SOAP_TYPE_ns1__GarnishmentType1Choice ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GarnishmentType1Choice(struct soap *soap, const char *URL, ns1__GarnishmentType1Choice const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GarnishmentType1Choice", p->soap_type() == SOAP_TYPE_ns1__GarnishmentType1Choice ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__GarnishmentType1Choice * SOAP_FMAC4 soap_get_ns1__GarnishmentType1Choice(struct soap*, ns1__GarnishmentType1Choice *, const char*, const char*);

inline int soap_read_ns1__GarnishmentType1Choice(struct soap *soap, ns1__GarnishmentType1Choice *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GarnishmentType1Choice(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GarnishmentType1Choice(struct soap *soap, const char *URL, ns1__GarnishmentType1Choice *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GarnishmentType1Choice(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__GarnishmentType1Choice(struct soap *soap, ns1__GarnishmentType1Choice *p)
{
	if (::soap_read_ns1__GarnishmentType1Choice(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__GarnishmentType1_DEFINED
#define SOAP_TYPE_ns1__GarnishmentType1_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GarnishmentType1(struct soap*, const char*, int, const ns1__GarnishmentType1 *, const char*);
SOAP_FMAC3 ns1__GarnishmentType1 * SOAP_FMAC4 soap_in_ns1__GarnishmentType1(struct soap*, const char*, ns1__GarnishmentType1 *, const char*);
SOAP_FMAC1 ns1__GarnishmentType1 * SOAP_FMAC2 soap_instantiate_ns1__GarnishmentType1(struct soap*, int, const char*, const char*, size_t*);

inline ns1__GarnishmentType1 * soap_new_ns1__GarnishmentType1(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GarnishmentType1(soap, n, NULL, NULL, NULL);
}

inline ns1__GarnishmentType1 * soap_new_req_ns1__GarnishmentType1(
	struct soap *soap,
	ns1__GarnishmentType1Choice *CdOrPrtry)
{
	ns1__GarnishmentType1 *_p = ::soap_new_ns1__GarnishmentType1(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GarnishmentType1::CdOrPrtry = CdOrPrtry;
	}
	return _p;
}

inline ns1__GarnishmentType1 * soap_new_set_ns1__GarnishmentType1(
	struct soap *soap,
	ns1__GarnishmentType1Choice *CdOrPrtry,
	std::string *Issr)
{
	ns1__GarnishmentType1 *_p = ::soap_new_ns1__GarnishmentType1(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GarnishmentType1::CdOrPrtry = CdOrPrtry;
		_p->ns1__GarnishmentType1::Issr = Issr;
	}
	return _p;
}

inline int soap_write_ns1__GarnishmentType1(struct soap *soap, ns1__GarnishmentType1 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GarnishmentType1", p->soap_type() == SOAP_TYPE_ns1__GarnishmentType1 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GarnishmentType1(struct soap *soap, const char *URL, ns1__GarnishmentType1 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GarnishmentType1", p->soap_type() == SOAP_TYPE_ns1__GarnishmentType1 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__GarnishmentType1(struct soap *soap, const char *URL, ns1__GarnishmentType1 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GarnishmentType1", p->soap_type() == SOAP_TYPE_ns1__GarnishmentType1 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GarnishmentType1(struct soap *soap, const char *URL, ns1__GarnishmentType1 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GarnishmentType1", p->soap_type() == SOAP_TYPE_ns1__GarnishmentType1 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__GarnishmentType1 * SOAP_FMAC4 soap_get_ns1__GarnishmentType1(struct soap*, ns1__GarnishmentType1 *, const char*, const char*);

inline int soap_read_ns1__GarnishmentType1(struct soap *soap, ns1__GarnishmentType1 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__GarnishmentType1(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GarnishmentType1(struct soap *soap, const char *URL, ns1__GarnishmentType1 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__GarnishmentType1(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__GarnishmentType1(struct soap *soap, ns1__GarnishmentType1 *p)
{
	if (::soap_read_ns1__GarnishmentType1(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__Garnishment3_DEFINED
#define SOAP_TYPE_ns1__Garnishment3_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Garnishment3(struct soap*, const char*, int, const ns1__Garnishment3 *, const char*);
SOAP_FMAC3 ns1__Garnishment3 * SOAP_FMAC4 soap_in_ns1__Garnishment3(struct soap*, const char*, ns1__Garnishment3 *, const char*);
SOAP_FMAC1 ns1__Garnishment3 * SOAP_FMAC2 soap_instantiate_ns1__Garnishment3(struct soap*, int, const char*, const char*, size_t*);

inline ns1__Garnishment3 * soap_new_ns1__Garnishment3(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__Garnishment3(soap, n, NULL, NULL, NULL);
}

inline ns1__Garnishment3 * soap_new_req_ns1__Garnishment3(
	struct soap *soap,
	ns1__GarnishmentType1 *Tp)
{
	ns1__Garnishment3 *_p = ::soap_new_ns1__Garnishment3(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__Garnishment3::Tp = Tp;
	}
	return _p;
}

inline ns1__Garnishment3 * soap_new_set_ns1__Garnishment3(
	struct soap *soap,
	ns1__GarnishmentType1 *Tp,
	ns1__PartyIdentification135 *Grnshee,
	ns1__PartyIdentification135 *GrnshmtAdmstr,
	std::string *RefNb,
	std::string *Dt,
	ns1__ActiveOrHistoricCurrencyAndAmount *RmtdAmt,
	bool *FmlyMdclInsrncInd,
	bool *MplyeeTermntnInd)
{
	ns1__Garnishment3 *_p = ::soap_new_ns1__Garnishment3(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__Garnishment3::Tp = Tp;
		_p->ns1__Garnishment3::Grnshee = Grnshee;
		_p->ns1__Garnishment3::GrnshmtAdmstr = GrnshmtAdmstr;
		_p->ns1__Garnishment3::RefNb = RefNb;
		_p->ns1__Garnishment3::Dt = Dt;
		_p->ns1__Garnishment3::RmtdAmt = RmtdAmt;
		_p->ns1__Garnishment3::FmlyMdclInsrncInd = FmlyMdclInsrncInd;
		_p->ns1__Garnishment3::MplyeeTermntnInd = MplyeeTermntnInd;
	}
	return _p;
}

inline int soap_write_ns1__Garnishment3(struct soap *soap, ns1__Garnishment3 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Garnishment3", p->soap_type() == SOAP_TYPE_ns1__Garnishment3 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__Garnishment3(struct soap *soap, const char *URL, ns1__Garnishment3 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Garnishment3", p->soap_type() == SOAP_TYPE_ns1__Garnishment3 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__Garnishment3(struct soap *soap, const char *URL, ns1__Garnishment3 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Garnishment3", p->soap_type() == SOAP_TYPE_ns1__Garnishment3 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__Garnishment3(struct soap *soap, const char *URL, ns1__Garnishment3 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Garnishment3", p->soap_type() == SOAP_TYPE_ns1__Garnishment3 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__Garnishment3 * SOAP_FMAC4 soap_get_ns1__Garnishment3(struct soap*, ns1__Garnishment3 *, const char*, const char*);

inline int soap_read_ns1__Garnishment3(struct soap *soap, ns1__Garnishment3 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__Garnishment3(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__Garnishment3(struct soap *soap, const char *URL, ns1__Garnishment3 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__Garnishment3(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__Garnishment3(struct soap *soap, ns1__Garnishment3 *p)
{
	if (::soap_read_ns1__Garnishment3(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__FrequencyPeriod1_DEFINED
#define SOAP_TYPE_ns1__FrequencyPeriod1_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__FrequencyPeriod1(struct soap*, const char*, int, const ns1__FrequencyPeriod1 *, const char*);
SOAP_FMAC3 ns1__FrequencyPeriod1 * SOAP_FMAC4 soap_in_ns1__FrequencyPeriod1(struct soap*, const char*, ns1__FrequencyPeriod1 *, const char*);
SOAP_FMAC1 ns1__FrequencyPeriod1 * SOAP_FMAC2 soap_instantiate_ns1__FrequencyPeriod1(struct soap*, int, const char*, const char*, size_t*);

inline ns1__FrequencyPeriod1 * soap_new_ns1__FrequencyPeriod1(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__FrequencyPeriod1(soap, n, NULL, NULL, NULL);
}

inline ns1__FrequencyPeriod1 * soap_new_req_ns1__FrequencyPeriod1(
	struct soap *soap,
	enum ns1__Frequency6Code Tp,
	const std::string& CntPerPrd)
{
	ns1__FrequencyPeriod1 *_p = ::soap_new_ns1__FrequencyPeriod1(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__FrequencyPeriod1::Tp = Tp;
		_p->ns1__FrequencyPeriod1::CntPerPrd = CntPerPrd;
	}
	return _p;
}

inline ns1__FrequencyPeriod1 * soap_new_set_ns1__FrequencyPeriod1(
	struct soap *soap,
	enum ns1__Frequency6Code Tp,
	const std::string& CntPerPrd)
{
	ns1__FrequencyPeriod1 *_p = ::soap_new_ns1__FrequencyPeriod1(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__FrequencyPeriod1::Tp = Tp;
		_p->ns1__FrequencyPeriod1::CntPerPrd = CntPerPrd;
	}
	return _p;
}

inline int soap_write_ns1__FrequencyPeriod1(struct soap *soap, ns1__FrequencyPeriod1 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FrequencyPeriod1", p->soap_type() == SOAP_TYPE_ns1__FrequencyPeriod1 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__FrequencyPeriod1(struct soap *soap, const char *URL, ns1__FrequencyPeriod1 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FrequencyPeriod1", p->soap_type() == SOAP_TYPE_ns1__FrequencyPeriod1 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__FrequencyPeriod1(struct soap *soap, const char *URL, ns1__FrequencyPeriod1 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FrequencyPeriod1", p->soap_type() == SOAP_TYPE_ns1__FrequencyPeriod1 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__FrequencyPeriod1(struct soap *soap, const char *URL, ns1__FrequencyPeriod1 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FrequencyPeriod1", p->soap_type() == SOAP_TYPE_ns1__FrequencyPeriod1 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__FrequencyPeriod1 * SOAP_FMAC4 soap_get_ns1__FrequencyPeriod1(struct soap*, ns1__FrequencyPeriod1 *, const char*, const char*);

inline int soap_read_ns1__FrequencyPeriod1(struct soap *soap, ns1__FrequencyPeriod1 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__FrequencyPeriod1(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__FrequencyPeriod1(struct soap *soap, const char *URL, ns1__FrequencyPeriod1 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__FrequencyPeriod1(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__FrequencyPeriod1(struct soap *soap, ns1__FrequencyPeriod1 *p)
{
	if (::soap_read_ns1__FrequencyPeriod1(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__FrequencyAndMoment1_DEFINED
#define SOAP_TYPE_ns1__FrequencyAndMoment1_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__FrequencyAndMoment1(struct soap*, const char*, int, const ns1__FrequencyAndMoment1 *, const char*);
SOAP_FMAC3 ns1__FrequencyAndMoment1 * SOAP_FMAC4 soap_in_ns1__FrequencyAndMoment1(struct soap*, const char*, ns1__FrequencyAndMoment1 *, const char*);
SOAP_FMAC1 ns1__FrequencyAndMoment1 * SOAP_FMAC2 soap_instantiate_ns1__FrequencyAndMoment1(struct soap*, int, const char*, const char*, size_t*);

inline ns1__FrequencyAndMoment1 * soap_new_ns1__FrequencyAndMoment1(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__FrequencyAndMoment1(soap, n, NULL, NULL, NULL);
}

inline ns1__FrequencyAndMoment1 * soap_new_req_ns1__FrequencyAndMoment1(
	struct soap *soap,
	enum ns1__Frequency6Code Tp,
	const std::string& PtInTm)
{
	ns1__FrequencyAndMoment1 *_p = ::soap_new_ns1__FrequencyAndMoment1(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__FrequencyAndMoment1::Tp = Tp;
		_p->ns1__FrequencyAndMoment1::PtInTm = PtInTm;
	}
	return _p;
}

inline ns1__FrequencyAndMoment1 * soap_new_set_ns1__FrequencyAndMoment1(
	struct soap *soap,
	enum ns1__Frequency6Code Tp,
	const std::string& PtInTm)
{
	ns1__FrequencyAndMoment1 *_p = ::soap_new_ns1__FrequencyAndMoment1(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__FrequencyAndMoment1::Tp = Tp;
		_p->ns1__FrequencyAndMoment1::PtInTm = PtInTm;
	}
	return _p;
}

inline int soap_write_ns1__FrequencyAndMoment1(struct soap *soap, ns1__FrequencyAndMoment1 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FrequencyAndMoment1", p->soap_type() == SOAP_TYPE_ns1__FrequencyAndMoment1 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__FrequencyAndMoment1(struct soap *soap, const char *URL, ns1__FrequencyAndMoment1 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FrequencyAndMoment1", p->soap_type() == SOAP_TYPE_ns1__FrequencyAndMoment1 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__FrequencyAndMoment1(struct soap *soap, const char *URL, ns1__FrequencyAndMoment1 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FrequencyAndMoment1", p->soap_type() == SOAP_TYPE_ns1__FrequencyAndMoment1 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__FrequencyAndMoment1(struct soap *soap, const char *URL, ns1__FrequencyAndMoment1 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FrequencyAndMoment1", p->soap_type() == SOAP_TYPE_ns1__FrequencyAndMoment1 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__FrequencyAndMoment1 * SOAP_FMAC4 soap_get_ns1__FrequencyAndMoment1(struct soap*, ns1__FrequencyAndMoment1 *, const char*, const char*);

inline int soap_read_ns1__FrequencyAndMoment1(struct soap *soap, ns1__FrequencyAndMoment1 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__FrequencyAndMoment1(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__FrequencyAndMoment1(struct soap *soap, const char *URL, ns1__FrequencyAndMoment1 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__FrequencyAndMoment1(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__FrequencyAndMoment1(struct soap *soap, ns1__FrequencyAndMoment1 *p)
{
	if (::soap_read_ns1__FrequencyAndMoment1(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__Frequency36Choice_DEFINED
#define SOAP_TYPE_ns1__Frequency36Choice_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Frequency36Choice(struct soap*, const char*, int, const ns1__Frequency36Choice *, const char*);
SOAP_FMAC3 ns1__Frequency36Choice * SOAP_FMAC4 soap_in_ns1__Frequency36Choice(struct soap*, const char*, ns1__Frequency36Choice *, const char*);
SOAP_FMAC1 ns1__Frequency36Choice * SOAP_FMAC2 soap_instantiate_ns1__Frequency36Choice(struct soap*, int, const char*, const char*, size_t*);

inline ns1__Frequency36Choice * soap_new_ns1__Frequency36Choice(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__Frequency36Choice(soap, n, NULL, NULL, NULL);
}

inline ns1__Frequency36Choice * soap_new_req_ns1__Frequency36Choice(
	struct soap *soap,
	const union _ns1__union_Frequency36Choice& union_Frequency36Choice)
{
	ns1__Frequency36Choice *_p = ::soap_new_ns1__Frequency36Choice(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__Frequency36Choice::union_Frequency36Choice = union_Frequency36Choice;
	}
	return _p;
}

inline ns1__Frequency36Choice * soap_new_set_ns1__Frequency36Choice(
	struct soap *soap,
	int __union_Frequency36Choice,
	const union _ns1__union_Frequency36Choice& union_Frequency36Choice)
{
	ns1__Frequency36Choice *_p = ::soap_new_ns1__Frequency36Choice(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__Frequency36Choice::__union_Frequency36Choice = __union_Frequency36Choice;
		_p->ns1__Frequency36Choice::union_Frequency36Choice = union_Frequency36Choice;
	}
	return _p;
}

inline int soap_write_ns1__Frequency36Choice(struct soap *soap, ns1__Frequency36Choice const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Frequency36Choice", p->soap_type() == SOAP_TYPE_ns1__Frequency36Choice ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__Frequency36Choice(struct soap *soap, const char *URL, ns1__Frequency36Choice const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Frequency36Choice", p->soap_type() == SOAP_TYPE_ns1__Frequency36Choice ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__Frequency36Choice(struct soap *soap, const char *URL, ns1__Frequency36Choice const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Frequency36Choice", p->soap_type() == SOAP_TYPE_ns1__Frequency36Choice ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__Frequency36Choice(struct soap *soap, const char *URL, ns1__Frequency36Choice const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Frequency36Choice", p->soap_type() == SOAP_TYPE_ns1__Frequency36Choice ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__Frequency36Choice * SOAP_FMAC4 soap_get_ns1__Frequency36Choice(struct soap*, ns1__Frequency36Choice *, const char*, const char*);

inline int soap_read_ns1__Frequency36Choice(struct soap *soap, ns1__Frequency36Choice *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__Frequency36Choice(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__Frequency36Choice(struct soap *soap, const char *URL, ns1__Frequency36Choice *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__Frequency36Choice(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__Frequency36Choice(struct soap *soap, ns1__Frequency36Choice *p)
{
	if (::soap_read_ns1__Frequency36Choice(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__FinancialInstitutionIdentification18_DEFINED
#define SOAP_TYPE_ns1__FinancialInstitutionIdentification18_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__FinancialInstitutionIdentification18(struct soap*, const char*, int, const ns1__FinancialInstitutionIdentification18 *, const char*);
SOAP_FMAC3 ns1__FinancialInstitutionIdentification18 * SOAP_FMAC4 soap_in_ns1__FinancialInstitutionIdentification18(struct soap*, const char*, ns1__FinancialInstitutionIdentification18 *, const char*);
SOAP_FMAC1 ns1__FinancialInstitutionIdentification18 * SOAP_FMAC2 soap_instantiate_ns1__FinancialInstitutionIdentification18(struct soap*, int, const char*, const char*, size_t*);

inline ns1__FinancialInstitutionIdentification18 * soap_new_ns1__FinancialInstitutionIdentification18(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__FinancialInstitutionIdentification18(soap, n, NULL, NULL, NULL);
}

inline ns1__FinancialInstitutionIdentification18 * soap_new_req_ns1__FinancialInstitutionIdentification18(
	struct soap *soap)
{
	ns1__FinancialInstitutionIdentification18 *_p = ::soap_new_ns1__FinancialInstitutionIdentification18(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__FinancialInstitutionIdentification18 * soap_new_set_ns1__FinancialInstitutionIdentification18(
	struct soap *soap,
	std::string *BICFI,
	ns1__ClearingSystemMemberIdentification2 *ClrSysMmbId,
	std::string *LEI,
	std::string *Nm,
	ns1__PostalAddress24 *PstlAdr,
	ns1__GenericFinancialIdentification1 *Othr)
{
	ns1__FinancialInstitutionIdentification18 *_p = ::soap_new_ns1__FinancialInstitutionIdentification18(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__FinancialInstitutionIdentification18::BICFI = BICFI;
		_p->ns1__FinancialInstitutionIdentification18::ClrSysMmbId = ClrSysMmbId;
		_p->ns1__FinancialInstitutionIdentification18::LEI = LEI;
		_p->ns1__FinancialInstitutionIdentification18::Nm = Nm;
		_p->ns1__FinancialInstitutionIdentification18::PstlAdr = PstlAdr;
		_p->ns1__FinancialInstitutionIdentification18::Othr = Othr;
	}
	return _p;
}

inline int soap_write_ns1__FinancialInstitutionIdentification18(struct soap *soap, ns1__FinancialInstitutionIdentification18 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FinancialInstitutionIdentification18", p->soap_type() == SOAP_TYPE_ns1__FinancialInstitutionIdentification18 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__FinancialInstitutionIdentification18(struct soap *soap, const char *URL, ns1__FinancialInstitutionIdentification18 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FinancialInstitutionIdentification18", p->soap_type() == SOAP_TYPE_ns1__FinancialInstitutionIdentification18 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__FinancialInstitutionIdentification18(struct soap *soap, const char *URL, ns1__FinancialInstitutionIdentification18 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FinancialInstitutionIdentification18", p->soap_type() == SOAP_TYPE_ns1__FinancialInstitutionIdentification18 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__FinancialInstitutionIdentification18(struct soap *soap, const char *URL, ns1__FinancialInstitutionIdentification18 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FinancialInstitutionIdentification18", p->soap_type() == SOAP_TYPE_ns1__FinancialInstitutionIdentification18 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__FinancialInstitutionIdentification18 * SOAP_FMAC4 soap_get_ns1__FinancialInstitutionIdentification18(struct soap*, ns1__FinancialInstitutionIdentification18 *, const char*, const char*);

inline int soap_read_ns1__FinancialInstitutionIdentification18(struct soap *soap, ns1__FinancialInstitutionIdentification18 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__FinancialInstitutionIdentification18(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__FinancialInstitutionIdentification18(struct soap *soap, const char *URL, ns1__FinancialInstitutionIdentification18 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__FinancialInstitutionIdentification18(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__FinancialInstitutionIdentification18(struct soap *soap, ns1__FinancialInstitutionIdentification18 *p)
{
	if (::soap_read_ns1__FinancialInstitutionIdentification18(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__FinancialIdentificationSchemeName1Choice_DEFINED
#define SOAP_TYPE_ns1__FinancialIdentificationSchemeName1Choice_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__FinancialIdentificationSchemeName1Choice(struct soap*, const char*, int, const ns1__FinancialIdentificationSchemeName1Choice *, const char*);
SOAP_FMAC3 ns1__FinancialIdentificationSchemeName1Choice * SOAP_FMAC4 soap_in_ns1__FinancialIdentificationSchemeName1Choice(struct soap*, const char*, ns1__FinancialIdentificationSchemeName1Choice *, const char*);
SOAP_FMAC1 ns1__FinancialIdentificationSchemeName1Choice * SOAP_FMAC2 soap_instantiate_ns1__FinancialIdentificationSchemeName1Choice(struct soap*, int, const char*, const char*, size_t*);

inline ns1__FinancialIdentificationSchemeName1Choice * soap_new_ns1__FinancialIdentificationSchemeName1Choice(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__FinancialIdentificationSchemeName1Choice(soap, n, NULL, NULL, NULL);
}

inline ns1__FinancialIdentificationSchemeName1Choice * soap_new_req_ns1__FinancialIdentificationSchemeName1Choice(
	struct soap *soap,
	const union _ns1__union_FinancialIdentificationSchemeName1Choice& union_FinancialIdentificationSchemeName1Choice)
{
	ns1__FinancialIdentificationSchemeName1Choice *_p = ::soap_new_ns1__FinancialIdentificationSchemeName1Choice(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__FinancialIdentificationSchemeName1Choice::union_FinancialIdentificationSchemeName1Choice = union_FinancialIdentificationSchemeName1Choice;
	}
	return _p;
}

inline ns1__FinancialIdentificationSchemeName1Choice * soap_new_set_ns1__FinancialIdentificationSchemeName1Choice(
	struct soap *soap,
	int __union_FinancialIdentificationSchemeName1Choice,
	const union _ns1__union_FinancialIdentificationSchemeName1Choice& union_FinancialIdentificationSchemeName1Choice)
{
	ns1__FinancialIdentificationSchemeName1Choice *_p = ::soap_new_ns1__FinancialIdentificationSchemeName1Choice(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__FinancialIdentificationSchemeName1Choice::__union_FinancialIdentificationSchemeName1Choice = __union_FinancialIdentificationSchemeName1Choice;
		_p->ns1__FinancialIdentificationSchemeName1Choice::union_FinancialIdentificationSchemeName1Choice = union_FinancialIdentificationSchemeName1Choice;
	}
	return _p;
}

inline int soap_write_ns1__FinancialIdentificationSchemeName1Choice(struct soap *soap, ns1__FinancialIdentificationSchemeName1Choice const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FinancialIdentificationSchemeName1Choice", p->soap_type() == SOAP_TYPE_ns1__FinancialIdentificationSchemeName1Choice ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__FinancialIdentificationSchemeName1Choice(struct soap *soap, const char *URL, ns1__FinancialIdentificationSchemeName1Choice const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FinancialIdentificationSchemeName1Choice", p->soap_type() == SOAP_TYPE_ns1__FinancialIdentificationSchemeName1Choice ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__FinancialIdentificationSchemeName1Choice(struct soap *soap, const char *URL, ns1__FinancialIdentificationSchemeName1Choice const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FinancialIdentificationSchemeName1Choice", p->soap_type() == SOAP_TYPE_ns1__FinancialIdentificationSchemeName1Choice ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__FinancialIdentificationSchemeName1Choice(struct soap *soap, const char *URL, ns1__FinancialIdentificationSchemeName1Choice const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FinancialIdentificationSchemeName1Choice", p->soap_type() == SOAP_TYPE_ns1__FinancialIdentificationSchemeName1Choice ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__FinancialIdentificationSchemeName1Choice * SOAP_FMAC4 soap_get_ns1__FinancialIdentificationSchemeName1Choice(struct soap*, ns1__FinancialIdentificationSchemeName1Choice *, const char*, const char*);

inline int soap_read_ns1__FinancialIdentificationSchemeName1Choice(struct soap *soap, ns1__FinancialIdentificationSchemeName1Choice *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__FinancialIdentificationSchemeName1Choice(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__FinancialIdentificationSchemeName1Choice(struct soap *soap, const char *URL, ns1__FinancialIdentificationSchemeName1Choice *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__FinancialIdentificationSchemeName1Choice(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__FinancialIdentificationSchemeName1Choice(struct soap *soap, ns1__FinancialIdentificationSchemeName1Choice *p)
{
	if (::soap_read_ns1__FinancialIdentificationSchemeName1Choice(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__ExchangeRate1_DEFINED
#define SOAP_TYPE_ns1__ExchangeRate1_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ExchangeRate1(struct soap*, const char*, int, const ns1__ExchangeRate1 *, const char*);
SOAP_FMAC3 ns1__ExchangeRate1 * SOAP_FMAC4 soap_in_ns1__ExchangeRate1(struct soap*, const char*, ns1__ExchangeRate1 *, const char*);
SOAP_FMAC1 ns1__ExchangeRate1 * SOAP_FMAC2 soap_instantiate_ns1__ExchangeRate1(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ExchangeRate1 * soap_new_ns1__ExchangeRate1(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ExchangeRate1(soap, n, NULL, NULL, NULL);
}

inline ns1__ExchangeRate1 * soap_new_req_ns1__ExchangeRate1(
	struct soap *soap)
{
	ns1__ExchangeRate1 *_p = ::soap_new_ns1__ExchangeRate1(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__ExchangeRate1 * soap_new_set_ns1__ExchangeRate1(
	struct soap *soap,
	std::string *UnitCcy,
	std::string *XchgRate,
	enum ns1__ExchangeRateType1Code *RateTp,
	std::string *CtrctId)
{
	ns1__ExchangeRate1 *_p = ::soap_new_ns1__ExchangeRate1(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ExchangeRate1::UnitCcy = UnitCcy;
		_p->ns1__ExchangeRate1::XchgRate = XchgRate;
		_p->ns1__ExchangeRate1::RateTp = RateTp;
		_p->ns1__ExchangeRate1::CtrctId = CtrctId;
	}
	return _p;
}

inline int soap_write_ns1__ExchangeRate1(struct soap *soap, ns1__ExchangeRate1 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ExchangeRate1", p->soap_type() == SOAP_TYPE_ns1__ExchangeRate1 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ExchangeRate1(struct soap *soap, const char *URL, ns1__ExchangeRate1 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ExchangeRate1", p->soap_type() == SOAP_TYPE_ns1__ExchangeRate1 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ExchangeRate1(struct soap *soap, const char *URL, ns1__ExchangeRate1 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ExchangeRate1", p->soap_type() == SOAP_TYPE_ns1__ExchangeRate1 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ExchangeRate1(struct soap *soap, const char *URL, ns1__ExchangeRate1 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ExchangeRate1", p->soap_type() == SOAP_TYPE_ns1__ExchangeRate1 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ExchangeRate1 * SOAP_FMAC4 soap_get_ns1__ExchangeRate1(struct soap*, ns1__ExchangeRate1 *, const char*, const char*);

inline int soap_read_ns1__ExchangeRate1(struct soap *soap, ns1__ExchangeRate1 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__ExchangeRate1(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ExchangeRate1(struct soap *soap, const char *URL, ns1__ExchangeRate1 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ExchangeRate1(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__ExchangeRate1(struct soap *soap, ns1__ExchangeRate1 *p)
{
	if (::soap_read_ns1__ExchangeRate1(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__EquivalentAmount2_DEFINED
#define SOAP_TYPE_ns1__EquivalentAmount2_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__EquivalentAmount2(struct soap*, const char*, int, const ns1__EquivalentAmount2 *, const char*);
SOAP_FMAC3 ns1__EquivalentAmount2 * SOAP_FMAC4 soap_in_ns1__EquivalentAmount2(struct soap*, const char*, ns1__EquivalentAmount2 *, const char*);
SOAP_FMAC1 ns1__EquivalentAmount2 * SOAP_FMAC2 soap_instantiate_ns1__EquivalentAmount2(struct soap*, int, const char*, const char*, size_t*);

inline ns1__EquivalentAmount2 * soap_new_ns1__EquivalentAmount2(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__EquivalentAmount2(soap, n, NULL, NULL, NULL);
}

inline ns1__EquivalentAmount2 * soap_new_req_ns1__EquivalentAmount2(
	struct soap *soap,
	ns1__ActiveOrHistoricCurrencyAndAmount *Amt,
	const std::string& CcyOfTrf)
{
	ns1__EquivalentAmount2 *_p = ::soap_new_ns1__EquivalentAmount2(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__EquivalentAmount2::Amt = Amt;
		_p->ns1__EquivalentAmount2::CcyOfTrf = CcyOfTrf;
	}
	return _p;
}

inline ns1__EquivalentAmount2 * soap_new_set_ns1__EquivalentAmount2(
	struct soap *soap,
	ns1__ActiveOrHistoricCurrencyAndAmount *Amt,
	const std::string& CcyOfTrf)
{
	ns1__EquivalentAmount2 *_p = ::soap_new_ns1__EquivalentAmount2(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__EquivalentAmount2::Amt = Amt;
		_p->ns1__EquivalentAmount2::CcyOfTrf = CcyOfTrf;
	}
	return _p;
}

inline int soap_write_ns1__EquivalentAmount2(struct soap *soap, ns1__EquivalentAmount2 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EquivalentAmount2", p->soap_type() == SOAP_TYPE_ns1__EquivalentAmount2 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__EquivalentAmount2(struct soap *soap, const char *URL, ns1__EquivalentAmount2 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EquivalentAmount2", p->soap_type() == SOAP_TYPE_ns1__EquivalentAmount2 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__EquivalentAmount2(struct soap *soap, const char *URL, ns1__EquivalentAmount2 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EquivalentAmount2", p->soap_type() == SOAP_TYPE_ns1__EquivalentAmount2 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__EquivalentAmount2(struct soap *soap, const char *URL, ns1__EquivalentAmount2 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EquivalentAmount2", p->soap_type() == SOAP_TYPE_ns1__EquivalentAmount2 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__EquivalentAmount2 * SOAP_FMAC4 soap_get_ns1__EquivalentAmount2(struct soap*, ns1__EquivalentAmount2 *, const char*, const char*);

inline int soap_read_ns1__EquivalentAmount2(struct soap *soap, ns1__EquivalentAmount2 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__EquivalentAmount2(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__EquivalentAmount2(struct soap *soap, const char *URL, ns1__EquivalentAmount2 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__EquivalentAmount2(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__EquivalentAmount2(struct soap *soap, ns1__EquivalentAmount2 *p)
{
	if (::soap_read_ns1__EquivalentAmount2(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__DocumentLineType1Choice_DEFINED
#define SOAP_TYPE_ns1__DocumentLineType1Choice_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DocumentLineType1Choice(struct soap*, const char*, int, const ns1__DocumentLineType1Choice *, const char*);
SOAP_FMAC3 ns1__DocumentLineType1Choice * SOAP_FMAC4 soap_in_ns1__DocumentLineType1Choice(struct soap*, const char*, ns1__DocumentLineType1Choice *, const char*);
SOAP_FMAC1 ns1__DocumentLineType1Choice * SOAP_FMAC2 soap_instantiate_ns1__DocumentLineType1Choice(struct soap*, int, const char*, const char*, size_t*);

inline ns1__DocumentLineType1Choice * soap_new_ns1__DocumentLineType1Choice(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__DocumentLineType1Choice(soap, n, NULL, NULL, NULL);
}

inline ns1__DocumentLineType1Choice * soap_new_req_ns1__DocumentLineType1Choice(
	struct soap *soap,
	const union _ns1__union_DocumentLineType1Choice& union_DocumentLineType1Choice)
{
	ns1__DocumentLineType1Choice *_p = ::soap_new_ns1__DocumentLineType1Choice(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DocumentLineType1Choice::union_DocumentLineType1Choice = union_DocumentLineType1Choice;
	}
	return _p;
}

inline ns1__DocumentLineType1Choice * soap_new_set_ns1__DocumentLineType1Choice(
	struct soap *soap,
	int __union_DocumentLineType1Choice,
	const union _ns1__union_DocumentLineType1Choice& union_DocumentLineType1Choice)
{
	ns1__DocumentLineType1Choice *_p = ::soap_new_ns1__DocumentLineType1Choice(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DocumentLineType1Choice::__union_DocumentLineType1Choice = __union_DocumentLineType1Choice;
		_p->ns1__DocumentLineType1Choice::union_DocumentLineType1Choice = union_DocumentLineType1Choice;
	}
	return _p;
}

inline int soap_write_ns1__DocumentLineType1Choice(struct soap *soap, ns1__DocumentLineType1Choice const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DocumentLineType1Choice", p->soap_type() == SOAP_TYPE_ns1__DocumentLineType1Choice ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__DocumentLineType1Choice(struct soap *soap, const char *URL, ns1__DocumentLineType1Choice const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DocumentLineType1Choice", p->soap_type() == SOAP_TYPE_ns1__DocumentLineType1Choice ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__DocumentLineType1Choice(struct soap *soap, const char *URL, ns1__DocumentLineType1Choice const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DocumentLineType1Choice", p->soap_type() == SOAP_TYPE_ns1__DocumentLineType1Choice ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DocumentLineType1Choice(struct soap *soap, const char *URL, ns1__DocumentLineType1Choice const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DocumentLineType1Choice", p->soap_type() == SOAP_TYPE_ns1__DocumentLineType1Choice ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__DocumentLineType1Choice * SOAP_FMAC4 soap_get_ns1__DocumentLineType1Choice(struct soap*, ns1__DocumentLineType1Choice *, const char*, const char*);

inline int soap_read_ns1__DocumentLineType1Choice(struct soap *soap, ns1__DocumentLineType1Choice *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__DocumentLineType1Choice(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DocumentLineType1Choice(struct soap *soap, const char *URL, ns1__DocumentLineType1Choice *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__DocumentLineType1Choice(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__DocumentLineType1Choice(struct soap *soap, ns1__DocumentLineType1Choice *p)
{
	if (::soap_read_ns1__DocumentLineType1Choice(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__DocumentLineType1_DEFINED
#define SOAP_TYPE_ns1__DocumentLineType1_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DocumentLineType1(struct soap*, const char*, int, const ns1__DocumentLineType1 *, const char*);
SOAP_FMAC3 ns1__DocumentLineType1 * SOAP_FMAC4 soap_in_ns1__DocumentLineType1(struct soap*, const char*, ns1__DocumentLineType1 *, const char*);
SOAP_FMAC1 ns1__DocumentLineType1 * SOAP_FMAC2 soap_instantiate_ns1__DocumentLineType1(struct soap*, int, const char*, const char*, size_t*);

inline ns1__DocumentLineType1 * soap_new_ns1__DocumentLineType1(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__DocumentLineType1(soap, n, NULL, NULL, NULL);
}

inline ns1__DocumentLineType1 * soap_new_req_ns1__DocumentLineType1(
	struct soap *soap,
	ns1__DocumentLineType1Choice *CdOrPrtry)
{
	ns1__DocumentLineType1 *_p = ::soap_new_ns1__DocumentLineType1(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DocumentLineType1::CdOrPrtry = CdOrPrtry;
	}
	return _p;
}

inline ns1__DocumentLineType1 * soap_new_set_ns1__DocumentLineType1(
	struct soap *soap,
	ns1__DocumentLineType1Choice *CdOrPrtry,
	std::string *Issr)
{
	ns1__DocumentLineType1 *_p = ::soap_new_ns1__DocumentLineType1(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DocumentLineType1::CdOrPrtry = CdOrPrtry;
		_p->ns1__DocumentLineType1::Issr = Issr;
	}
	return _p;
}

inline int soap_write_ns1__DocumentLineType1(struct soap *soap, ns1__DocumentLineType1 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DocumentLineType1", p->soap_type() == SOAP_TYPE_ns1__DocumentLineType1 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__DocumentLineType1(struct soap *soap, const char *URL, ns1__DocumentLineType1 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DocumentLineType1", p->soap_type() == SOAP_TYPE_ns1__DocumentLineType1 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__DocumentLineType1(struct soap *soap, const char *URL, ns1__DocumentLineType1 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DocumentLineType1", p->soap_type() == SOAP_TYPE_ns1__DocumentLineType1 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DocumentLineType1(struct soap *soap, const char *URL, ns1__DocumentLineType1 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DocumentLineType1", p->soap_type() == SOAP_TYPE_ns1__DocumentLineType1 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__DocumentLineType1 * SOAP_FMAC4 soap_get_ns1__DocumentLineType1(struct soap*, ns1__DocumentLineType1 *, const char*, const char*);

inline int soap_read_ns1__DocumentLineType1(struct soap *soap, ns1__DocumentLineType1 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__DocumentLineType1(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DocumentLineType1(struct soap *soap, const char *URL, ns1__DocumentLineType1 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__DocumentLineType1(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__DocumentLineType1(struct soap *soap, ns1__DocumentLineType1 *p)
{
	if (::soap_read_ns1__DocumentLineType1(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__DocumentLineInformation1_DEFINED
#define SOAP_TYPE_ns1__DocumentLineInformation1_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DocumentLineInformation1(struct soap*, const char*, int, const ns1__DocumentLineInformation1 *, const char*);
SOAP_FMAC3 ns1__DocumentLineInformation1 * SOAP_FMAC4 soap_in_ns1__DocumentLineInformation1(struct soap*, const char*, ns1__DocumentLineInformation1 *, const char*);
SOAP_FMAC1 ns1__DocumentLineInformation1 * SOAP_FMAC2 soap_instantiate_ns1__DocumentLineInformation1(struct soap*, int, const char*, const char*, size_t*);

inline ns1__DocumentLineInformation1 * soap_new_ns1__DocumentLineInformation1(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__DocumentLineInformation1(soap, n, NULL, NULL, NULL);
}

inline ns1__DocumentLineInformation1 * soap_new_req_ns1__DocumentLineInformation1(
	struct soap *soap,
	const std::vector<ns1__DocumentLineIdentification1 *> & Id)
{
	ns1__DocumentLineInformation1 *_p = ::soap_new_ns1__DocumentLineInformation1(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DocumentLineInformation1::Id = Id;
	}
	return _p;
}

inline ns1__DocumentLineInformation1 * soap_new_set_ns1__DocumentLineInformation1(
	struct soap *soap,
	const std::vector<ns1__DocumentLineIdentification1 *> & Id,
	std::string *Desc,
	ns1__RemittanceAmount3 *Amt)
{
	ns1__DocumentLineInformation1 *_p = ::soap_new_ns1__DocumentLineInformation1(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DocumentLineInformation1::Id = Id;
		_p->ns1__DocumentLineInformation1::Desc = Desc;
		_p->ns1__DocumentLineInformation1::Amt = Amt;
	}
	return _p;
}

inline int soap_write_ns1__DocumentLineInformation1(struct soap *soap, ns1__DocumentLineInformation1 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DocumentLineInformation1", p->soap_type() == SOAP_TYPE_ns1__DocumentLineInformation1 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__DocumentLineInformation1(struct soap *soap, const char *URL, ns1__DocumentLineInformation1 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DocumentLineInformation1", p->soap_type() == SOAP_TYPE_ns1__DocumentLineInformation1 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__DocumentLineInformation1(struct soap *soap, const char *URL, ns1__DocumentLineInformation1 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DocumentLineInformation1", p->soap_type() == SOAP_TYPE_ns1__DocumentLineInformation1 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DocumentLineInformation1(struct soap *soap, const char *URL, ns1__DocumentLineInformation1 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DocumentLineInformation1", p->soap_type() == SOAP_TYPE_ns1__DocumentLineInformation1 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__DocumentLineInformation1 * SOAP_FMAC4 soap_get_ns1__DocumentLineInformation1(struct soap*, ns1__DocumentLineInformation1 *, const char*, const char*);

inline int soap_read_ns1__DocumentLineInformation1(struct soap *soap, ns1__DocumentLineInformation1 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__DocumentLineInformation1(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DocumentLineInformation1(struct soap *soap, const char *URL, ns1__DocumentLineInformation1 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__DocumentLineInformation1(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__DocumentLineInformation1(struct soap *soap, ns1__DocumentLineInformation1 *p)
{
	if (::soap_read_ns1__DocumentLineInformation1(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__DocumentLineIdentification1_DEFINED
#define SOAP_TYPE_ns1__DocumentLineIdentification1_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DocumentLineIdentification1(struct soap*, const char*, int, const ns1__DocumentLineIdentification1 *, const char*);
SOAP_FMAC3 ns1__DocumentLineIdentification1 * SOAP_FMAC4 soap_in_ns1__DocumentLineIdentification1(struct soap*, const char*, ns1__DocumentLineIdentification1 *, const char*);
SOAP_FMAC1 ns1__DocumentLineIdentification1 * SOAP_FMAC2 soap_instantiate_ns1__DocumentLineIdentification1(struct soap*, int, const char*, const char*, size_t*);

inline ns1__DocumentLineIdentification1 * soap_new_ns1__DocumentLineIdentification1(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__DocumentLineIdentification1(soap, n, NULL, NULL, NULL);
}

inline ns1__DocumentLineIdentification1 * soap_new_req_ns1__DocumentLineIdentification1(
	struct soap *soap)
{
	ns1__DocumentLineIdentification1 *_p = ::soap_new_ns1__DocumentLineIdentification1(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__DocumentLineIdentification1 * soap_new_set_ns1__DocumentLineIdentification1(
	struct soap *soap,
	ns1__DocumentLineType1 *Tp,
	std::string *Nb,
	std::string *RltdDt)
{
	ns1__DocumentLineIdentification1 *_p = ::soap_new_ns1__DocumentLineIdentification1(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DocumentLineIdentification1::Tp = Tp;
		_p->ns1__DocumentLineIdentification1::Nb = Nb;
		_p->ns1__DocumentLineIdentification1::RltdDt = RltdDt;
	}
	return _p;
}

inline int soap_write_ns1__DocumentLineIdentification1(struct soap *soap, ns1__DocumentLineIdentification1 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DocumentLineIdentification1", p->soap_type() == SOAP_TYPE_ns1__DocumentLineIdentification1 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__DocumentLineIdentification1(struct soap *soap, const char *URL, ns1__DocumentLineIdentification1 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DocumentLineIdentification1", p->soap_type() == SOAP_TYPE_ns1__DocumentLineIdentification1 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__DocumentLineIdentification1(struct soap *soap, const char *URL, ns1__DocumentLineIdentification1 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DocumentLineIdentification1", p->soap_type() == SOAP_TYPE_ns1__DocumentLineIdentification1 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DocumentLineIdentification1(struct soap *soap, const char *URL, ns1__DocumentLineIdentification1 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DocumentLineIdentification1", p->soap_type() == SOAP_TYPE_ns1__DocumentLineIdentification1 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__DocumentLineIdentification1 * SOAP_FMAC4 soap_get_ns1__DocumentLineIdentification1(struct soap*, ns1__DocumentLineIdentification1 *, const char*, const char*);

inline int soap_read_ns1__DocumentLineIdentification1(struct soap *soap, ns1__DocumentLineIdentification1 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__DocumentLineIdentification1(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DocumentLineIdentification1(struct soap *soap, const char *URL, ns1__DocumentLineIdentification1 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__DocumentLineIdentification1(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__DocumentLineIdentification1(struct soap *soap, ns1__DocumentLineIdentification1 *p)
{
	if (::soap_read_ns1__DocumentLineIdentification1(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__DocumentAdjustment1_DEFINED
#define SOAP_TYPE_ns1__DocumentAdjustment1_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DocumentAdjustment1(struct soap*, const char*, int, const ns1__DocumentAdjustment1 *, const char*);
SOAP_FMAC3 ns1__DocumentAdjustment1 * SOAP_FMAC4 soap_in_ns1__DocumentAdjustment1(struct soap*, const char*, ns1__DocumentAdjustment1 *, const char*);
SOAP_FMAC1 ns1__DocumentAdjustment1 * SOAP_FMAC2 soap_instantiate_ns1__DocumentAdjustment1(struct soap*, int, const char*, const char*, size_t*);

inline ns1__DocumentAdjustment1 * soap_new_ns1__DocumentAdjustment1(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__DocumentAdjustment1(soap, n, NULL, NULL, NULL);
}

inline ns1__DocumentAdjustment1 * soap_new_req_ns1__DocumentAdjustment1(
	struct soap *soap,
	ns1__ActiveOrHistoricCurrencyAndAmount *Amt)
{
	ns1__DocumentAdjustment1 *_p = ::soap_new_ns1__DocumentAdjustment1(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DocumentAdjustment1::Amt = Amt;
	}
	return _p;
}

inline ns1__DocumentAdjustment1 * soap_new_set_ns1__DocumentAdjustment1(
	struct soap *soap,
	ns1__ActiveOrHistoricCurrencyAndAmount *Amt,
	enum ns1__CreditDebitCode *CdtDbtInd,
	std::string *Rsn,
	std::string *AddtlInf)
{
	ns1__DocumentAdjustment1 *_p = ::soap_new_ns1__DocumentAdjustment1(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DocumentAdjustment1::Amt = Amt;
		_p->ns1__DocumentAdjustment1::CdtDbtInd = CdtDbtInd;
		_p->ns1__DocumentAdjustment1::Rsn = Rsn;
		_p->ns1__DocumentAdjustment1::AddtlInf = AddtlInf;
	}
	return _p;
}

inline int soap_write_ns1__DocumentAdjustment1(struct soap *soap, ns1__DocumentAdjustment1 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DocumentAdjustment1", p->soap_type() == SOAP_TYPE_ns1__DocumentAdjustment1 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__DocumentAdjustment1(struct soap *soap, const char *URL, ns1__DocumentAdjustment1 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DocumentAdjustment1", p->soap_type() == SOAP_TYPE_ns1__DocumentAdjustment1 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__DocumentAdjustment1(struct soap *soap, const char *URL, ns1__DocumentAdjustment1 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DocumentAdjustment1", p->soap_type() == SOAP_TYPE_ns1__DocumentAdjustment1 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DocumentAdjustment1(struct soap *soap, const char *URL, ns1__DocumentAdjustment1 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DocumentAdjustment1", p->soap_type() == SOAP_TYPE_ns1__DocumentAdjustment1 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__DocumentAdjustment1 * SOAP_FMAC4 soap_get_ns1__DocumentAdjustment1(struct soap*, ns1__DocumentAdjustment1 *, const char*, const char*);

inline int soap_read_ns1__DocumentAdjustment1(struct soap *soap, ns1__DocumentAdjustment1 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__DocumentAdjustment1(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DocumentAdjustment1(struct soap *soap, const char *URL, ns1__DocumentAdjustment1 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__DocumentAdjustment1(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__DocumentAdjustment1(struct soap *soap, ns1__DocumentAdjustment1 *p)
{
	if (::soap_read_ns1__DocumentAdjustment1(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__Document_DEFINED
#define SOAP_TYPE_ns1__Document_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Document(struct soap*, const char*, int, const ns1__Document *, const char*);
SOAP_FMAC3 ns1__Document * SOAP_FMAC4 soap_in_ns1__Document(struct soap*, const char*, ns1__Document *, const char*);
SOAP_FMAC1 ns1__Document * SOAP_FMAC2 soap_instantiate_ns1__Document(struct soap*, int, const char*, const char*, size_t*);

inline ns1__Document * soap_new_ns1__Document(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__Document(soap, n, NULL, NULL, NULL);
}

inline ns1__Document * soap_new_req_ns1__Document(
	struct soap *soap,
	ns1__CustomerCreditTransferInitiationV11 *CstmrCdtTrfInitn)
{
	ns1__Document *_p = ::soap_new_ns1__Document(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__Document::CstmrCdtTrfInitn = CstmrCdtTrfInitn;
	}
	return _p;
}

inline ns1__Document * soap_new_set_ns1__Document(
	struct soap *soap,
	ns1__CustomerCreditTransferInitiationV11 *CstmrCdtTrfInitn)
{
	ns1__Document *_p = ::soap_new_ns1__Document(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__Document::CstmrCdtTrfInitn = CstmrCdtTrfInitn;
	}
	return _p;
}

inline int soap_write_ns1__Document(struct soap *soap, ns1__Document const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Document", p->soap_type() == SOAP_TYPE_ns1__Document ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__Document(struct soap *soap, const char *URL, ns1__Document const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Document", p->soap_type() == SOAP_TYPE_ns1__Document ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__Document(struct soap *soap, const char *URL, ns1__Document const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Document", p->soap_type() == SOAP_TYPE_ns1__Document ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__Document(struct soap *soap, const char *URL, ns1__Document const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Document", p->soap_type() == SOAP_TYPE_ns1__Document ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__Document * SOAP_FMAC4 soap_get_ns1__Document(struct soap*, ns1__Document *, const char*, const char*);

inline int soap_read_ns1__Document(struct soap *soap, ns1__Document *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__Document(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__Document(struct soap *soap, const char *URL, ns1__Document *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__Document(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__Document(struct soap *soap, ns1__Document *p)
{
	if (::soap_read_ns1__Document(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__DiscountAmountType1Choice_DEFINED
#define SOAP_TYPE_ns1__DiscountAmountType1Choice_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DiscountAmountType1Choice(struct soap*, const char*, int, const ns1__DiscountAmountType1Choice *, const char*);
SOAP_FMAC3 ns1__DiscountAmountType1Choice * SOAP_FMAC4 soap_in_ns1__DiscountAmountType1Choice(struct soap*, const char*, ns1__DiscountAmountType1Choice *, const char*);
SOAP_FMAC1 ns1__DiscountAmountType1Choice * SOAP_FMAC2 soap_instantiate_ns1__DiscountAmountType1Choice(struct soap*, int, const char*, const char*, size_t*);

inline ns1__DiscountAmountType1Choice * soap_new_ns1__DiscountAmountType1Choice(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__DiscountAmountType1Choice(soap, n, NULL, NULL, NULL);
}

inline ns1__DiscountAmountType1Choice * soap_new_req_ns1__DiscountAmountType1Choice(
	struct soap *soap,
	const union _ns1__union_DiscountAmountType1Choice& union_DiscountAmountType1Choice)
{
	ns1__DiscountAmountType1Choice *_p = ::soap_new_ns1__DiscountAmountType1Choice(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DiscountAmountType1Choice::union_DiscountAmountType1Choice = union_DiscountAmountType1Choice;
	}
	return _p;
}

inline ns1__DiscountAmountType1Choice * soap_new_set_ns1__DiscountAmountType1Choice(
	struct soap *soap,
	int __union_DiscountAmountType1Choice,
	const union _ns1__union_DiscountAmountType1Choice& union_DiscountAmountType1Choice)
{
	ns1__DiscountAmountType1Choice *_p = ::soap_new_ns1__DiscountAmountType1Choice(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DiscountAmountType1Choice::__union_DiscountAmountType1Choice = __union_DiscountAmountType1Choice;
		_p->ns1__DiscountAmountType1Choice::union_DiscountAmountType1Choice = union_DiscountAmountType1Choice;
	}
	return _p;
}

inline int soap_write_ns1__DiscountAmountType1Choice(struct soap *soap, ns1__DiscountAmountType1Choice const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DiscountAmountType1Choice", p->soap_type() == SOAP_TYPE_ns1__DiscountAmountType1Choice ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__DiscountAmountType1Choice(struct soap *soap, const char *URL, ns1__DiscountAmountType1Choice const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DiscountAmountType1Choice", p->soap_type() == SOAP_TYPE_ns1__DiscountAmountType1Choice ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__DiscountAmountType1Choice(struct soap *soap, const char *URL, ns1__DiscountAmountType1Choice const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DiscountAmountType1Choice", p->soap_type() == SOAP_TYPE_ns1__DiscountAmountType1Choice ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DiscountAmountType1Choice(struct soap *soap, const char *URL, ns1__DiscountAmountType1Choice const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DiscountAmountType1Choice", p->soap_type() == SOAP_TYPE_ns1__DiscountAmountType1Choice ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__DiscountAmountType1Choice * SOAP_FMAC4 soap_get_ns1__DiscountAmountType1Choice(struct soap*, ns1__DiscountAmountType1Choice *, const char*, const char*);

inline int soap_read_ns1__DiscountAmountType1Choice(struct soap *soap, ns1__DiscountAmountType1Choice *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__DiscountAmountType1Choice(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DiscountAmountType1Choice(struct soap *soap, const char *URL, ns1__DiscountAmountType1Choice *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__DiscountAmountType1Choice(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__DiscountAmountType1Choice(struct soap *soap, ns1__DiscountAmountType1Choice *p)
{
	if (::soap_read_ns1__DiscountAmountType1Choice(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__DiscountAmountAndType1_DEFINED
#define SOAP_TYPE_ns1__DiscountAmountAndType1_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DiscountAmountAndType1(struct soap*, const char*, int, const ns1__DiscountAmountAndType1 *, const char*);
SOAP_FMAC3 ns1__DiscountAmountAndType1 * SOAP_FMAC4 soap_in_ns1__DiscountAmountAndType1(struct soap*, const char*, ns1__DiscountAmountAndType1 *, const char*);
SOAP_FMAC1 ns1__DiscountAmountAndType1 * SOAP_FMAC2 soap_instantiate_ns1__DiscountAmountAndType1(struct soap*, int, const char*, const char*, size_t*);

inline ns1__DiscountAmountAndType1 * soap_new_ns1__DiscountAmountAndType1(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__DiscountAmountAndType1(soap, n, NULL, NULL, NULL);
}

inline ns1__DiscountAmountAndType1 * soap_new_req_ns1__DiscountAmountAndType1(
	struct soap *soap,
	ns1__ActiveOrHistoricCurrencyAndAmount *Amt)
{
	ns1__DiscountAmountAndType1 *_p = ::soap_new_ns1__DiscountAmountAndType1(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DiscountAmountAndType1::Amt = Amt;
	}
	return _p;
}

inline ns1__DiscountAmountAndType1 * soap_new_set_ns1__DiscountAmountAndType1(
	struct soap *soap,
	ns1__DiscountAmountType1Choice *Tp,
	ns1__ActiveOrHistoricCurrencyAndAmount *Amt)
{
	ns1__DiscountAmountAndType1 *_p = ::soap_new_ns1__DiscountAmountAndType1(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DiscountAmountAndType1::Tp = Tp;
		_p->ns1__DiscountAmountAndType1::Amt = Amt;
	}
	return _p;
}

inline int soap_write_ns1__DiscountAmountAndType1(struct soap *soap, ns1__DiscountAmountAndType1 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DiscountAmountAndType1", p->soap_type() == SOAP_TYPE_ns1__DiscountAmountAndType1 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__DiscountAmountAndType1(struct soap *soap, const char *URL, ns1__DiscountAmountAndType1 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DiscountAmountAndType1", p->soap_type() == SOAP_TYPE_ns1__DiscountAmountAndType1 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__DiscountAmountAndType1(struct soap *soap, const char *URL, ns1__DiscountAmountAndType1 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DiscountAmountAndType1", p->soap_type() == SOAP_TYPE_ns1__DiscountAmountAndType1 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DiscountAmountAndType1(struct soap *soap, const char *URL, ns1__DiscountAmountAndType1 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DiscountAmountAndType1", p->soap_type() == SOAP_TYPE_ns1__DiscountAmountAndType1 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__DiscountAmountAndType1 * SOAP_FMAC4 soap_get_ns1__DiscountAmountAndType1(struct soap*, ns1__DiscountAmountAndType1 *, const char*, const char*);

inline int soap_read_ns1__DiscountAmountAndType1(struct soap *soap, ns1__DiscountAmountAndType1 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__DiscountAmountAndType1(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DiscountAmountAndType1(struct soap *soap, const char *URL, ns1__DiscountAmountAndType1 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__DiscountAmountAndType1(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__DiscountAmountAndType1(struct soap *soap, ns1__DiscountAmountAndType1 *p)
{
	if (::soap_read_ns1__DiscountAmountAndType1(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__DatePeriod2_DEFINED
#define SOAP_TYPE_ns1__DatePeriod2_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DatePeriod2(struct soap*, const char*, int, const ns1__DatePeriod2 *, const char*);
SOAP_FMAC3 ns1__DatePeriod2 * SOAP_FMAC4 soap_in_ns1__DatePeriod2(struct soap*, const char*, ns1__DatePeriod2 *, const char*);
SOAP_FMAC1 ns1__DatePeriod2 * SOAP_FMAC2 soap_instantiate_ns1__DatePeriod2(struct soap*, int, const char*, const char*, size_t*);

inline ns1__DatePeriod2 * soap_new_ns1__DatePeriod2(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__DatePeriod2(soap, n, NULL, NULL, NULL);
}

inline ns1__DatePeriod2 * soap_new_req_ns1__DatePeriod2(
	struct soap *soap,
	const std::string& FrDt,
	const std::string& ToDt)
{
	ns1__DatePeriod2 *_p = ::soap_new_ns1__DatePeriod2(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DatePeriod2::FrDt = FrDt;
		_p->ns1__DatePeriod2::ToDt = ToDt;
	}
	return _p;
}

inline ns1__DatePeriod2 * soap_new_set_ns1__DatePeriod2(
	struct soap *soap,
	const std::string& FrDt,
	const std::string& ToDt)
{
	ns1__DatePeriod2 *_p = ::soap_new_ns1__DatePeriod2(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DatePeriod2::FrDt = FrDt;
		_p->ns1__DatePeriod2::ToDt = ToDt;
	}
	return _p;
}

inline int soap_write_ns1__DatePeriod2(struct soap *soap, ns1__DatePeriod2 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DatePeriod2", p->soap_type() == SOAP_TYPE_ns1__DatePeriod2 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__DatePeriod2(struct soap *soap, const char *URL, ns1__DatePeriod2 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DatePeriod2", p->soap_type() == SOAP_TYPE_ns1__DatePeriod2 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__DatePeriod2(struct soap *soap, const char *URL, ns1__DatePeriod2 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DatePeriod2", p->soap_type() == SOAP_TYPE_ns1__DatePeriod2 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DatePeriod2(struct soap *soap, const char *URL, ns1__DatePeriod2 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DatePeriod2", p->soap_type() == SOAP_TYPE_ns1__DatePeriod2 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__DatePeriod2 * SOAP_FMAC4 soap_get_ns1__DatePeriod2(struct soap*, ns1__DatePeriod2 *, const char*, const char*);

inline int soap_read_ns1__DatePeriod2(struct soap *soap, ns1__DatePeriod2 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__DatePeriod2(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DatePeriod2(struct soap *soap, const char *URL, ns1__DatePeriod2 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__DatePeriod2(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__DatePeriod2(struct soap *soap, ns1__DatePeriod2 *p)
{
	if (::soap_read_ns1__DatePeriod2(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__DateAndPlaceOfBirth1_DEFINED
#define SOAP_TYPE_ns1__DateAndPlaceOfBirth1_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DateAndPlaceOfBirth1(struct soap*, const char*, int, const ns1__DateAndPlaceOfBirth1 *, const char*);
SOAP_FMAC3 ns1__DateAndPlaceOfBirth1 * SOAP_FMAC4 soap_in_ns1__DateAndPlaceOfBirth1(struct soap*, const char*, ns1__DateAndPlaceOfBirth1 *, const char*);
SOAP_FMAC1 ns1__DateAndPlaceOfBirth1 * SOAP_FMAC2 soap_instantiate_ns1__DateAndPlaceOfBirth1(struct soap*, int, const char*, const char*, size_t*);

inline ns1__DateAndPlaceOfBirth1 * soap_new_ns1__DateAndPlaceOfBirth1(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__DateAndPlaceOfBirth1(soap, n, NULL, NULL, NULL);
}

inline ns1__DateAndPlaceOfBirth1 * soap_new_req_ns1__DateAndPlaceOfBirth1(
	struct soap *soap,
	const std::string& BirthDt,
	const std::string& CityOfBirth,
	const std::string& CtryOfBirth)
{
	ns1__DateAndPlaceOfBirth1 *_p = ::soap_new_ns1__DateAndPlaceOfBirth1(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DateAndPlaceOfBirth1::BirthDt = BirthDt;
		_p->ns1__DateAndPlaceOfBirth1::CityOfBirth = CityOfBirth;
		_p->ns1__DateAndPlaceOfBirth1::CtryOfBirth = CtryOfBirth;
	}
	return _p;
}

inline ns1__DateAndPlaceOfBirth1 * soap_new_set_ns1__DateAndPlaceOfBirth1(
	struct soap *soap,
	const std::string& BirthDt,
	std::string *PrvcOfBirth,
	const std::string& CityOfBirth,
	const std::string& CtryOfBirth)
{
	ns1__DateAndPlaceOfBirth1 *_p = ::soap_new_ns1__DateAndPlaceOfBirth1(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DateAndPlaceOfBirth1::BirthDt = BirthDt;
		_p->ns1__DateAndPlaceOfBirth1::PrvcOfBirth = PrvcOfBirth;
		_p->ns1__DateAndPlaceOfBirth1::CityOfBirth = CityOfBirth;
		_p->ns1__DateAndPlaceOfBirth1::CtryOfBirth = CtryOfBirth;
	}
	return _p;
}

inline int soap_write_ns1__DateAndPlaceOfBirth1(struct soap *soap, ns1__DateAndPlaceOfBirth1 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DateAndPlaceOfBirth1", p->soap_type() == SOAP_TYPE_ns1__DateAndPlaceOfBirth1 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__DateAndPlaceOfBirth1(struct soap *soap, const char *URL, ns1__DateAndPlaceOfBirth1 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DateAndPlaceOfBirth1", p->soap_type() == SOAP_TYPE_ns1__DateAndPlaceOfBirth1 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__DateAndPlaceOfBirth1(struct soap *soap, const char *URL, ns1__DateAndPlaceOfBirth1 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DateAndPlaceOfBirth1", p->soap_type() == SOAP_TYPE_ns1__DateAndPlaceOfBirth1 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DateAndPlaceOfBirth1(struct soap *soap, const char *URL, ns1__DateAndPlaceOfBirth1 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DateAndPlaceOfBirth1", p->soap_type() == SOAP_TYPE_ns1__DateAndPlaceOfBirth1 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__DateAndPlaceOfBirth1 * SOAP_FMAC4 soap_get_ns1__DateAndPlaceOfBirth1(struct soap*, ns1__DateAndPlaceOfBirth1 *, const char*, const char*);

inline int soap_read_ns1__DateAndPlaceOfBirth1(struct soap *soap, ns1__DateAndPlaceOfBirth1 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__DateAndPlaceOfBirth1(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DateAndPlaceOfBirth1(struct soap *soap, const char *URL, ns1__DateAndPlaceOfBirth1 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__DateAndPlaceOfBirth1(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__DateAndPlaceOfBirth1(struct soap *soap, ns1__DateAndPlaceOfBirth1 *p)
{
	if (::soap_read_ns1__DateAndPlaceOfBirth1(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__DateAndDateTime2Choice_DEFINED
#define SOAP_TYPE_ns1__DateAndDateTime2Choice_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DateAndDateTime2Choice(struct soap*, const char*, int, const ns1__DateAndDateTime2Choice *, const char*);
SOAP_FMAC3 ns1__DateAndDateTime2Choice * SOAP_FMAC4 soap_in_ns1__DateAndDateTime2Choice(struct soap*, const char*, ns1__DateAndDateTime2Choice *, const char*);
SOAP_FMAC1 ns1__DateAndDateTime2Choice * SOAP_FMAC2 soap_instantiate_ns1__DateAndDateTime2Choice(struct soap*, int, const char*, const char*, size_t*);

inline ns1__DateAndDateTime2Choice * soap_new_ns1__DateAndDateTime2Choice(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__DateAndDateTime2Choice(soap, n, NULL, NULL, NULL);
}

inline ns1__DateAndDateTime2Choice * soap_new_req_ns1__DateAndDateTime2Choice(
	struct soap *soap,
	const union _ns1__union_DateAndDateTime2Choice& union_DateAndDateTime2Choice)
{
	ns1__DateAndDateTime2Choice *_p = ::soap_new_ns1__DateAndDateTime2Choice(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DateAndDateTime2Choice::union_DateAndDateTime2Choice = union_DateAndDateTime2Choice;
	}
	return _p;
}

inline ns1__DateAndDateTime2Choice * soap_new_set_ns1__DateAndDateTime2Choice(
	struct soap *soap,
	int __union_DateAndDateTime2Choice,
	const union _ns1__union_DateAndDateTime2Choice& union_DateAndDateTime2Choice)
{
	ns1__DateAndDateTime2Choice *_p = ::soap_new_ns1__DateAndDateTime2Choice(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DateAndDateTime2Choice::__union_DateAndDateTime2Choice = __union_DateAndDateTime2Choice;
		_p->ns1__DateAndDateTime2Choice::union_DateAndDateTime2Choice = union_DateAndDateTime2Choice;
	}
	return _p;
}

inline int soap_write_ns1__DateAndDateTime2Choice(struct soap *soap, ns1__DateAndDateTime2Choice const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DateAndDateTime2Choice", p->soap_type() == SOAP_TYPE_ns1__DateAndDateTime2Choice ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__DateAndDateTime2Choice(struct soap *soap, const char *URL, ns1__DateAndDateTime2Choice const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DateAndDateTime2Choice", p->soap_type() == SOAP_TYPE_ns1__DateAndDateTime2Choice ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__DateAndDateTime2Choice(struct soap *soap, const char *URL, ns1__DateAndDateTime2Choice const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DateAndDateTime2Choice", p->soap_type() == SOAP_TYPE_ns1__DateAndDateTime2Choice ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DateAndDateTime2Choice(struct soap *soap, const char *URL, ns1__DateAndDateTime2Choice const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DateAndDateTime2Choice", p->soap_type() == SOAP_TYPE_ns1__DateAndDateTime2Choice ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__DateAndDateTime2Choice * SOAP_FMAC4 soap_get_ns1__DateAndDateTime2Choice(struct soap*, ns1__DateAndDateTime2Choice *, const char*, const char*);

inline int soap_read_ns1__DateAndDateTime2Choice(struct soap *soap, ns1__DateAndDateTime2Choice *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__DateAndDateTime2Choice(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DateAndDateTime2Choice(struct soap *soap, const char *URL, ns1__DateAndDateTime2Choice *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__DateAndDateTime2Choice(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__DateAndDateTime2Choice(struct soap *soap, ns1__DateAndDateTime2Choice *p)
{
	if (::soap_read_ns1__DateAndDateTime2Choice(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__CustomerCreditTransferInitiationV11_DEFINED
#define SOAP_TYPE_ns1__CustomerCreditTransferInitiationV11_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CustomerCreditTransferInitiationV11(struct soap*, const char*, int, const ns1__CustomerCreditTransferInitiationV11 *, const char*);
SOAP_FMAC3 ns1__CustomerCreditTransferInitiationV11 * SOAP_FMAC4 soap_in_ns1__CustomerCreditTransferInitiationV11(struct soap*, const char*, ns1__CustomerCreditTransferInitiationV11 *, const char*);
SOAP_FMAC1 ns1__CustomerCreditTransferInitiationV11 * SOAP_FMAC2 soap_instantiate_ns1__CustomerCreditTransferInitiationV11(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CustomerCreditTransferInitiationV11 * soap_new_ns1__CustomerCreditTransferInitiationV11(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__CustomerCreditTransferInitiationV11(soap, n, NULL, NULL, NULL);
}

inline ns1__CustomerCreditTransferInitiationV11 * soap_new_req_ns1__CustomerCreditTransferInitiationV11(
	struct soap *soap,
	ns1__GroupHeader95 *GrpHdr,
	const std::vector<ns1__PaymentInstruction40 *> & PmtInf)
{
	ns1__CustomerCreditTransferInitiationV11 *_p = ::soap_new_ns1__CustomerCreditTransferInitiationV11(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CustomerCreditTransferInitiationV11::GrpHdr = GrpHdr;
		_p->ns1__CustomerCreditTransferInitiationV11::PmtInf = PmtInf;
	}
	return _p;
}

inline ns1__CustomerCreditTransferInitiationV11 * soap_new_set_ns1__CustomerCreditTransferInitiationV11(
	struct soap *soap,
	ns1__GroupHeader95 *GrpHdr,
	const std::vector<ns1__PaymentInstruction40 *> & PmtInf,
	const std::vector<ns1__SupplementaryData1 *> & SplmtryData)
{
	ns1__CustomerCreditTransferInitiationV11 *_p = ::soap_new_ns1__CustomerCreditTransferInitiationV11(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CustomerCreditTransferInitiationV11::GrpHdr = GrpHdr;
		_p->ns1__CustomerCreditTransferInitiationV11::PmtInf = PmtInf;
		_p->ns1__CustomerCreditTransferInitiationV11::SplmtryData = SplmtryData;
	}
	return _p;
}

inline int soap_write_ns1__CustomerCreditTransferInitiationV11(struct soap *soap, ns1__CustomerCreditTransferInitiationV11 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CustomerCreditTransferInitiationV11", p->soap_type() == SOAP_TYPE_ns1__CustomerCreditTransferInitiationV11 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__CustomerCreditTransferInitiationV11(struct soap *soap, const char *URL, ns1__CustomerCreditTransferInitiationV11 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CustomerCreditTransferInitiationV11", p->soap_type() == SOAP_TYPE_ns1__CustomerCreditTransferInitiationV11 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__CustomerCreditTransferInitiationV11(struct soap *soap, const char *URL, ns1__CustomerCreditTransferInitiationV11 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CustomerCreditTransferInitiationV11", p->soap_type() == SOAP_TYPE_ns1__CustomerCreditTransferInitiationV11 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__CustomerCreditTransferInitiationV11(struct soap *soap, const char *URL, ns1__CustomerCreditTransferInitiationV11 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CustomerCreditTransferInitiationV11", p->soap_type() == SOAP_TYPE_ns1__CustomerCreditTransferInitiationV11 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__CustomerCreditTransferInitiationV11 * SOAP_FMAC4 soap_get_ns1__CustomerCreditTransferInitiationV11(struct soap*, ns1__CustomerCreditTransferInitiationV11 *, const char*, const char*);

inline int soap_read_ns1__CustomerCreditTransferInitiationV11(struct soap *soap, ns1__CustomerCreditTransferInitiationV11 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__CustomerCreditTransferInitiationV11(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__CustomerCreditTransferInitiationV11(struct soap *soap, const char *URL, ns1__CustomerCreditTransferInitiationV11 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__CustomerCreditTransferInitiationV11(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__CustomerCreditTransferInitiationV11(struct soap *soap, ns1__CustomerCreditTransferInitiationV11 *p)
{
	if (::soap_read_ns1__CustomerCreditTransferInitiationV11(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__CreditorReferenceType2_DEFINED
#define SOAP_TYPE_ns1__CreditorReferenceType2_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CreditorReferenceType2(struct soap*, const char*, int, const ns1__CreditorReferenceType2 *, const char*);
SOAP_FMAC3 ns1__CreditorReferenceType2 * SOAP_FMAC4 soap_in_ns1__CreditorReferenceType2(struct soap*, const char*, ns1__CreditorReferenceType2 *, const char*);
SOAP_FMAC1 ns1__CreditorReferenceType2 * SOAP_FMAC2 soap_instantiate_ns1__CreditorReferenceType2(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CreditorReferenceType2 * soap_new_ns1__CreditorReferenceType2(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__CreditorReferenceType2(soap, n, NULL, NULL, NULL);
}

inline ns1__CreditorReferenceType2 * soap_new_req_ns1__CreditorReferenceType2(
	struct soap *soap,
	ns1__CreditorReferenceType1Choice *CdOrPrtry)
{
	ns1__CreditorReferenceType2 *_p = ::soap_new_ns1__CreditorReferenceType2(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CreditorReferenceType2::CdOrPrtry = CdOrPrtry;
	}
	return _p;
}

inline ns1__CreditorReferenceType2 * soap_new_set_ns1__CreditorReferenceType2(
	struct soap *soap,
	ns1__CreditorReferenceType1Choice *CdOrPrtry,
	std::string *Issr)
{
	ns1__CreditorReferenceType2 *_p = ::soap_new_ns1__CreditorReferenceType2(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CreditorReferenceType2::CdOrPrtry = CdOrPrtry;
		_p->ns1__CreditorReferenceType2::Issr = Issr;
	}
	return _p;
}

inline int soap_write_ns1__CreditorReferenceType2(struct soap *soap, ns1__CreditorReferenceType2 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CreditorReferenceType2", p->soap_type() == SOAP_TYPE_ns1__CreditorReferenceType2 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__CreditorReferenceType2(struct soap *soap, const char *URL, ns1__CreditorReferenceType2 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CreditorReferenceType2", p->soap_type() == SOAP_TYPE_ns1__CreditorReferenceType2 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__CreditorReferenceType2(struct soap *soap, const char *URL, ns1__CreditorReferenceType2 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CreditorReferenceType2", p->soap_type() == SOAP_TYPE_ns1__CreditorReferenceType2 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__CreditorReferenceType2(struct soap *soap, const char *URL, ns1__CreditorReferenceType2 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CreditorReferenceType2", p->soap_type() == SOAP_TYPE_ns1__CreditorReferenceType2 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__CreditorReferenceType2 * SOAP_FMAC4 soap_get_ns1__CreditorReferenceType2(struct soap*, ns1__CreditorReferenceType2 *, const char*, const char*);

inline int soap_read_ns1__CreditorReferenceType2(struct soap *soap, ns1__CreditorReferenceType2 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__CreditorReferenceType2(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__CreditorReferenceType2(struct soap *soap, const char *URL, ns1__CreditorReferenceType2 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__CreditorReferenceType2(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__CreditorReferenceType2(struct soap *soap, ns1__CreditorReferenceType2 *p)
{
	if (::soap_read_ns1__CreditorReferenceType2(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__CreditorReferenceType1Choice_DEFINED
#define SOAP_TYPE_ns1__CreditorReferenceType1Choice_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CreditorReferenceType1Choice(struct soap*, const char*, int, const ns1__CreditorReferenceType1Choice *, const char*);
SOAP_FMAC3 ns1__CreditorReferenceType1Choice * SOAP_FMAC4 soap_in_ns1__CreditorReferenceType1Choice(struct soap*, const char*, ns1__CreditorReferenceType1Choice *, const char*);
SOAP_FMAC1 ns1__CreditorReferenceType1Choice * SOAP_FMAC2 soap_instantiate_ns1__CreditorReferenceType1Choice(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CreditorReferenceType1Choice * soap_new_ns1__CreditorReferenceType1Choice(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__CreditorReferenceType1Choice(soap, n, NULL, NULL, NULL);
}

inline ns1__CreditorReferenceType1Choice * soap_new_req_ns1__CreditorReferenceType1Choice(
	struct soap *soap,
	const union _ns1__union_CreditorReferenceType1Choice& union_CreditorReferenceType1Choice)
{
	ns1__CreditorReferenceType1Choice *_p = ::soap_new_ns1__CreditorReferenceType1Choice(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CreditorReferenceType1Choice::union_CreditorReferenceType1Choice = union_CreditorReferenceType1Choice;
	}
	return _p;
}

inline ns1__CreditorReferenceType1Choice * soap_new_set_ns1__CreditorReferenceType1Choice(
	struct soap *soap,
	int __union_CreditorReferenceType1Choice,
	const union _ns1__union_CreditorReferenceType1Choice& union_CreditorReferenceType1Choice)
{
	ns1__CreditorReferenceType1Choice *_p = ::soap_new_ns1__CreditorReferenceType1Choice(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CreditorReferenceType1Choice::__union_CreditorReferenceType1Choice = __union_CreditorReferenceType1Choice;
		_p->ns1__CreditorReferenceType1Choice::union_CreditorReferenceType1Choice = union_CreditorReferenceType1Choice;
	}
	return _p;
}

inline int soap_write_ns1__CreditorReferenceType1Choice(struct soap *soap, ns1__CreditorReferenceType1Choice const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CreditorReferenceType1Choice", p->soap_type() == SOAP_TYPE_ns1__CreditorReferenceType1Choice ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__CreditorReferenceType1Choice(struct soap *soap, const char *URL, ns1__CreditorReferenceType1Choice const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CreditorReferenceType1Choice", p->soap_type() == SOAP_TYPE_ns1__CreditorReferenceType1Choice ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__CreditorReferenceType1Choice(struct soap *soap, const char *URL, ns1__CreditorReferenceType1Choice const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CreditorReferenceType1Choice", p->soap_type() == SOAP_TYPE_ns1__CreditorReferenceType1Choice ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__CreditorReferenceType1Choice(struct soap *soap, const char *URL, ns1__CreditorReferenceType1Choice const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CreditorReferenceType1Choice", p->soap_type() == SOAP_TYPE_ns1__CreditorReferenceType1Choice ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__CreditorReferenceType1Choice * SOAP_FMAC4 soap_get_ns1__CreditorReferenceType1Choice(struct soap*, ns1__CreditorReferenceType1Choice *, const char*, const char*);

inline int soap_read_ns1__CreditorReferenceType1Choice(struct soap *soap, ns1__CreditorReferenceType1Choice *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__CreditorReferenceType1Choice(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__CreditorReferenceType1Choice(struct soap *soap, const char *URL, ns1__CreditorReferenceType1Choice *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__CreditorReferenceType1Choice(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__CreditorReferenceType1Choice(struct soap *soap, ns1__CreditorReferenceType1Choice *p)
{
	if (::soap_read_ns1__CreditorReferenceType1Choice(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__CreditorReferenceInformation2_DEFINED
#define SOAP_TYPE_ns1__CreditorReferenceInformation2_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CreditorReferenceInformation2(struct soap*, const char*, int, const ns1__CreditorReferenceInformation2 *, const char*);
SOAP_FMAC3 ns1__CreditorReferenceInformation2 * SOAP_FMAC4 soap_in_ns1__CreditorReferenceInformation2(struct soap*, const char*, ns1__CreditorReferenceInformation2 *, const char*);
SOAP_FMAC1 ns1__CreditorReferenceInformation2 * SOAP_FMAC2 soap_instantiate_ns1__CreditorReferenceInformation2(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CreditorReferenceInformation2 * soap_new_ns1__CreditorReferenceInformation2(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__CreditorReferenceInformation2(soap, n, NULL, NULL, NULL);
}

inline ns1__CreditorReferenceInformation2 * soap_new_req_ns1__CreditorReferenceInformation2(
	struct soap *soap)
{
	ns1__CreditorReferenceInformation2 *_p = ::soap_new_ns1__CreditorReferenceInformation2(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__CreditorReferenceInformation2 * soap_new_set_ns1__CreditorReferenceInformation2(
	struct soap *soap,
	ns1__CreditorReferenceType2 *Tp,
	std::string *Ref)
{
	ns1__CreditorReferenceInformation2 *_p = ::soap_new_ns1__CreditorReferenceInformation2(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CreditorReferenceInformation2::Tp = Tp;
		_p->ns1__CreditorReferenceInformation2::Ref = Ref;
	}
	return _p;
}

inline int soap_write_ns1__CreditorReferenceInformation2(struct soap *soap, ns1__CreditorReferenceInformation2 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CreditorReferenceInformation2", p->soap_type() == SOAP_TYPE_ns1__CreditorReferenceInformation2 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__CreditorReferenceInformation2(struct soap *soap, const char *URL, ns1__CreditorReferenceInformation2 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CreditorReferenceInformation2", p->soap_type() == SOAP_TYPE_ns1__CreditorReferenceInformation2 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__CreditorReferenceInformation2(struct soap *soap, const char *URL, ns1__CreditorReferenceInformation2 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CreditorReferenceInformation2", p->soap_type() == SOAP_TYPE_ns1__CreditorReferenceInformation2 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__CreditorReferenceInformation2(struct soap *soap, const char *URL, ns1__CreditorReferenceInformation2 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CreditorReferenceInformation2", p->soap_type() == SOAP_TYPE_ns1__CreditorReferenceInformation2 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__CreditorReferenceInformation2 * SOAP_FMAC4 soap_get_ns1__CreditorReferenceInformation2(struct soap*, ns1__CreditorReferenceInformation2 *, const char*, const char*);

inline int soap_read_ns1__CreditorReferenceInformation2(struct soap *soap, ns1__CreditorReferenceInformation2 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__CreditorReferenceInformation2(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__CreditorReferenceInformation2(struct soap *soap, const char *URL, ns1__CreditorReferenceInformation2 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__CreditorReferenceInformation2(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__CreditorReferenceInformation2(struct soap *soap, ns1__CreditorReferenceInformation2 *p)
{
	if (::soap_read_ns1__CreditorReferenceInformation2(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__CreditTransferTransaction54_DEFINED
#define SOAP_TYPE_ns1__CreditTransferTransaction54_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CreditTransferTransaction54(struct soap*, const char*, int, const ns1__CreditTransferTransaction54 *, const char*);
SOAP_FMAC3 ns1__CreditTransferTransaction54 * SOAP_FMAC4 soap_in_ns1__CreditTransferTransaction54(struct soap*, const char*, ns1__CreditTransferTransaction54 *, const char*);
SOAP_FMAC1 ns1__CreditTransferTransaction54 * SOAP_FMAC2 soap_instantiate_ns1__CreditTransferTransaction54(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CreditTransferTransaction54 * soap_new_ns1__CreditTransferTransaction54(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__CreditTransferTransaction54(soap, n, NULL, NULL, NULL);
}

inline ns1__CreditTransferTransaction54 * soap_new_req_ns1__CreditTransferTransaction54(
	struct soap *soap,
	ns1__PaymentIdentification6 *PmtId,
	ns1__AmountType4Choice *Amt)
{
	ns1__CreditTransferTransaction54 *_p = ::soap_new_ns1__CreditTransferTransaction54(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CreditTransferTransaction54::PmtId = PmtId;
		_p->ns1__CreditTransferTransaction54::Amt = Amt;
	}
	return _p;
}

inline ns1__CreditTransferTransaction54 * soap_new_set_ns1__CreditTransferTransaction54(
	struct soap *soap,
	ns1__PaymentIdentification6 *PmtId,
	ns1__PaymentTypeInformation26 *PmtTpInf,
	ns1__AmountType4Choice *Amt,
	ns1__ExchangeRate1 *XchgRateInf,
	enum ns1__ChargeBearerType1Code *ChrgBr,
	ns1__CreditTransferMandateData1 *MndtRltdInf,
	ns1__Cheque11 *ChqInstr,
	ns1__PartyIdentification135 *UltmtDbtr,
	ns1__BranchAndFinancialInstitutionIdentification6 *IntrmyAgt1,
	ns1__CashAccount40 *IntrmyAgt1Acct,
	ns1__BranchAndFinancialInstitutionIdentification6 *IntrmyAgt2,
	ns1__CashAccount40 *IntrmyAgt2Acct,
	ns1__BranchAndFinancialInstitutionIdentification6 *IntrmyAgt3,
	ns1__CashAccount40 *IntrmyAgt3Acct,
	ns1__BranchAndFinancialInstitutionIdentification6 *CdtrAgt,
	ns1__CashAccount40 *CdtrAgtAcct,
	ns1__PartyIdentification135 *Cdtr,
	ns1__CashAccount40 *CdtrAcct,
	ns1__PartyIdentification135 *UltmtCdtr,
	const std::vector<ns1__InstructionForCreditorAgent3 *> & InstrForCdtrAgt,
	ns1__InstructionForDebtorAgent1 *InstrForDbtrAgt,
	ns1__Purpose2Choice *Purp,
	const std::vector<ns1__RegulatoryReporting3 *> & RgltryRptg,
	ns1__TaxInformation10 *Tax,
	const std::vector<ns1__RemittanceLocation7 *> & RltdRmtInf,
	ns1__RemittanceInformation21 *RmtInf,
	const std::vector<ns1__SupplementaryData1 *> & SplmtryData)
{
	ns1__CreditTransferTransaction54 *_p = ::soap_new_ns1__CreditTransferTransaction54(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CreditTransferTransaction54::PmtId = PmtId;
		_p->ns1__CreditTransferTransaction54::PmtTpInf = PmtTpInf;
		_p->ns1__CreditTransferTransaction54::Amt = Amt;
		_p->ns1__CreditTransferTransaction54::XchgRateInf = XchgRateInf;
		_p->ns1__CreditTransferTransaction54::ChrgBr = ChrgBr;
		_p->ns1__CreditTransferTransaction54::MndtRltdInf = MndtRltdInf;
		_p->ns1__CreditTransferTransaction54::ChqInstr = ChqInstr;
		_p->ns1__CreditTransferTransaction54::UltmtDbtr = UltmtDbtr;
		_p->ns1__CreditTransferTransaction54::IntrmyAgt1 = IntrmyAgt1;
		_p->ns1__CreditTransferTransaction54::IntrmyAgt1Acct = IntrmyAgt1Acct;
		_p->ns1__CreditTransferTransaction54::IntrmyAgt2 = IntrmyAgt2;
		_p->ns1__CreditTransferTransaction54::IntrmyAgt2Acct = IntrmyAgt2Acct;
		_p->ns1__CreditTransferTransaction54::IntrmyAgt3 = IntrmyAgt3;
		_p->ns1__CreditTransferTransaction54::IntrmyAgt3Acct = IntrmyAgt3Acct;
		_p->ns1__CreditTransferTransaction54::CdtrAgt = CdtrAgt;
		_p->ns1__CreditTransferTransaction54::CdtrAgtAcct = CdtrAgtAcct;
		_p->ns1__CreditTransferTransaction54::Cdtr = Cdtr;
		_p->ns1__CreditTransferTransaction54::CdtrAcct = CdtrAcct;
		_p->ns1__CreditTransferTransaction54::UltmtCdtr = UltmtCdtr;
		_p->ns1__CreditTransferTransaction54::InstrForCdtrAgt = InstrForCdtrAgt;
		_p->ns1__CreditTransferTransaction54::InstrForDbtrAgt = InstrForDbtrAgt;
		_p->ns1__CreditTransferTransaction54::Purp = Purp;
		_p->ns1__CreditTransferTransaction54::RgltryRptg = RgltryRptg;
		_p->ns1__CreditTransferTransaction54::Tax = Tax;
		_p->ns1__CreditTransferTransaction54::RltdRmtInf = RltdRmtInf;
		_p->ns1__CreditTransferTransaction54::RmtInf = RmtInf;
		_p->ns1__CreditTransferTransaction54::SplmtryData = SplmtryData;
	}
	return _p;
}

inline int soap_write_ns1__CreditTransferTransaction54(struct soap *soap, ns1__CreditTransferTransaction54 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CreditTransferTransaction54", p->soap_type() == SOAP_TYPE_ns1__CreditTransferTransaction54 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__CreditTransferTransaction54(struct soap *soap, const char *URL, ns1__CreditTransferTransaction54 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CreditTransferTransaction54", p->soap_type() == SOAP_TYPE_ns1__CreditTransferTransaction54 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__CreditTransferTransaction54(struct soap *soap, const char *URL, ns1__CreditTransferTransaction54 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CreditTransferTransaction54", p->soap_type() == SOAP_TYPE_ns1__CreditTransferTransaction54 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__CreditTransferTransaction54(struct soap *soap, const char *URL, ns1__CreditTransferTransaction54 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CreditTransferTransaction54", p->soap_type() == SOAP_TYPE_ns1__CreditTransferTransaction54 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__CreditTransferTransaction54 * SOAP_FMAC4 soap_get_ns1__CreditTransferTransaction54(struct soap*, ns1__CreditTransferTransaction54 *, const char*, const char*);

inline int soap_read_ns1__CreditTransferTransaction54(struct soap *soap, ns1__CreditTransferTransaction54 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__CreditTransferTransaction54(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__CreditTransferTransaction54(struct soap *soap, const char *URL, ns1__CreditTransferTransaction54 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__CreditTransferTransaction54(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__CreditTransferTransaction54(struct soap *soap, ns1__CreditTransferTransaction54 *p)
{
	if (::soap_read_ns1__CreditTransferTransaction54(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__CreditTransferMandateData1_DEFINED
#define SOAP_TYPE_ns1__CreditTransferMandateData1_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CreditTransferMandateData1(struct soap*, const char*, int, const ns1__CreditTransferMandateData1 *, const char*);
SOAP_FMAC3 ns1__CreditTransferMandateData1 * SOAP_FMAC4 soap_in_ns1__CreditTransferMandateData1(struct soap*, const char*, ns1__CreditTransferMandateData1 *, const char*);
SOAP_FMAC1 ns1__CreditTransferMandateData1 * SOAP_FMAC2 soap_instantiate_ns1__CreditTransferMandateData1(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CreditTransferMandateData1 * soap_new_ns1__CreditTransferMandateData1(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__CreditTransferMandateData1(soap, n, NULL, NULL, NULL);
}

inline ns1__CreditTransferMandateData1 * soap_new_req_ns1__CreditTransferMandateData1(
	struct soap *soap)
{
	ns1__CreditTransferMandateData1 *_p = ::soap_new_ns1__CreditTransferMandateData1(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__CreditTransferMandateData1 * soap_new_set_ns1__CreditTransferMandateData1(
	struct soap *soap,
	std::string *MndtId,
	ns1__MandateTypeInformation2 *Tp,
	std::string *DtOfSgntr,
	time_t *DtOfVrfctn,
	xsd__base64Binary *ElctrncSgntr,
	std::string *FrstPmtDt,
	std::string *FnlPmtDt,
	ns1__Frequency36Choice *Frqcy,
	ns1__MandateSetupReason1Choice *Rsn)
{
	ns1__CreditTransferMandateData1 *_p = ::soap_new_ns1__CreditTransferMandateData1(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CreditTransferMandateData1::MndtId = MndtId;
		_p->ns1__CreditTransferMandateData1::Tp = Tp;
		_p->ns1__CreditTransferMandateData1::DtOfSgntr = DtOfSgntr;
		_p->ns1__CreditTransferMandateData1::DtOfVrfctn = DtOfVrfctn;
		_p->ns1__CreditTransferMandateData1::ElctrncSgntr = ElctrncSgntr;
		_p->ns1__CreditTransferMandateData1::FrstPmtDt = FrstPmtDt;
		_p->ns1__CreditTransferMandateData1::FnlPmtDt = FnlPmtDt;
		_p->ns1__CreditTransferMandateData1::Frqcy = Frqcy;
		_p->ns1__CreditTransferMandateData1::Rsn = Rsn;
	}
	return _p;
}

inline int soap_write_ns1__CreditTransferMandateData1(struct soap *soap, ns1__CreditTransferMandateData1 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CreditTransferMandateData1", p->soap_type() == SOAP_TYPE_ns1__CreditTransferMandateData1 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__CreditTransferMandateData1(struct soap *soap, const char *URL, ns1__CreditTransferMandateData1 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CreditTransferMandateData1", p->soap_type() == SOAP_TYPE_ns1__CreditTransferMandateData1 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__CreditTransferMandateData1(struct soap *soap, const char *URL, ns1__CreditTransferMandateData1 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CreditTransferMandateData1", p->soap_type() == SOAP_TYPE_ns1__CreditTransferMandateData1 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__CreditTransferMandateData1(struct soap *soap, const char *URL, ns1__CreditTransferMandateData1 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CreditTransferMandateData1", p->soap_type() == SOAP_TYPE_ns1__CreditTransferMandateData1 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__CreditTransferMandateData1 * SOAP_FMAC4 soap_get_ns1__CreditTransferMandateData1(struct soap*, ns1__CreditTransferMandateData1 *, const char*, const char*);

inline int soap_read_ns1__CreditTransferMandateData1(struct soap *soap, ns1__CreditTransferMandateData1 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__CreditTransferMandateData1(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__CreditTransferMandateData1(struct soap *soap, const char *URL, ns1__CreditTransferMandateData1 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__CreditTransferMandateData1(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__CreditTransferMandateData1(struct soap *soap, ns1__CreditTransferMandateData1 *p)
{
	if (::soap_read_ns1__CreditTransferMandateData1(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__Contact4_DEFINED
#define SOAP_TYPE_ns1__Contact4_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Contact4(struct soap*, const char*, int, const ns1__Contact4 *, const char*);
SOAP_FMAC3 ns1__Contact4 * SOAP_FMAC4 soap_in_ns1__Contact4(struct soap*, const char*, ns1__Contact4 *, const char*);
SOAP_FMAC1 ns1__Contact4 * SOAP_FMAC2 soap_instantiate_ns1__Contact4(struct soap*, int, const char*, const char*, size_t*);

inline ns1__Contact4 * soap_new_ns1__Contact4(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__Contact4(soap, n, NULL, NULL, NULL);
}

inline ns1__Contact4 * soap_new_req_ns1__Contact4(
	struct soap *soap)
{
	ns1__Contact4 *_p = ::soap_new_ns1__Contact4(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__Contact4 * soap_new_set_ns1__Contact4(
	struct soap *soap,
	enum ns1__NamePrefix2Code *NmPrfx,
	std::string *Nm,
	std::string *PhneNb,
	std::string *MobNb,
	std::string *FaxNb,
	std::string *EmailAdr,
	std::string *EmailPurp,
	std::string *JobTitl,
	std::string *Rspnsblty,
	std::string *Dept,
	const std::vector<ns1__OtherContact1 *> & Othr,
	enum ns1__PreferredContactMethod1Code *PrefrdMtd)
{
	ns1__Contact4 *_p = ::soap_new_ns1__Contact4(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__Contact4::NmPrfx = NmPrfx;
		_p->ns1__Contact4::Nm = Nm;
		_p->ns1__Contact4::PhneNb = PhneNb;
		_p->ns1__Contact4::MobNb = MobNb;
		_p->ns1__Contact4::FaxNb = FaxNb;
		_p->ns1__Contact4::EmailAdr = EmailAdr;
		_p->ns1__Contact4::EmailPurp = EmailPurp;
		_p->ns1__Contact4::JobTitl = JobTitl;
		_p->ns1__Contact4::Rspnsblty = Rspnsblty;
		_p->ns1__Contact4::Dept = Dept;
		_p->ns1__Contact4::Othr = Othr;
		_p->ns1__Contact4::PrefrdMtd = PrefrdMtd;
	}
	return _p;
}

inline int soap_write_ns1__Contact4(struct soap *soap, ns1__Contact4 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Contact4", p->soap_type() == SOAP_TYPE_ns1__Contact4 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__Contact4(struct soap *soap, const char *URL, ns1__Contact4 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Contact4", p->soap_type() == SOAP_TYPE_ns1__Contact4 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__Contact4(struct soap *soap, const char *URL, ns1__Contact4 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Contact4", p->soap_type() == SOAP_TYPE_ns1__Contact4 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__Contact4(struct soap *soap, const char *URL, ns1__Contact4 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Contact4", p->soap_type() == SOAP_TYPE_ns1__Contact4 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__Contact4 * SOAP_FMAC4 soap_get_ns1__Contact4(struct soap*, ns1__Contact4 *, const char*, const char*);

inline int soap_read_ns1__Contact4(struct soap *soap, ns1__Contact4 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__Contact4(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__Contact4(struct soap *soap, const char *URL, ns1__Contact4 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__Contact4(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__Contact4(struct soap *soap, ns1__Contact4 *p)
{
	if (::soap_read_ns1__Contact4(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__ClearingSystemMemberIdentification2_DEFINED
#define SOAP_TYPE_ns1__ClearingSystemMemberIdentification2_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ClearingSystemMemberIdentification2(struct soap*, const char*, int, const ns1__ClearingSystemMemberIdentification2 *, const char*);
SOAP_FMAC3 ns1__ClearingSystemMemberIdentification2 * SOAP_FMAC4 soap_in_ns1__ClearingSystemMemberIdentification2(struct soap*, const char*, ns1__ClearingSystemMemberIdentification2 *, const char*);
SOAP_FMAC1 ns1__ClearingSystemMemberIdentification2 * SOAP_FMAC2 soap_instantiate_ns1__ClearingSystemMemberIdentification2(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ClearingSystemMemberIdentification2 * soap_new_ns1__ClearingSystemMemberIdentification2(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ClearingSystemMemberIdentification2(soap, n, NULL, NULL, NULL);
}

inline ns1__ClearingSystemMemberIdentification2 * soap_new_req_ns1__ClearingSystemMemberIdentification2(
	struct soap *soap,
	const std::string& MmbId)
{
	ns1__ClearingSystemMemberIdentification2 *_p = ::soap_new_ns1__ClearingSystemMemberIdentification2(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ClearingSystemMemberIdentification2::MmbId = MmbId;
	}
	return _p;
}

inline ns1__ClearingSystemMemberIdentification2 * soap_new_set_ns1__ClearingSystemMemberIdentification2(
	struct soap *soap,
	ns1__ClearingSystemIdentification2Choice *ClrSysId,
	const std::string& MmbId)
{
	ns1__ClearingSystemMemberIdentification2 *_p = ::soap_new_ns1__ClearingSystemMemberIdentification2(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ClearingSystemMemberIdentification2::ClrSysId = ClrSysId;
		_p->ns1__ClearingSystemMemberIdentification2::MmbId = MmbId;
	}
	return _p;
}

inline int soap_write_ns1__ClearingSystemMemberIdentification2(struct soap *soap, ns1__ClearingSystemMemberIdentification2 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ClearingSystemMemberIdentification2", p->soap_type() == SOAP_TYPE_ns1__ClearingSystemMemberIdentification2 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ClearingSystemMemberIdentification2(struct soap *soap, const char *URL, ns1__ClearingSystemMemberIdentification2 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ClearingSystemMemberIdentification2", p->soap_type() == SOAP_TYPE_ns1__ClearingSystemMemberIdentification2 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ClearingSystemMemberIdentification2(struct soap *soap, const char *URL, ns1__ClearingSystemMemberIdentification2 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ClearingSystemMemberIdentification2", p->soap_type() == SOAP_TYPE_ns1__ClearingSystemMemberIdentification2 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ClearingSystemMemberIdentification2(struct soap *soap, const char *URL, ns1__ClearingSystemMemberIdentification2 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ClearingSystemMemberIdentification2", p->soap_type() == SOAP_TYPE_ns1__ClearingSystemMemberIdentification2 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ClearingSystemMemberIdentification2 * SOAP_FMAC4 soap_get_ns1__ClearingSystemMemberIdentification2(struct soap*, ns1__ClearingSystemMemberIdentification2 *, const char*, const char*);

inline int soap_read_ns1__ClearingSystemMemberIdentification2(struct soap *soap, ns1__ClearingSystemMemberIdentification2 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__ClearingSystemMemberIdentification2(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ClearingSystemMemberIdentification2(struct soap *soap, const char *URL, ns1__ClearingSystemMemberIdentification2 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ClearingSystemMemberIdentification2(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__ClearingSystemMemberIdentification2(struct soap *soap, ns1__ClearingSystemMemberIdentification2 *p)
{
	if (::soap_read_ns1__ClearingSystemMemberIdentification2(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__ClearingSystemIdentification2Choice_DEFINED
#define SOAP_TYPE_ns1__ClearingSystemIdentification2Choice_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ClearingSystemIdentification2Choice(struct soap*, const char*, int, const ns1__ClearingSystemIdentification2Choice *, const char*);
SOAP_FMAC3 ns1__ClearingSystemIdentification2Choice * SOAP_FMAC4 soap_in_ns1__ClearingSystemIdentification2Choice(struct soap*, const char*, ns1__ClearingSystemIdentification2Choice *, const char*);
SOAP_FMAC1 ns1__ClearingSystemIdentification2Choice * SOAP_FMAC2 soap_instantiate_ns1__ClearingSystemIdentification2Choice(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ClearingSystemIdentification2Choice * soap_new_ns1__ClearingSystemIdentification2Choice(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ClearingSystemIdentification2Choice(soap, n, NULL, NULL, NULL);
}

inline ns1__ClearingSystemIdentification2Choice * soap_new_req_ns1__ClearingSystemIdentification2Choice(
	struct soap *soap,
	const union _ns1__union_ClearingSystemIdentification2Choice& union_ClearingSystemIdentification2Choice)
{
	ns1__ClearingSystemIdentification2Choice *_p = ::soap_new_ns1__ClearingSystemIdentification2Choice(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ClearingSystemIdentification2Choice::union_ClearingSystemIdentification2Choice = union_ClearingSystemIdentification2Choice;
	}
	return _p;
}

inline ns1__ClearingSystemIdentification2Choice * soap_new_set_ns1__ClearingSystemIdentification2Choice(
	struct soap *soap,
	int __union_ClearingSystemIdentification2Choice,
	const union _ns1__union_ClearingSystemIdentification2Choice& union_ClearingSystemIdentification2Choice)
{
	ns1__ClearingSystemIdentification2Choice *_p = ::soap_new_ns1__ClearingSystemIdentification2Choice(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ClearingSystemIdentification2Choice::__union_ClearingSystemIdentification2Choice = __union_ClearingSystemIdentification2Choice;
		_p->ns1__ClearingSystemIdentification2Choice::union_ClearingSystemIdentification2Choice = union_ClearingSystemIdentification2Choice;
	}
	return _p;
}

inline int soap_write_ns1__ClearingSystemIdentification2Choice(struct soap *soap, ns1__ClearingSystemIdentification2Choice const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ClearingSystemIdentification2Choice", p->soap_type() == SOAP_TYPE_ns1__ClearingSystemIdentification2Choice ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ClearingSystemIdentification2Choice(struct soap *soap, const char *URL, ns1__ClearingSystemIdentification2Choice const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ClearingSystemIdentification2Choice", p->soap_type() == SOAP_TYPE_ns1__ClearingSystemIdentification2Choice ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ClearingSystemIdentification2Choice(struct soap *soap, const char *URL, ns1__ClearingSystemIdentification2Choice const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ClearingSystemIdentification2Choice", p->soap_type() == SOAP_TYPE_ns1__ClearingSystemIdentification2Choice ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ClearingSystemIdentification2Choice(struct soap *soap, const char *URL, ns1__ClearingSystemIdentification2Choice const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ClearingSystemIdentification2Choice", p->soap_type() == SOAP_TYPE_ns1__ClearingSystemIdentification2Choice ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ClearingSystemIdentification2Choice * SOAP_FMAC4 soap_get_ns1__ClearingSystemIdentification2Choice(struct soap*, ns1__ClearingSystemIdentification2Choice *, const char*, const char*);

inline int soap_read_ns1__ClearingSystemIdentification2Choice(struct soap *soap, ns1__ClearingSystemIdentification2Choice *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__ClearingSystemIdentification2Choice(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ClearingSystemIdentification2Choice(struct soap *soap, const char *URL, ns1__ClearingSystemIdentification2Choice *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ClearingSystemIdentification2Choice(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__ClearingSystemIdentification2Choice(struct soap *soap, ns1__ClearingSystemIdentification2Choice *p)
{
	if (::soap_read_ns1__ClearingSystemIdentification2Choice(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__ChequeDeliveryMethod1Choice_DEFINED
#define SOAP_TYPE_ns1__ChequeDeliveryMethod1Choice_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ChequeDeliveryMethod1Choice(struct soap*, const char*, int, const ns1__ChequeDeliveryMethod1Choice *, const char*);
SOAP_FMAC3 ns1__ChequeDeliveryMethod1Choice * SOAP_FMAC4 soap_in_ns1__ChequeDeliveryMethod1Choice(struct soap*, const char*, ns1__ChequeDeliveryMethod1Choice *, const char*);
SOAP_FMAC1 ns1__ChequeDeliveryMethod1Choice * SOAP_FMAC2 soap_instantiate_ns1__ChequeDeliveryMethod1Choice(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ChequeDeliveryMethod1Choice * soap_new_ns1__ChequeDeliveryMethod1Choice(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ChequeDeliveryMethod1Choice(soap, n, NULL, NULL, NULL);
}

inline ns1__ChequeDeliveryMethod1Choice * soap_new_req_ns1__ChequeDeliveryMethod1Choice(
	struct soap *soap,
	const union _ns1__union_ChequeDeliveryMethod1Choice& union_ChequeDeliveryMethod1Choice)
{
	ns1__ChequeDeliveryMethod1Choice *_p = ::soap_new_ns1__ChequeDeliveryMethod1Choice(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ChequeDeliveryMethod1Choice::union_ChequeDeliveryMethod1Choice = union_ChequeDeliveryMethod1Choice;
	}
	return _p;
}

inline ns1__ChequeDeliveryMethod1Choice * soap_new_set_ns1__ChequeDeliveryMethod1Choice(
	struct soap *soap,
	int __union_ChequeDeliveryMethod1Choice,
	const union _ns1__union_ChequeDeliveryMethod1Choice& union_ChequeDeliveryMethod1Choice)
{
	ns1__ChequeDeliveryMethod1Choice *_p = ::soap_new_ns1__ChequeDeliveryMethod1Choice(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ChequeDeliveryMethod1Choice::__union_ChequeDeliveryMethod1Choice = __union_ChequeDeliveryMethod1Choice;
		_p->ns1__ChequeDeliveryMethod1Choice::union_ChequeDeliveryMethod1Choice = union_ChequeDeliveryMethod1Choice;
	}
	return _p;
}

inline int soap_write_ns1__ChequeDeliveryMethod1Choice(struct soap *soap, ns1__ChequeDeliveryMethod1Choice const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ChequeDeliveryMethod1Choice", p->soap_type() == SOAP_TYPE_ns1__ChequeDeliveryMethod1Choice ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ChequeDeliveryMethod1Choice(struct soap *soap, const char *URL, ns1__ChequeDeliveryMethod1Choice const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ChequeDeliveryMethod1Choice", p->soap_type() == SOAP_TYPE_ns1__ChequeDeliveryMethod1Choice ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ChequeDeliveryMethod1Choice(struct soap *soap, const char *URL, ns1__ChequeDeliveryMethod1Choice const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ChequeDeliveryMethod1Choice", p->soap_type() == SOAP_TYPE_ns1__ChequeDeliveryMethod1Choice ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ChequeDeliveryMethod1Choice(struct soap *soap, const char *URL, ns1__ChequeDeliveryMethod1Choice const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ChequeDeliveryMethod1Choice", p->soap_type() == SOAP_TYPE_ns1__ChequeDeliveryMethod1Choice ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ChequeDeliveryMethod1Choice * SOAP_FMAC4 soap_get_ns1__ChequeDeliveryMethod1Choice(struct soap*, ns1__ChequeDeliveryMethod1Choice *, const char*, const char*);

inline int soap_read_ns1__ChequeDeliveryMethod1Choice(struct soap *soap, ns1__ChequeDeliveryMethod1Choice *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__ChequeDeliveryMethod1Choice(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ChequeDeliveryMethod1Choice(struct soap *soap, const char *URL, ns1__ChequeDeliveryMethod1Choice *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ChequeDeliveryMethod1Choice(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__ChequeDeliveryMethod1Choice(struct soap *soap, ns1__ChequeDeliveryMethod1Choice *p)
{
	if (::soap_read_ns1__ChequeDeliveryMethod1Choice(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__Cheque11_DEFINED
#define SOAP_TYPE_ns1__Cheque11_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Cheque11(struct soap*, const char*, int, const ns1__Cheque11 *, const char*);
SOAP_FMAC3 ns1__Cheque11 * SOAP_FMAC4 soap_in_ns1__Cheque11(struct soap*, const char*, ns1__Cheque11 *, const char*);
SOAP_FMAC1 ns1__Cheque11 * SOAP_FMAC2 soap_instantiate_ns1__Cheque11(struct soap*, int, const char*, const char*, size_t*);

inline ns1__Cheque11 * soap_new_ns1__Cheque11(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__Cheque11(soap, n, NULL, NULL, NULL);
}

inline ns1__Cheque11 * soap_new_req_ns1__Cheque11(
	struct soap *soap)
{
	ns1__Cheque11 *_p = ::soap_new_ns1__Cheque11(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__Cheque11 * soap_new_set_ns1__Cheque11(
	struct soap *soap,
	enum ns1__ChequeType2Code *ChqTp,
	std::string *ChqNb,
	ns1__NameAndAddress16 *ChqFr,
	ns1__ChequeDeliveryMethod1Choice *DlvryMtd,
	ns1__NameAndAddress16 *DlvrTo,
	enum ns1__Priority2Code *InstrPrty,
	std::string *ChqMtrtyDt,
	std::string *FrmsCd,
	const std::vector<std::string> & MemoFld,
	std::string *RgnlClrZone,
	std::string *PrtLctn,
	const std::vector<std::string> & Sgntr)
{
	ns1__Cheque11 *_p = ::soap_new_ns1__Cheque11(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__Cheque11::ChqTp = ChqTp;
		_p->ns1__Cheque11::ChqNb = ChqNb;
		_p->ns1__Cheque11::ChqFr = ChqFr;
		_p->ns1__Cheque11::DlvryMtd = DlvryMtd;
		_p->ns1__Cheque11::DlvrTo = DlvrTo;
		_p->ns1__Cheque11::InstrPrty = InstrPrty;
		_p->ns1__Cheque11::ChqMtrtyDt = ChqMtrtyDt;
		_p->ns1__Cheque11::FrmsCd = FrmsCd;
		_p->ns1__Cheque11::MemoFld = MemoFld;
		_p->ns1__Cheque11::RgnlClrZone = RgnlClrZone;
		_p->ns1__Cheque11::PrtLctn = PrtLctn;
		_p->ns1__Cheque11::Sgntr = Sgntr;
	}
	return _p;
}

inline int soap_write_ns1__Cheque11(struct soap *soap, ns1__Cheque11 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Cheque11", p->soap_type() == SOAP_TYPE_ns1__Cheque11 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__Cheque11(struct soap *soap, const char *URL, ns1__Cheque11 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Cheque11", p->soap_type() == SOAP_TYPE_ns1__Cheque11 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__Cheque11(struct soap *soap, const char *URL, ns1__Cheque11 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Cheque11", p->soap_type() == SOAP_TYPE_ns1__Cheque11 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__Cheque11(struct soap *soap, const char *URL, ns1__Cheque11 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Cheque11", p->soap_type() == SOAP_TYPE_ns1__Cheque11 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__Cheque11 * SOAP_FMAC4 soap_get_ns1__Cheque11(struct soap*, ns1__Cheque11 *, const char*, const char*);

inline int soap_read_ns1__Cheque11(struct soap *soap, ns1__Cheque11 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__Cheque11(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__Cheque11(struct soap *soap, const char *URL, ns1__Cheque11 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__Cheque11(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__Cheque11(struct soap *soap, ns1__Cheque11 *p)
{
	if (::soap_read_ns1__Cheque11(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__CategoryPurpose1Choice_DEFINED
#define SOAP_TYPE_ns1__CategoryPurpose1Choice_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CategoryPurpose1Choice(struct soap*, const char*, int, const ns1__CategoryPurpose1Choice *, const char*);
SOAP_FMAC3 ns1__CategoryPurpose1Choice * SOAP_FMAC4 soap_in_ns1__CategoryPurpose1Choice(struct soap*, const char*, ns1__CategoryPurpose1Choice *, const char*);
SOAP_FMAC1 ns1__CategoryPurpose1Choice * SOAP_FMAC2 soap_instantiate_ns1__CategoryPurpose1Choice(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CategoryPurpose1Choice * soap_new_ns1__CategoryPurpose1Choice(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__CategoryPurpose1Choice(soap, n, NULL, NULL, NULL);
}

inline ns1__CategoryPurpose1Choice * soap_new_req_ns1__CategoryPurpose1Choice(
	struct soap *soap,
	const union _ns1__union_CategoryPurpose1Choice& union_CategoryPurpose1Choice)
{
	ns1__CategoryPurpose1Choice *_p = ::soap_new_ns1__CategoryPurpose1Choice(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CategoryPurpose1Choice::union_CategoryPurpose1Choice = union_CategoryPurpose1Choice;
	}
	return _p;
}

inline ns1__CategoryPurpose1Choice * soap_new_set_ns1__CategoryPurpose1Choice(
	struct soap *soap,
	int __union_CategoryPurpose1Choice,
	const union _ns1__union_CategoryPurpose1Choice& union_CategoryPurpose1Choice)
{
	ns1__CategoryPurpose1Choice *_p = ::soap_new_ns1__CategoryPurpose1Choice(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CategoryPurpose1Choice::__union_CategoryPurpose1Choice = __union_CategoryPurpose1Choice;
		_p->ns1__CategoryPurpose1Choice::union_CategoryPurpose1Choice = union_CategoryPurpose1Choice;
	}
	return _p;
}

inline int soap_write_ns1__CategoryPurpose1Choice(struct soap *soap, ns1__CategoryPurpose1Choice const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CategoryPurpose1Choice", p->soap_type() == SOAP_TYPE_ns1__CategoryPurpose1Choice ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__CategoryPurpose1Choice(struct soap *soap, const char *URL, ns1__CategoryPurpose1Choice const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CategoryPurpose1Choice", p->soap_type() == SOAP_TYPE_ns1__CategoryPurpose1Choice ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__CategoryPurpose1Choice(struct soap *soap, const char *URL, ns1__CategoryPurpose1Choice const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CategoryPurpose1Choice", p->soap_type() == SOAP_TYPE_ns1__CategoryPurpose1Choice ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__CategoryPurpose1Choice(struct soap *soap, const char *URL, ns1__CategoryPurpose1Choice const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CategoryPurpose1Choice", p->soap_type() == SOAP_TYPE_ns1__CategoryPurpose1Choice ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__CategoryPurpose1Choice * SOAP_FMAC4 soap_get_ns1__CategoryPurpose1Choice(struct soap*, ns1__CategoryPurpose1Choice *, const char*, const char*);

inline int soap_read_ns1__CategoryPurpose1Choice(struct soap *soap, ns1__CategoryPurpose1Choice *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__CategoryPurpose1Choice(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__CategoryPurpose1Choice(struct soap *soap, const char *URL, ns1__CategoryPurpose1Choice *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__CategoryPurpose1Choice(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__CategoryPurpose1Choice(struct soap *soap, ns1__CategoryPurpose1Choice *p)
{
	if (::soap_read_ns1__CategoryPurpose1Choice(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__CashAccountType2Choice_DEFINED
#define SOAP_TYPE_ns1__CashAccountType2Choice_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CashAccountType2Choice(struct soap*, const char*, int, const ns1__CashAccountType2Choice *, const char*);
SOAP_FMAC3 ns1__CashAccountType2Choice * SOAP_FMAC4 soap_in_ns1__CashAccountType2Choice(struct soap*, const char*, ns1__CashAccountType2Choice *, const char*);
SOAP_FMAC1 ns1__CashAccountType2Choice * SOAP_FMAC2 soap_instantiate_ns1__CashAccountType2Choice(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CashAccountType2Choice * soap_new_ns1__CashAccountType2Choice(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__CashAccountType2Choice(soap, n, NULL, NULL, NULL);
}

inline ns1__CashAccountType2Choice * soap_new_req_ns1__CashAccountType2Choice(
	struct soap *soap,
	const union _ns1__union_CashAccountType2Choice& union_CashAccountType2Choice)
{
	ns1__CashAccountType2Choice *_p = ::soap_new_ns1__CashAccountType2Choice(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CashAccountType2Choice::union_CashAccountType2Choice = union_CashAccountType2Choice;
	}
	return _p;
}

inline ns1__CashAccountType2Choice * soap_new_set_ns1__CashAccountType2Choice(
	struct soap *soap,
	int __union_CashAccountType2Choice,
	const union _ns1__union_CashAccountType2Choice& union_CashAccountType2Choice)
{
	ns1__CashAccountType2Choice *_p = ::soap_new_ns1__CashAccountType2Choice(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CashAccountType2Choice::__union_CashAccountType2Choice = __union_CashAccountType2Choice;
		_p->ns1__CashAccountType2Choice::union_CashAccountType2Choice = union_CashAccountType2Choice;
	}
	return _p;
}

inline int soap_write_ns1__CashAccountType2Choice(struct soap *soap, ns1__CashAccountType2Choice const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CashAccountType2Choice", p->soap_type() == SOAP_TYPE_ns1__CashAccountType2Choice ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__CashAccountType2Choice(struct soap *soap, const char *URL, ns1__CashAccountType2Choice const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CashAccountType2Choice", p->soap_type() == SOAP_TYPE_ns1__CashAccountType2Choice ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__CashAccountType2Choice(struct soap *soap, const char *URL, ns1__CashAccountType2Choice const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CashAccountType2Choice", p->soap_type() == SOAP_TYPE_ns1__CashAccountType2Choice ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__CashAccountType2Choice(struct soap *soap, const char *URL, ns1__CashAccountType2Choice const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CashAccountType2Choice", p->soap_type() == SOAP_TYPE_ns1__CashAccountType2Choice ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__CashAccountType2Choice * SOAP_FMAC4 soap_get_ns1__CashAccountType2Choice(struct soap*, ns1__CashAccountType2Choice *, const char*, const char*);

inline int soap_read_ns1__CashAccountType2Choice(struct soap *soap, ns1__CashAccountType2Choice *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__CashAccountType2Choice(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__CashAccountType2Choice(struct soap *soap, const char *URL, ns1__CashAccountType2Choice *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__CashAccountType2Choice(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__CashAccountType2Choice(struct soap *soap, ns1__CashAccountType2Choice *p)
{
	if (::soap_read_ns1__CashAccountType2Choice(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__CashAccount40_DEFINED
#define SOAP_TYPE_ns1__CashAccount40_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CashAccount40(struct soap*, const char*, int, const ns1__CashAccount40 *, const char*);
SOAP_FMAC3 ns1__CashAccount40 * SOAP_FMAC4 soap_in_ns1__CashAccount40(struct soap*, const char*, ns1__CashAccount40 *, const char*);
SOAP_FMAC1 ns1__CashAccount40 * SOAP_FMAC2 soap_instantiate_ns1__CashAccount40(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CashAccount40 * soap_new_ns1__CashAccount40(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__CashAccount40(soap, n, NULL, NULL, NULL);
}

inline ns1__CashAccount40 * soap_new_req_ns1__CashAccount40(
	struct soap *soap)
{
	ns1__CashAccount40 *_p = ::soap_new_ns1__CashAccount40(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__CashAccount40 * soap_new_set_ns1__CashAccount40(
	struct soap *soap,
	ns1__AccountIdentification4Choice *Id,
	ns1__CashAccountType2Choice *Tp,
	std::string *Ccy,
	std::string *Nm,
	ns1__ProxyAccountIdentification1 *Prxy)
{
	ns1__CashAccount40 *_p = ::soap_new_ns1__CashAccount40(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CashAccount40::Id = Id;
		_p->ns1__CashAccount40::Tp = Tp;
		_p->ns1__CashAccount40::Ccy = Ccy;
		_p->ns1__CashAccount40::Nm = Nm;
		_p->ns1__CashAccount40::Prxy = Prxy;
	}
	return _p;
}

inline int soap_write_ns1__CashAccount40(struct soap *soap, ns1__CashAccount40 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CashAccount40", p->soap_type() == SOAP_TYPE_ns1__CashAccount40 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__CashAccount40(struct soap *soap, const char *URL, ns1__CashAccount40 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CashAccount40", p->soap_type() == SOAP_TYPE_ns1__CashAccount40 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__CashAccount40(struct soap *soap, const char *URL, ns1__CashAccount40 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CashAccount40", p->soap_type() == SOAP_TYPE_ns1__CashAccount40 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__CashAccount40(struct soap *soap, const char *URL, ns1__CashAccount40 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CashAccount40", p->soap_type() == SOAP_TYPE_ns1__CashAccount40 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__CashAccount40 * SOAP_FMAC4 soap_get_ns1__CashAccount40(struct soap*, ns1__CashAccount40 *, const char*, const char*);

inline int soap_read_ns1__CashAccount40(struct soap *soap, ns1__CashAccount40 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__CashAccount40(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__CashAccount40(struct soap *soap, const char *URL, ns1__CashAccount40 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__CashAccount40(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__CashAccount40(struct soap *soap, ns1__CashAccount40 *p)
{
	if (::soap_read_ns1__CashAccount40(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__BranchData3_DEFINED
#define SOAP_TYPE_ns1__BranchData3_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__BranchData3(struct soap*, const char*, int, const ns1__BranchData3 *, const char*);
SOAP_FMAC3 ns1__BranchData3 * SOAP_FMAC4 soap_in_ns1__BranchData3(struct soap*, const char*, ns1__BranchData3 *, const char*);
SOAP_FMAC1 ns1__BranchData3 * SOAP_FMAC2 soap_instantiate_ns1__BranchData3(struct soap*, int, const char*, const char*, size_t*);

inline ns1__BranchData3 * soap_new_ns1__BranchData3(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__BranchData3(soap, n, NULL, NULL, NULL);
}

inline ns1__BranchData3 * soap_new_req_ns1__BranchData3(
	struct soap *soap)
{
	ns1__BranchData3 *_p = ::soap_new_ns1__BranchData3(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__BranchData3 * soap_new_set_ns1__BranchData3(
	struct soap *soap,
	std::string *Id,
	std::string *LEI,
	std::string *Nm,
	ns1__PostalAddress24 *PstlAdr)
{
	ns1__BranchData3 *_p = ::soap_new_ns1__BranchData3(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BranchData3::Id = Id;
		_p->ns1__BranchData3::LEI = LEI;
		_p->ns1__BranchData3::Nm = Nm;
		_p->ns1__BranchData3::PstlAdr = PstlAdr;
	}
	return _p;
}

inline int soap_write_ns1__BranchData3(struct soap *soap, ns1__BranchData3 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BranchData3", p->soap_type() == SOAP_TYPE_ns1__BranchData3 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__BranchData3(struct soap *soap, const char *URL, ns1__BranchData3 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BranchData3", p->soap_type() == SOAP_TYPE_ns1__BranchData3 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__BranchData3(struct soap *soap, const char *URL, ns1__BranchData3 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BranchData3", p->soap_type() == SOAP_TYPE_ns1__BranchData3 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__BranchData3(struct soap *soap, const char *URL, ns1__BranchData3 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BranchData3", p->soap_type() == SOAP_TYPE_ns1__BranchData3 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__BranchData3 * SOAP_FMAC4 soap_get_ns1__BranchData3(struct soap*, ns1__BranchData3 *, const char*, const char*);

inline int soap_read_ns1__BranchData3(struct soap *soap, ns1__BranchData3 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__BranchData3(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__BranchData3(struct soap *soap, const char *URL, ns1__BranchData3 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__BranchData3(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__BranchData3(struct soap *soap, ns1__BranchData3 *p)
{
	if (::soap_read_ns1__BranchData3(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__BranchAndFinancialInstitutionIdentification6_DEFINED
#define SOAP_TYPE_ns1__BranchAndFinancialInstitutionIdentification6_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__BranchAndFinancialInstitutionIdentification6(struct soap*, const char*, int, const ns1__BranchAndFinancialInstitutionIdentification6 *, const char*);
SOAP_FMAC3 ns1__BranchAndFinancialInstitutionIdentification6 * SOAP_FMAC4 soap_in_ns1__BranchAndFinancialInstitutionIdentification6(struct soap*, const char*, ns1__BranchAndFinancialInstitutionIdentification6 *, const char*);
SOAP_FMAC1 ns1__BranchAndFinancialInstitutionIdentification6 * SOAP_FMAC2 soap_instantiate_ns1__BranchAndFinancialInstitutionIdentification6(struct soap*, int, const char*, const char*, size_t*);

inline ns1__BranchAndFinancialInstitutionIdentification6 * soap_new_ns1__BranchAndFinancialInstitutionIdentification6(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__BranchAndFinancialInstitutionIdentification6(soap, n, NULL, NULL, NULL);
}

inline ns1__BranchAndFinancialInstitutionIdentification6 * soap_new_req_ns1__BranchAndFinancialInstitutionIdentification6(
	struct soap *soap,
	ns1__FinancialInstitutionIdentification18 *FinInstnId)
{
	ns1__BranchAndFinancialInstitutionIdentification6 *_p = ::soap_new_ns1__BranchAndFinancialInstitutionIdentification6(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BranchAndFinancialInstitutionIdentification6::FinInstnId = FinInstnId;
	}
	return _p;
}

inline ns1__BranchAndFinancialInstitutionIdentification6 * soap_new_set_ns1__BranchAndFinancialInstitutionIdentification6(
	struct soap *soap,
	ns1__FinancialInstitutionIdentification18 *FinInstnId,
	ns1__BranchData3 *BrnchId)
{
	ns1__BranchAndFinancialInstitutionIdentification6 *_p = ::soap_new_ns1__BranchAndFinancialInstitutionIdentification6(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BranchAndFinancialInstitutionIdentification6::FinInstnId = FinInstnId;
		_p->ns1__BranchAndFinancialInstitutionIdentification6::BrnchId = BrnchId;
	}
	return _p;
}

inline int soap_write_ns1__BranchAndFinancialInstitutionIdentification6(struct soap *soap, ns1__BranchAndFinancialInstitutionIdentification6 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BranchAndFinancialInstitutionIdentification6", p->soap_type() == SOAP_TYPE_ns1__BranchAndFinancialInstitutionIdentification6 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__BranchAndFinancialInstitutionIdentification6(struct soap *soap, const char *URL, ns1__BranchAndFinancialInstitutionIdentification6 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BranchAndFinancialInstitutionIdentification6", p->soap_type() == SOAP_TYPE_ns1__BranchAndFinancialInstitutionIdentification6 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__BranchAndFinancialInstitutionIdentification6(struct soap *soap, const char *URL, ns1__BranchAndFinancialInstitutionIdentification6 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BranchAndFinancialInstitutionIdentification6", p->soap_type() == SOAP_TYPE_ns1__BranchAndFinancialInstitutionIdentification6 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__BranchAndFinancialInstitutionIdentification6(struct soap *soap, const char *URL, ns1__BranchAndFinancialInstitutionIdentification6 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BranchAndFinancialInstitutionIdentification6", p->soap_type() == SOAP_TYPE_ns1__BranchAndFinancialInstitutionIdentification6 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__BranchAndFinancialInstitutionIdentification6 * SOAP_FMAC4 soap_get_ns1__BranchAndFinancialInstitutionIdentification6(struct soap*, ns1__BranchAndFinancialInstitutionIdentification6 *, const char*, const char*);

inline int soap_read_ns1__BranchAndFinancialInstitutionIdentification6(struct soap *soap, ns1__BranchAndFinancialInstitutionIdentification6 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__BranchAndFinancialInstitutionIdentification6(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__BranchAndFinancialInstitutionIdentification6(struct soap *soap, const char *URL, ns1__BranchAndFinancialInstitutionIdentification6 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__BranchAndFinancialInstitutionIdentification6(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__BranchAndFinancialInstitutionIdentification6(struct soap *soap, ns1__BranchAndFinancialInstitutionIdentification6 *p)
{
	if (::soap_read_ns1__BranchAndFinancialInstitutionIdentification6(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__Authorisation1Choice_DEFINED
#define SOAP_TYPE_ns1__Authorisation1Choice_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Authorisation1Choice(struct soap*, const char*, int, const ns1__Authorisation1Choice *, const char*);
SOAP_FMAC3 ns1__Authorisation1Choice * SOAP_FMAC4 soap_in_ns1__Authorisation1Choice(struct soap*, const char*, ns1__Authorisation1Choice *, const char*);
SOAP_FMAC1 ns1__Authorisation1Choice * SOAP_FMAC2 soap_instantiate_ns1__Authorisation1Choice(struct soap*, int, const char*, const char*, size_t*);

inline ns1__Authorisation1Choice * soap_new_ns1__Authorisation1Choice(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__Authorisation1Choice(soap, n, NULL, NULL, NULL);
}

inline ns1__Authorisation1Choice * soap_new_req_ns1__Authorisation1Choice(
	struct soap *soap,
	const union _ns1__union_Authorisation1Choice& union_Authorisation1Choice)
{
	ns1__Authorisation1Choice *_p = ::soap_new_ns1__Authorisation1Choice(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__Authorisation1Choice::union_Authorisation1Choice = union_Authorisation1Choice;
	}
	return _p;
}

inline ns1__Authorisation1Choice * soap_new_set_ns1__Authorisation1Choice(
	struct soap *soap,
	int __union_Authorisation1Choice,
	const union _ns1__union_Authorisation1Choice& union_Authorisation1Choice)
{
	ns1__Authorisation1Choice *_p = ::soap_new_ns1__Authorisation1Choice(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__Authorisation1Choice::__union_Authorisation1Choice = __union_Authorisation1Choice;
		_p->ns1__Authorisation1Choice::union_Authorisation1Choice = union_Authorisation1Choice;
	}
	return _p;
}

inline int soap_write_ns1__Authorisation1Choice(struct soap *soap, ns1__Authorisation1Choice const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Authorisation1Choice", p->soap_type() == SOAP_TYPE_ns1__Authorisation1Choice ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__Authorisation1Choice(struct soap *soap, const char *URL, ns1__Authorisation1Choice const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Authorisation1Choice", p->soap_type() == SOAP_TYPE_ns1__Authorisation1Choice ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__Authorisation1Choice(struct soap *soap, const char *URL, ns1__Authorisation1Choice const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Authorisation1Choice", p->soap_type() == SOAP_TYPE_ns1__Authorisation1Choice ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__Authorisation1Choice(struct soap *soap, const char *URL, ns1__Authorisation1Choice const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Authorisation1Choice", p->soap_type() == SOAP_TYPE_ns1__Authorisation1Choice ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__Authorisation1Choice * SOAP_FMAC4 soap_get_ns1__Authorisation1Choice(struct soap*, ns1__Authorisation1Choice *, const char*, const char*);

inline int soap_read_ns1__Authorisation1Choice(struct soap *soap, ns1__Authorisation1Choice *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__Authorisation1Choice(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__Authorisation1Choice(struct soap *soap, const char *URL, ns1__Authorisation1Choice *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__Authorisation1Choice(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__Authorisation1Choice(struct soap *soap, ns1__Authorisation1Choice *p)
{
	if (::soap_read_ns1__Authorisation1Choice(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__AmountType4Choice_DEFINED
#define SOAP_TYPE_ns1__AmountType4Choice_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AmountType4Choice(struct soap*, const char*, int, const ns1__AmountType4Choice *, const char*);
SOAP_FMAC3 ns1__AmountType4Choice * SOAP_FMAC4 soap_in_ns1__AmountType4Choice(struct soap*, const char*, ns1__AmountType4Choice *, const char*);
SOAP_FMAC1 ns1__AmountType4Choice * SOAP_FMAC2 soap_instantiate_ns1__AmountType4Choice(struct soap*, int, const char*, const char*, size_t*);

inline ns1__AmountType4Choice * soap_new_ns1__AmountType4Choice(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__AmountType4Choice(soap, n, NULL, NULL, NULL);
}

inline ns1__AmountType4Choice * soap_new_req_ns1__AmountType4Choice(
	struct soap *soap,
	const union _ns1__union_AmountType4Choice& union_AmountType4Choice)
{
	ns1__AmountType4Choice *_p = ::soap_new_ns1__AmountType4Choice(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AmountType4Choice::union_AmountType4Choice = union_AmountType4Choice;
	}
	return _p;
}

inline ns1__AmountType4Choice * soap_new_set_ns1__AmountType4Choice(
	struct soap *soap,
	int __union_AmountType4Choice,
	const union _ns1__union_AmountType4Choice& union_AmountType4Choice)
{
	ns1__AmountType4Choice *_p = ::soap_new_ns1__AmountType4Choice(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AmountType4Choice::__union_AmountType4Choice = __union_AmountType4Choice;
		_p->ns1__AmountType4Choice::union_AmountType4Choice = union_AmountType4Choice;
	}
	return _p;
}

inline int soap_write_ns1__AmountType4Choice(struct soap *soap, ns1__AmountType4Choice const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AmountType4Choice", p->soap_type() == SOAP_TYPE_ns1__AmountType4Choice ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__AmountType4Choice(struct soap *soap, const char *URL, ns1__AmountType4Choice const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AmountType4Choice", p->soap_type() == SOAP_TYPE_ns1__AmountType4Choice ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__AmountType4Choice(struct soap *soap, const char *URL, ns1__AmountType4Choice const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AmountType4Choice", p->soap_type() == SOAP_TYPE_ns1__AmountType4Choice ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__AmountType4Choice(struct soap *soap, const char *URL, ns1__AmountType4Choice const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AmountType4Choice", p->soap_type() == SOAP_TYPE_ns1__AmountType4Choice ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__AmountType4Choice * SOAP_FMAC4 soap_get_ns1__AmountType4Choice(struct soap*, ns1__AmountType4Choice *, const char*, const char*);

inline int soap_read_ns1__AmountType4Choice(struct soap *soap, ns1__AmountType4Choice *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__AmountType4Choice(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__AmountType4Choice(struct soap *soap, const char *URL, ns1__AmountType4Choice *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__AmountType4Choice(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__AmountType4Choice(struct soap *soap, ns1__AmountType4Choice *p)
{
	if (::soap_read_ns1__AmountType4Choice(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__AdviceType1Choice_DEFINED
#define SOAP_TYPE_ns1__AdviceType1Choice_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AdviceType1Choice(struct soap*, const char*, int, const ns1__AdviceType1Choice *, const char*);
SOAP_FMAC3 ns1__AdviceType1Choice * SOAP_FMAC4 soap_in_ns1__AdviceType1Choice(struct soap*, const char*, ns1__AdviceType1Choice *, const char*);
SOAP_FMAC1 ns1__AdviceType1Choice * SOAP_FMAC2 soap_instantiate_ns1__AdviceType1Choice(struct soap*, int, const char*, const char*, size_t*);

inline ns1__AdviceType1Choice * soap_new_ns1__AdviceType1Choice(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__AdviceType1Choice(soap, n, NULL, NULL, NULL);
}

inline ns1__AdviceType1Choice * soap_new_req_ns1__AdviceType1Choice(
	struct soap *soap,
	const union _ns1__union_AdviceType1Choice& union_AdviceType1Choice)
{
	ns1__AdviceType1Choice *_p = ::soap_new_ns1__AdviceType1Choice(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AdviceType1Choice::union_AdviceType1Choice = union_AdviceType1Choice;
	}
	return _p;
}

inline ns1__AdviceType1Choice * soap_new_set_ns1__AdviceType1Choice(
	struct soap *soap,
	int __union_AdviceType1Choice,
	const union _ns1__union_AdviceType1Choice& union_AdviceType1Choice)
{
	ns1__AdviceType1Choice *_p = ::soap_new_ns1__AdviceType1Choice(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AdviceType1Choice::__union_AdviceType1Choice = __union_AdviceType1Choice;
		_p->ns1__AdviceType1Choice::union_AdviceType1Choice = union_AdviceType1Choice;
	}
	return _p;
}

inline int soap_write_ns1__AdviceType1Choice(struct soap *soap, ns1__AdviceType1Choice const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AdviceType1Choice", p->soap_type() == SOAP_TYPE_ns1__AdviceType1Choice ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__AdviceType1Choice(struct soap *soap, const char *URL, ns1__AdviceType1Choice const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AdviceType1Choice", p->soap_type() == SOAP_TYPE_ns1__AdviceType1Choice ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__AdviceType1Choice(struct soap *soap, const char *URL, ns1__AdviceType1Choice const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AdviceType1Choice", p->soap_type() == SOAP_TYPE_ns1__AdviceType1Choice ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__AdviceType1Choice(struct soap *soap, const char *URL, ns1__AdviceType1Choice const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AdviceType1Choice", p->soap_type() == SOAP_TYPE_ns1__AdviceType1Choice ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__AdviceType1Choice * SOAP_FMAC4 soap_get_ns1__AdviceType1Choice(struct soap*, ns1__AdviceType1Choice *, const char*, const char*);

inline int soap_read_ns1__AdviceType1Choice(struct soap *soap, ns1__AdviceType1Choice *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__AdviceType1Choice(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__AdviceType1Choice(struct soap *soap, const char *URL, ns1__AdviceType1Choice *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__AdviceType1Choice(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__AdviceType1Choice(struct soap *soap, ns1__AdviceType1Choice *p)
{
	if (::soap_read_ns1__AdviceType1Choice(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__AdviceType1_DEFINED
#define SOAP_TYPE_ns1__AdviceType1_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AdviceType1(struct soap*, const char*, int, const ns1__AdviceType1 *, const char*);
SOAP_FMAC3 ns1__AdviceType1 * SOAP_FMAC4 soap_in_ns1__AdviceType1(struct soap*, const char*, ns1__AdviceType1 *, const char*);
SOAP_FMAC1 ns1__AdviceType1 * SOAP_FMAC2 soap_instantiate_ns1__AdviceType1(struct soap*, int, const char*, const char*, size_t*);

inline ns1__AdviceType1 * soap_new_ns1__AdviceType1(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__AdviceType1(soap, n, NULL, NULL, NULL);
}

inline ns1__AdviceType1 * soap_new_req_ns1__AdviceType1(
	struct soap *soap)
{
	ns1__AdviceType1 *_p = ::soap_new_ns1__AdviceType1(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__AdviceType1 * soap_new_set_ns1__AdviceType1(
	struct soap *soap,
	ns1__AdviceType1Choice *CdtAdvc,
	ns1__AdviceType1Choice *DbtAdvc)
{
	ns1__AdviceType1 *_p = ::soap_new_ns1__AdviceType1(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AdviceType1::CdtAdvc = CdtAdvc;
		_p->ns1__AdviceType1::DbtAdvc = DbtAdvc;
	}
	return _p;
}

inline int soap_write_ns1__AdviceType1(struct soap *soap, ns1__AdviceType1 const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AdviceType1", p->soap_type() == SOAP_TYPE_ns1__AdviceType1 ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__AdviceType1(struct soap *soap, const char *URL, ns1__AdviceType1 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AdviceType1", p->soap_type() == SOAP_TYPE_ns1__AdviceType1 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__AdviceType1(struct soap *soap, const char *URL, ns1__AdviceType1 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AdviceType1", p->soap_type() == SOAP_TYPE_ns1__AdviceType1 ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__AdviceType1(struct soap *soap, const char *URL, ns1__AdviceType1 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AdviceType1", p->soap_type() == SOAP_TYPE_ns1__AdviceType1 ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__AdviceType1 * SOAP_FMAC4 soap_get_ns1__AdviceType1(struct soap*, ns1__AdviceType1 *, const char*, const char*);

inline int soap_read_ns1__AdviceType1(struct soap *soap, ns1__AdviceType1 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__AdviceType1(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__AdviceType1(struct soap *soap, const char *URL, ns1__AdviceType1 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__AdviceType1(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__AdviceType1(struct soap *soap, ns1__AdviceType1 *p)
{
	if (::soap_read_ns1__AdviceType1(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__AddressType3Choice_DEFINED
#define SOAP_TYPE_ns1__AddressType3Choice_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AddressType3Choice(struct soap*, const char*, int, const ns1__AddressType3Choice *, const char*);
SOAP_FMAC3 ns1__AddressType3Choice * SOAP_FMAC4 soap_in_ns1__AddressType3Choice(struct soap*, const char*, ns1__AddressType3Choice *, const char*);
SOAP_FMAC1 ns1__AddressType3Choice * SOAP_FMAC2 soap_instantiate_ns1__AddressType3Choice(struct soap*, int, const char*, const char*, size_t*);

inline ns1__AddressType3Choice * soap_new_ns1__AddressType3Choice(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__AddressType3Choice(soap, n, NULL, NULL, NULL);
}

inline ns1__AddressType3Choice * soap_new_req_ns1__AddressType3Choice(
	struct soap *soap,
	const union _ns1__union_AddressType3Choice& union_AddressType3Choice)
{
	ns1__AddressType3Choice *_p = ::soap_new_ns1__AddressType3Choice(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AddressType3Choice::union_AddressType3Choice = union_AddressType3Choice;
	}
	return _p;
}

inline ns1__AddressType3Choice * soap_new_set_ns1__AddressType3Choice(
	struct soap *soap,
	int __union_AddressType3Choice,
	const union _ns1__union_AddressType3Choice& union_AddressType3Choice)
{
	ns1__AddressType3Choice *_p = ::soap_new_ns1__AddressType3Choice(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AddressType3Choice::__union_AddressType3Choice = __union_AddressType3Choice;
		_p->ns1__AddressType3Choice::union_AddressType3Choice = union_AddressType3Choice;
	}
	return _p;
}

inline int soap_write_ns1__AddressType3Choice(struct soap *soap, ns1__AddressType3Choice const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AddressType3Choice", p->soap_type() == SOAP_TYPE_ns1__AddressType3Choice ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__AddressType3Choice(struct soap *soap, const char *URL, ns1__AddressType3Choice const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AddressType3Choice", p->soap_type() == SOAP_TYPE_ns1__AddressType3Choice ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__AddressType3Choice(struct soap *soap, const char *URL, ns1__AddressType3Choice const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AddressType3Choice", p->soap_type() == SOAP_TYPE_ns1__AddressType3Choice ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__AddressType3Choice(struct soap *soap, const char *URL, ns1__AddressType3Choice const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AddressType3Choice", p->soap_type() == SOAP_TYPE_ns1__AddressType3Choice ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__AddressType3Choice * SOAP_FMAC4 soap_get_ns1__AddressType3Choice(struct soap*, ns1__AddressType3Choice *, const char*, const char*);

inline int soap_read_ns1__AddressType3Choice(struct soap *soap, ns1__AddressType3Choice *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__AddressType3Choice(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__AddressType3Choice(struct soap *soap, const char *URL, ns1__AddressType3Choice *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__AddressType3Choice(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__AddressType3Choice(struct soap *soap, ns1__AddressType3Choice *p)
{
	if (::soap_read_ns1__AddressType3Choice(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__ActiveOrHistoricCurrencyAndAmount_DEFINED
#define SOAP_TYPE_ns1__ActiveOrHistoricCurrencyAndAmount_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ActiveOrHistoricCurrencyAndAmount(struct soap*, const char*, int, const ns1__ActiveOrHistoricCurrencyAndAmount *, const char*);
SOAP_FMAC3 ns1__ActiveOrHistoricCurrencyAndAmount * SOAP_FMAC4 soap_in_ns1__ActiveOrHistoricCurrencyAndAmount(struct soap*, const char*, ns1__ActiveOrHistoricCurrencyAndAmount *, const char*);
SOAP_FMAC1 ns1__ActiveOrHistoricCurrencyAndAmount * SOAP_FMAC2 soap_instantiate_ns1__ActiveOrHistoricCurrencyAndAmount(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ActiveOrHistoricCurrencyAndAmount * soap_new_ns1__ActiveOrHistoricCurrencyAndAmount(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ActiveOrHistoricCurrencyAndAmount(soap, n, NULL, NULL, NULL);
}

inline ns1__ActiveOrHistoricCurrencyAndAmount * soap_new_req_ns1__ActiveOrHistoricCurrencyAndAmount(
	struct soap *soap,
	const std::string& __item,
	const std::string& Ccy)
{
	ns1__ActiveOrHistoricCurrencyAndAmount *_p = ::soap_new_ns1__ActiveOrHistoricCurrencyAndAmount(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ActiveOrHistoricCurrencyAndAmount::__item = __item;
		_p->ns1__ActiveOrHistoricCurrencyAndAmount::Ccy = Ccy;
	}
	return _p;
}

inline ns1__ActiveOrHistoricCurrencyAndAmount * soap_new_set_ns1__ActiveOrHistoricCurrencyAndAmount(
	struct soap *soap,
	const std::string& __item,
	const std::string& Ccy)
{
	ns1__ActiveOrHistoricCurrencyAndAmount *_p = ::soap_new_ns1__ActiveOrHistoricCurrencyAndAmount(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ActiveOrHistoricCurrencyAndAmount::__item = __item;
		_p->ns1__ActiveOrHistoricCurrencyAndAmount::Ccy = Ccy;
	}
	return _p;
}

inline int soap_write_ns1__ActiveOrHistoricCurrencyAndAmount(struct soap *soap, ns1__ActiveOrHistoricCurrencyAndAmount const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ActiveOrHistoricCurrencyAndAmount", p->soap_type() == SOAP_TYPE_ns1__ActiveOrHistoricCurrencyAndAmount ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ActiveOrHistoricCurrencyAndAmount(struct soap *soap, const char *URL, ns1__ActiveOrHistoricCurrencyAndAmount const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ActiveOrHistoricCurrencyAndAmount", p->soap_type() == SOAP_TYPE_ns1__ActiveOrHistoricCurrencyAndAmount ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__ActiveOrHistoricCurrencyAndAmount(struct soap *soap, const char *URL, ns1__ActiveOrHistoricCurrencyAndAmount const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ActiveOrHistoricCurrencyAndAmount", p->soap_type() == SOAP_TYPE_ns1__ActiveOrHistoricCurrencyAndAmount ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ActiveOrHistoricCurrencyAndAmount(struct soap *soap, const char *URL, ns1__ActiveOrHistoricCurrencyAndAmount const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ActiveOrHistoricCurrencyAndAmount", p->soap_type() == SOAP_TYPE_ns1__ActiveOrHistoricCurrencyAndAmount ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ActiveOrHistoricCurrencyAndAmount * SOAP_FMAC4 soap_get_ns1__ActiveOrHistoricCurrencyAndAmount(struct soap*, ns1__ActiveOrHistoricCurrencyAndAmount *, const char*, const char*);

inline int soap_read_ns1__ActiveOrHistoricCurrencyAndAmount(struct soap *soap, ns1__ActiveOrHistoricCurrencyAndAmount *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__ActiveOrHistoricCurrencyAndAmount(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ActiveOrHistoricCurrencyAndAmount(struct soap *soap, const char *URL, ns1__ActiveOrHistoricCurrencyAndAmount *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ActiveOrHistoricCurrencyAndAmount(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__ActiveOrHistoricCurrencyAndAmount(struct soap *soap, ns1__ActiveOrHistoricCurrencyAndAmount *p)
{
	if (::soap_read_ns1__ActiveOrHistoricCurrencyAndAmount(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__AccountSchemeName1Choice_DEFINED
#define SOAP_TYPE_ns1__AccountSchemeName1Choice_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AccountSchemeName1Choice(struct soap*, const char*, int, const ns1__AccountSchemeName1Choice *, const char*);
SOAP_FMAC3 ns1__AccountSchemeName1Choice * SOAP_FMAC4 soap_in_ns1__AccountSchemeName1Choice(struct soap*, const char*, ns1__AccountSchemeName1Choice *, const char*);
SOAP_FMAC1 ns1__AccountSchemeName1Choice * SOAP_FMAC2 soap_instantiate_ns1__AccountSchemeName1Choice(struct soap*, int, const char*, const char*, size_t*);

inline ns1__AccountSchemeName1Choice * soap_new_ns1__AccountSchemeName1Choice(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__AccountSchemeName1Choice(soap, n, NULL, NULL, NULL);
}

inline ns1__AccountSchemeName1Choice * soap_new_req_ns1__AccountSchemeName1Choice(
	struct soap *soap,
	const union _ns1__union_AccountSchemeName1Choice& union_AccountSchemeName1Choice)
{
	ns1__AccountSchemeName1Choice *_p = ::soap_new_ns1__AccountSchemeName1Choice(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AccountSchemeName1Choice::union_AccountSchemeName1Choice = union_AccountSchemeName1Choice;
	}
	return _p;
}

inline ns1__AccountSchemeName1Choice * soap_new_set_ns1__AccountSchemeName1Choice(
	struct soap *soap,
	int __union_AccountSchemeName1Choice,
	const union _ns1__union_AccountSchemeName1Choice& union_AccountSchemeName1Choice)
{
	ns1__AccountSchemeName1Choice *_p = ::soap_new_ns1__AccountSchemeName1Choice(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AccountSchemeName1Choice::__union_AccountSchemeName1Choice = __union_AccountSchemeName1Choice;
		_p->ns1__AccountSchemeName1Choice::union_AccountSchemeName1Choice = union_AccountSchemeName1Choice;
	}
	return _p;
}

inline int soap_write_ns1__AccountSchemeName1Choice(struct soap *soap, ns1__AccountSchemeName1Choice const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AccountSchemeName1Choice", p->soap_type() == SOAP_TYPE_ns1__AccountSchemeName1Choice ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__AccountSchemeName1Choice(struct soap *soap, const char *URL, ns1__AccountSchemeName1Choice const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AccountSchemeName1Choice", p->soap_type() == SOAP_TYPE_ns1__AccountSchemeName1Choice ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__AccountSchemeName1Choice(struct soap *soap, const char *URL, ns1__AccountSchemeName1Choice const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AccountSchemeName1Choice", p->soap_type() == SOAP_TYPE_ns1__AccountSchemeName1Choice ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__AccountSchemeName1Choice(struct soap *soap, const char *URL, ns1__AccountSchemeName1Choice const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AccountSchemeName1Choice", p->soap_type() == SOAP_TYPE_ns1__AccountSchemeName1Choice ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__AccountSchemeName1Choice * SOAP_FMAC4 soap_get_ns1__AccountSchemeName1Choice(struct soap*, ns1__AccountSchemeName1Choice *, const char*, const char*);

inline int soap_read_ns1__AccountSchemeName1Choice(struct soap *soap, ns1__AccountSchemeName1Choice *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__AccountSchemeName1Choice(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__AccountSchemeName1Choice(struct soap *soap, const char *URL, ns1__AccountSchemeName1Choice *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__AccountSchemeName1Choice(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__AccountSchemeName1Choice(struct soap *soap, ns1__AccountSchemeName1Choice *p)
{
	if (::soap_read_ns1__AccountSchemeName1Choice(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns1__AccountIdentification4Choice_DEFINED
#define SOAP_TYPE_ns1__AccountIdentification4Choice_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AccountIdentification4Choice(struct soap*, const char*, int, const ns1__AccountIdentification4Choice *, const char*);
SOAP_FMAC3 ns1__AccountIdentification4Choice * SOAP_FMAC4 soap_in_ns1__AccountIdentification4Choice(struct soap*, const char*, ns1__AccountIdentification4Choice *, const char*);
SOAP_FMAC1 ns1__AccountIdentification4Choice * SOAP_FMAC2 soap_instantiate_ns1__AccountIdentification4Choice(struct soap*, int, const char*, const char*, size_t*);

inline ns1__AccountIdentification4Choice * soap_new_ns1__AccountIdentification4Choice(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__AccountIdentification4Choice(soap, n, NULL, NULL, NULL);
}

inline ns1__AccountIdentification4Choice * soap_new_req_ns1__AccountIdentification4Choice(
	struct soap *soap,
	const union _ns1__union_AccountIdentification4Choice& union_AccountIdentification4Choice)
{
	ns1__AccountIdentification4Choice *_p = ::soap_new_ns1__AccountIdentification4Choice(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AccountIdentification4Choice::union_AccountIdentification4Choice = union_AccountIdentification4Choice;
	}
	return _p;
}

inline ns1__AccountIdentification4Choice * soap_new_set_ns1__AccountIdentification4Choice(
	struct soap *soap,
	int __union_AccountIdentification4Choice,
	const union _ns1__union_AccountIdentification4Choice& union_AccountIdentification4Choice)
{
	ns1__AccountIdentification4Choice *_p = ::soap_new_ns1__AccountIdentification4Choice(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AccountIdentification4Choice::__union_AccountIdentification4Choice = __union_AccountIdentification4Choice;
		_p->ns1__AccountIdentification4Choice::union_AccountIdentification4Choice = union_AccountIdentification4Choice;
	}
	return _p;
}

inline int soap_write_ns1__AccountIdentification4Choice(struct soap *soap, ns1__AccountIdentification4Choice const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AccountIdentification4Choice", p->soap_type() == SOAP_TYPE_ns1__AccountIdentification4Choice ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__AccountIdentification4Choice(struct soap *soap, const char *URL, ns1__AccountIdentification4Choice const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AccountIdentification4Choice", p->soap_type() == SOAP_TYPE_ns1__AccountIdentification4Choice ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns1__AccountIdentification4Choice(struct soap *soap, const char *URL, ns1__AccountIdentification4Choice const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AccountIdentification4Choice", p->soap_type() == SOAP_TYPE_ns1__AccountIdentification4Choice ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__AccountIdentification4Choice(struct soap *soap, const char *URL, ns1__AccountIdentification4Choice const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AccountIdentification4Choice", p->soap_type() == SOAP_TYPE_ns1__AccountIdentification4Choice ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__AccountIdentification4Choice * SOAP_FMAC4 soap_get_ns1__AccountIdentification4Choice(struct soap*, ns1__AccountIdentification4Choice *, const char*, const char*);

inline int soap_read_ns1__AccountIdentification4Choice(struct soap *soap, ns1__AccountIdentification4Choice *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__AccountIdentification4Choice(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__AccountIdentification4Choice(struct soap *soap, const char *URL, ns1__AccountIdentification4Choice *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__AccountIdentification4Choice(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns1__AccountIdentification4Choice(struct soap *soap, ns1__AccountIdentification4Choice *p)
{
	if (::soap_read_ns1__AccountIdentification4Choice(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__gYear_DEFINED
#define SOAP_TYPE_xsd__gYear_DEFINED

inline void soap_default_xsd__gYear(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__gYear(struct soap*, const std::string *);

#define soap_xsd__gYear2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__gYear(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__gYear(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, "([-+]?\\d{4,})(Z|[-+]\\d{2}:\\d{2})?")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__gYear(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__gYear soap_instantiate_std__string


#define soap_new_xsd__gYear soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__gYear(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__gYear(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__gYear(soap, p, "xsd:gYear", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__gYear(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__gYear(soap, p, "xsd:gYear", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__gYear(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__gYear(soap, p, "xsd:gYear", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__gYear(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__gYear(soap, p, "xsd:gYear", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__gYear(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__gYear(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__gYear(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__gYear(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__gYear(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__gYear(struct soap *soap, std::string *p)
{
	if (::soap_read_xsd__gYear(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__decimal_DEFINED
#define SOAP_TYPE_xsd__decimal_DEFINED

inline void soap_default_xsd__decimal(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__decimal(struct soap*, const std::string *);

#define soap_xsd__decimal2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__decimal(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__decimal(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, "[-+]?(\\d+|\\d*\\.\\d*)")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__decimal(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__decimal soap_instantiate_std__string


#define soap_new_xsd__decimal soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__decimal(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__decimal(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__decimal(soap, p, "xsd:decimal", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__decimal(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__decimal(soap, p, "xsd:decimal", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__decimal(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__decimal(soap, p, "xsd:decimal", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__decimal(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__decimal(soap, p, "xsd:decimal", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__decimal(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__decimal(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__decimal(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__decimal(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__decimal(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__decimal(struct soap *soap, std::string *p)
{
	if (::soap_read_xsd__decimal(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__date_DEFINED
#define SOAP_TYPE_xsd__date_DEFINED

inline void soap_default_xsd__date(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__date(struct soap*, const std::string *);

#define soap_xsd__date2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__date(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__date(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, "[-+]?\\d{4,}-\\d{2}-\\d{2}(Z|[-+]\\d{2}:\\d{2})?")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__date(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__date soap_instantiate_std__string


#define soap_new_xsd__date soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__date(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__date(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__date(soap, p, "xsd:date", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__date(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__date(soap, p, "xsd:date", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__date(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__date(soap, p, "xsd:date", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__date(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__date(soap, p, "xsd:date", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__date(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__date(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__date(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__date(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__date(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__date(struct soap *soap, std::string *p)
{
	if (::soap_read_xsd__date(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_std__string_DEFINED
#define SOAP_TYPE_std__string_DEFINED

inline void soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);

#define soap_std__string2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2std__string(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);
SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

inline std::string * soap_new_req_std__string(
	struct soap *soap)
{
	std::string *_p = ::soap_new_std__string(soap);
	if (_p)
	{	::soap_default_std__string(soap, _p);
	}
	return _p;
}

inline std::string * soap_new_set_std__string(
	struct soap *soap)
{
	std::string *_p = ::soap_new_std__string(soap);
	if (_p)
	{	::soap_default_std__string(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_std__string(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

inline int soap_read_std__string(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_std__string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_std__string(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_std__string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_std__string(struct soap *soap, std::string *p)
{
	if (::soap_read_std__string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__base64Binary_DEFINED
#define SOAP_TYPE_xsd__base64Binary_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary(struct soap*, const char*, int, const xsd__base64Binary *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_xsd__base64Binary2s(struct soap*, xsd__base64Binary);
SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_in_xsd__base64Binary(struct soap*, const char*, xsd__base64Binary *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2xsd__base64Binary(struct soap*, const char*, xsd__base64Binary *);
SOAP_FMAC1 xsd__base64Binary * SOAP_FMAC2 soap_instantiate_xsd__base64Binary(struct soap*, int, const char*, const char*, size_t*);

inline xsd__base64Binary * soap_new_xsd__base64Binary(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__base64Binary(soap, n, NULL, NULL, NULL);
}

inline xsd__base64Binary * soap_new_req_xsd__base64Binary(
	struct soap *soap)
{
	xsd__base64Binary *_p = ::soap_new_xsd__base64Binary(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline xsd__base64Binary * soap_new_set_xsd__base64Binary(
	struct soap *soap,
	unsigned char *__ptr,
	int __size,
	char *id,
	char *type,
	char *options)
{
	xsd__base64Binary *_p = ::soap_new_xsd__base64Binary(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__base64Binary::__ptr = __ptr;
		_p->xsd__base64Binary::__size = __size;
		_p->xsd__base64Binary::id = id;
		_p->xsd__base64Binary::type = type;
		_p->xsd__base64Binary::options = options;
	}
	return _p;
}

inline int soap_write_xsd__base64Binary(struct soap *soap, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__base64Binary(struct soap *soap, const char *URL, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__base64Binary(struct soap *soap, const char *URL, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__base64Binary(struct soap *soap, const char *URL, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_get_xsd__base64Binary(struct soap*, xsd__base64Binary *, const char*, const char*);

inline int soap_read_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_xsd__base64Binary(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__base64Binary(struct soap *soap, const char *URL, xsd__base64Binary *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__base64Binary(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p)
{
	if (::soap_read_xsd__base64Binary(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Fault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (::soap_read_SOAP_ENV__Fault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Reason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (::soap_read_SOAP_ENV__Reason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	char *__any,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__any = __any;
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Detail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (::soap_read_SOAP_ENV__Detail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (::soap_read_SOAP_ENV__Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Header(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (::soap_read_SOAP_ENV__Header(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef SOAP_TYPE__ns1__union_TaxAmountType1Choice_DEFINED
#define SOAP_TYPE__ns1__union_TaxAmountType1Choice_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__ns1__union_TaxAmountType1Choice(struct soap*, int, const union _ns1__union_TaxAmountType1Choice *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__union_TaxAmountType1Choice(struct soap*, int, const union _ns1__union_TaxAmountType1Choice *);
SOAP_FMAC3 union _ns1__union_TaxAmountType1Choice * SOAP_FMAC4 soap_in__ns1__union_TaxAmountType1Choice(struct soap*, int*, union _ns1__union_TaxAmountType1Choice *);
#endif

#ifndef SOAP_TYPE__ns1__union_ServiceLevel8Choice_DEFINED
#define SOAP_TYPE__ns1__union_ServiceLevel8Choice_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__ns1__union_ServiceLevel8Choice(struct soap*, int, const union _ns1__union_ServiceLevel8Choice *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__union_ServiceLevel8Choice(struct soap*, int, const union _ns1__union_ServiceLevel8Choice *);
SOAP_FMAC3 union _ns1__union_ServiceLevel8Choice * SOAP_FMAC4 soap_in__ns1__union_ServiceLevel8Choice(struct soap*, int*, union _ns1__union_ServiceLevel8Choice *);
#endif

#ifndef SOAP_TYPE__ns1__union_ReferredDocumentType3Choice_DEFINED
#define SOAP_TYPE__ns1__union_ReferredDocumentType3Choice_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__ns1__union_ReferredDocumentType3Choice(struct soap*, int, const union _ns1__union_ReferredDocumentType3Choice *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__union_ReferredDocumentType3Choice(struct soap*, int, const union _ns1__union_ReferredDocumentType3Choice *);
SOAP_FMAC3 union _ns1__union_ReferredDocumentType3Choice * SOAP_FMAC4 soap_in__ns1__union_ReferredDocumentType3Choice(struct soap*, int*, union _ns1__union_ReferredDocumentType3Choice *);
#endif

#ifndef SOAP_TYPE__ns1__union_Purpose2Choice_DEFINED
#define SOAP_TYPE__ns1__union_Purpose2Choice_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__ns1__union_Purpose2Choice(struct soap*, int, const union _ns1__union_Purpose2Choice *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__union_Purpose2Choice(struct soap*, int, const union _ns1__union_Purpose2Choice *);
SOAP_FMAC3 union _ns1__union_Purpose2Choice * SOAP_FMAC4 soap_in__ns1__union_Purpose2Choice(struct soap*, int*, union _ns1__union_Purpose2Choice *);
#endif

#ifndef SOAP_TYPE__ns1__union_ProxyAccountType1Choice_DEFINED
#define SOAP_TYPE__ns1__union_ProxyAccountType1Choice_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__ns1__union_ProxyAccountType1Choice(struct soap*, int, const union _ns1__union_ProxyAccountType1Choice *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__union_ProxyAccountType1Choice(struct soap*, int, const union _ns1__union_ProxyAccountType1Choice *);
SOAP_FMAC3 union _ns1__union_ProxyAccountType1Choice * SOAP_FMAC4 soap_in__ns1__union_ProxyAccountType1Choice(struct soap*, int*, union _ns1__union_ProxyAccountType1Choice *);
#endif

#ifndef SOAP_TYPE__ns1__union_PersonIdentificationSchemeName1Choice_DEFINED
#define SOAP_TYPE__ns1__union_PersonIdentificationSchemeName1Choice_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__ns1__union_PersonIdentificationSchemeName1Choice(struct soap*, int, const union _ns1__union_PersonIdentificationSchemeName1Choice *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__union_PersonIdentificationSchemeName1Choice(struct soap*, int, const union _ns1__union_PersonIdentificationSchemeName1Choice *);
SOAP_FMAC3 union _ns1__union_PersonIdentificationSchemeName1Choice * SOAP_FMAC4 soap_in__ns1__union_PersonIdentificationSchemeName1Choice(struct soap*, int*, union _ns1__union_PersonIdentificationSchemeName1Choice *);
#endif

#ifndef SOAP_TYPE__ns1__union_Party38Choice_DEFINED
#define SOAP_TYPE__ns1__union_Party38Choice_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__ns1__union_Party38Choice(struct soap*, int, const union _ns1__union_Party38Choice *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__union_Party38Choice(struct soap*, int, const union _ns1__union_Party38Choice *);
SOAP_FMAC3 union _ns1__union_Party38Choice * SOAP_FMAC4 soap_in__ns1__union_Party38Choice(struct soap*, int*, union _ns1__union_Party38Choice *);
#endif

#ifndef SOAP_TYPE__ns1__union_OrganisationIdentificationSchemeName1Choice_DEFINED
#define SOAP_TYPE__ns1__union_OrganisationIdentificationSchemeName1Choice_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__ns1__union_OrganisationIdentificationSchemeName1Choice(struct soap*, int, const union _ns1__union_OrganisationIdentificationSchemeName1Choice *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__union_OrganisationIdentificationSchemeName1Choice(struct soap*, int, const union _ns1__union_OrganisationIdentificationSchemeName1Choice *);
SOAP_FMAC3 union _ns1__union_OrganisationIdentificationSchemeName1Choice * SOAP_FMAC4 soap_in__ns1__union_OrganisationIdentificationSchemeName1Choice(struct soap*, int*, union _ns1__union_OrganisationIdentificationSchemeName1Choice *);
#endif

#ifndef SOAP_TYPE__ns1__union_MandateSetupReason1Choice_DEFINED
#define SOAP_TYPE__ns1__union_MandateSetupReason1Choice_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__ns1__union_MandateSetupReason1Choice(struct soap*, int, const union _ns1__union_MandateSetupReason1Choice *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__union_MandateSetupReason1Choice(struct soap*, int, const union _ns1__union_MandateSetupReason1Choice *);
SOAP_FMAC3 union _ns1__union_MandateSetupReason1Choice * SOAP_FMAC4 soap_in__ns1__union_MandateSetupReason1Choice(struct soap*, int*, union _ns1__union_MandateSetupReason1Choice *);
#endif

#ifndef SOAP_TYPE__ns1__union_MandateClassification1Choice_DEFINED
#define SOAP_TYPE__ns1__union_MandateClassification1Choice_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__ns1__union_MandateClassification1Choice(struct soap*, int, const union _ns1__union_MandateClassification1Choice *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__union_MandateClassification1Choice(struct soap*, int, const union _ns1__union_MandateClassification1Choice *);
SOAP_FMAC3 union _ns1__union_MandateClassification1Choice * SOAP_FMAC4 soap_in__ns1__union_MandateClassification1Choice(struct soap*, int*, union _ns1__union_MandateClassification1Choice *);
#endif

#ifndef SOAP_TYPE__ns1__union_LocalInstrument2Choice_DEFINED
#define SOAP_TYPE__ns1__union_LocalInstrument2Choice_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__ns1__union_LocalInstrument2Choice(struct soap*, int, const union _ns1__union_LocalInstrument2Choice *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__union_LocalInstrument2Choice(struct soap*, int, const union _ns1__union_LocalInstrument2Choice *);
SOAP_FMAC3 union _ns1__union_LocalInstrument2Choice * SOAP_FMAC4 soap_in__ns1__union_LocalInstrument2Choice(struct soap*, int*, union _ns1__union_LocalInstrument2Choice *);
#endif

#ifndef SOAP_TYPE__ns1__union_GarnishmentType1Choice_DEFINED
#define SOAP_TYPE__ns1__union_GarnishmentType1Choice_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__ns1__union_GarnishmentType1Choice(struct soap*, int, const union _ns1__union_GarnishmentType1Choice *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__union_GarnishmentType1Choice(struct soap*, int, const union _ns1__union_GarnishmentType1Choice *);
SOAP_FMAC3 union _ns1__union_GarnishmentType1Choice * SOAP_FMAC4 soap_in__ns1__union_GarnishmentType1Choice(struct soap*, int*, union _ns1__union_GarnishmentType1Choice *);
#endif

#ifndef SOAP_TYPE__ns1__union_Frequency36Choice_DEFINED
#define SOAP_TYPE__ns1__union_Frequency36Choice_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__ns1__union_Frequency36Choice(struct soap*, int, const union _ns1__union_Frequency36Choice *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__union_Frequency36Choice(struct soap*, int, const union _ns1__union_Frequency36Choice *);
SOAP_FMAC3 union _ns1__union_Frequency36Choice * SOAP_FMAC4 soap_in__ns1__union_Frequency36Choice(struct soap*, int*, union _ns1__union_Frequency36Choice *);
#endif

#ifndef SOAP_TYPE__ns1__union_FinancialIdentificationSchemeName1Choice_DEFINED
#define SOAP_TYPE__ns1__union_FinancialIdentificationSchemeName1Choice_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__ns1__union_FinancialIdentificationSchemeName1Choice(struct soap*, int, const union _ns1__union_FinancialIdentificationSchemeName1Choice *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__union_FinancialIdentificationSchemeName1Choice(struct soap*, int, const union _ns1__union_FinancialIdentificationSchemeName1Choice *);
SOAP_FMAC3 union _ns1__union_FinancialIdentificationSchemeName1Choice * SOAP_FMAC4 soap_in__ns1__union_FinancialIdentificationSchemeName1Choice(struct soap*, int*, union _ns1__union_FinancialIdentificationSchemeName1Choice *);
#endif

#ifndef SOAP_TYPE__ns1__union_DocumentLineType1Choice_DEFINED
#define SOAP_TYPE__ns1__union_DocumentLineType1Choice_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__ns1__union_DocumentLineType1Choice(struct soap*, int, const union _ns1__union_DocumentLineType1Choice *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__union_DocumentLineType1Choice(struct soap*, int, const union _ns1__union_DocumentLineType1Choice *);
SOAP_FMAC3 union _ns1__union_DocumentLineType1Choice * SOAP_FMAC4 soap_in__ns1__union_DocumentLineType1Choice(struct soap*, int*, union _ns1__union_DocumentLineType1Choice *);
#endif

#ifndef SOAP_TYPE__ns1__union_DiscountAmountType1Choice_DEFINED
#define SOAP_TYPE__ns1__union_DiscountAmountType1Choice_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__ns1__union_DiscountAmountType1Choice(struct soap*, int, const union _ns1__union_DiscountAmountType1Choice *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__union_DiscountAmountType1Choice(struct soap*, int, const union _ns1__union_DiscountAmountType1Choice *);
SOAP_FMAC3 union _ns1__union_DiscountAmountType1Choice * SOAP_FMAC4 soap_in__ns1__union_DiscountAmountType1Choice(struct soap*, int*, union _ns1__union_DiscountAmountType1Choice *);
#endif

#ifndef SOAP_TYPE__ns1__union_DateAndDateTime2Choice_DEFINED
#define SOAP_TYPE__ns1__union_DateAndDateTime2Choice_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__ns1__union_DateAndDateTime2Choice(struct soap*, int, const union _ns1__union_DateAndDateTime2Choice *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__union_DateAndDateTime2Choice(struct soap*, int, const union _ns1__union_DateAndDateTime2Choice *);
SOAP_FMAC3 union _ns1__union_DateAndDateTime2Choice * SOAP_FMAC4 soap_in__ns1__union_DateAndDateTime2Choice(struct soap*, int*, union _ns1__union_DateAndDateTime2Choice *);
#endif

#ifndef SOAP_TYPE__ns1__union_CreditorReferenceType1Choice_DEFINED
#define SOAP_TYPE__ns1__union_CreditorReferenceType1Choice_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__ns1__union_CreditorReferenceType1Choice(struct soap*, int, const union _ns1__union_CreditorReferenceType1Choice *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__union_CreditorReferenceType1Choice(struct soap*, int, const union _ns1__union_CreditorReferenceType1Choice *);
SOAP_FMAC3 union _ns1__union_CreditorReferenceType1Choice * SOAP_FMAC4 soap_in__ns1__union_CreditorReferenceType1Choice(struct soap*, int*, union _ns1__union_CreditorReferenceType1Choice *);
#endif

#ifndef SOAP_TYPE__ns1__union_ClearingSystemIdentification2Choice_DEFINED
#define SOAP_TYPE__ns1__union_ClearingSystemIdentification2Choice_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__ns1__union_ClearingSystemIdentification2Choice(struct soap*, int, const union _ns1__union_ClearingSystemIdentification2Choice *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__union_ClearingSystemIdentification2Choice(struct soap*, int, const union _ns1__union_ClearingSystemIdentification2Choice *);
SOAP_FMAC3 union _ns1__union_ClearingSystemIdentification2Choice * SOAP_FMAC4 soap_in__ns1__union_ClearingSystemIdentification2Choice(struct soap*, int*, union _ns1__union_ClearingSystemIdentification2Choice *);
#endif

#ifndef SOAP_TYPE__ns1__union_ChequeDeliveryMethod1Choice_DEFINED
#define SOAP_TYPE__ns1__union_ChequeDeliveryMethod1Choice_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__ns1__union_ChequeDeliveryMethod1Choice(struct soap*, int, const union _ns1__union_ChequeDeliveryMethod1Choice *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__union_ChequeDeliveryMethod1Choice(struct soap*, int, const union _ns1__union_ChequeDeliveryMethod1Choice *);
SOAP_FMAC3 union _ns1__union_ChequeDeliveryMethod1Choice * SOAP_FMAC4 soap_in__ns1__union_ChequeDeliveryMethod1Choice(struct soap*, int*, union _ns1__union_ChequeDeliveryMethod1Choice *);
#endif

#ifndef SOAP_TYPE__ns1__union_CategoryPurpose1Choice_DEFINED
#define SOAP_TYPE__ns1__union_CategoryPurpose1Choice_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__ns1__union_CategoryPurpose1Choice(struct soap*, int, const union _ns1__union_CategoryPurpose1Choice *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__union_CategoryPurpose1Choice(struct soap*, int, const union _ns1__union_CategoryPurpose1Choice *);
SOAP_FMAC3 union _ns1__union_CategoryPurpose1Choice * SOAP_FMAC4 soap_in__ns1__union_CategoryPurpose1Choice(struct soap*, int*, union _ns1__union_CategoryPurpose1Choice *);
#endif

#ifndef SOAP_TYPE__ns1__union_CashAccountType2Choice_DEFINED
#define SOAP_TYPE__ns1__union_CashAccountType2Choice_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__ns1__union_CashAccountType2Choice(struct soap*, int, const union _ns1__union_CashAccountType2Choice *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__union_CashAccountType2Choice(struct soap*, int, const union _ns1__union_CashAccountType2Choice *);
SOAP_FMAC3 union _ns1__union_CashAccountType2Choice * SOAP_FMAC4 soap_in__ns1__union_CashAccountType2Choice(struct soap*, int*, union _ns1__union_CashAccountType2Choice *);
#endif

#ifndef SOAP_TYPE__ns1__union_Authorisation1Choice_DEFINED
#define SOAP_TYPE__ns1__union_Authorisation1Choice_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__ns1__union_Authorisation1Choice(struct soap*, int, const union _ns1__union_Authorisation1Choice *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__union_Authorisation1Choice(struct soap*, int, const union _ns1__union_Authorisation1Choice *);
SOAP_FMAC3 union _ns1__union_Authorisation1Choice * SOAP_FMAC4 soap_in__ns1__union_Authorisation1Choice(struct soap*, int*, union _ns1__union_Authorisation1Choice *);
#endif

#ifndef SOAP_TYPE__ns1__union_AmountType4Choice_DEFINED
#define SOAP_TYPE__ns1__union_AmountType4Choice_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__ns1__union_AmountType4Choice(struct soap*, int, const union _ns1__union_AmountType4Choice *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__union_AmountType4Choice(struct soap*, int, const union _ns1__union_AmountType4Choice *);
SOAP_FMAC3 union _ns1__union_AmountType4Choice * SOAP_FMAC4 soap_in__ns1__union_AmountType4Choice(struct soap*, int*, union _ns1__union_AmountType4Choice *);
#endif

#ifndef SOAP_TYPE__ns1__union_AdviceType1Choice_DEFINED
#define SOAP_TYPE__ns1__union_AdviceType1Choice_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__ns1__union_AdviceType1Choice(struct soap*, int, const union _ns1__union_AdviceType1Choice *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__union_AdviceType1Choice(struct soap*, int, const union _ns1__union_AdviceType1Choice *);
SOAP_FMAC3 union _ns1__union_AdviceType1Choice * SOAP_FMAC4 soap_in__ns1__union_AdviceType1Choice(struct soap*, int*, union _ns1__union_AdviceType1Choice *);
#endif

#ifndef SOAP_TYPE__ns1__union_AddressType3Choice_DEFINED
#define SOAP_TYPE__ns1__union_AddressType3Choice_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__ns1__union_AddressType3Choice(struct soap*, int, const union _ns1__union_AddressType3Choice *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__union_AddressType3Choice(struct soap*, int, const union _ns1__union_AddressType3Choice *);
SOAP_FMAC3 union _ns1__union_AddressType3Choice * SOAP_FMAC4 soap_in__ns1__union_AddressType3Choice(struct soap*, int*, union _ns1__union_AddressType3Choice *);
#endif

#ifndef SOAP_TYPE__ns1__union_AccountSchemeName1Choice_DEFINED
#define SOAP_TYPE__ns1__union_AccountSchemeName1Choice_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__ns1__union_AccountSchemeName1Choice(struct soap*, int, const union _ns1__union_AccountSchemeName1Choice *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__union_AccountSchemeName1Choice(struct soap*, int, const union _ns1__union_AccountSchemeName1Choice *);
SOAP_FMAC3 union _ns1__union_AccountSchemeName1Choice * SOAP_FMAC4 soap_in__ns1__union_AccountSchemeName1Choice(struct soap*, int*, union _ns1__union_AccountSchemeName1Choice *);
#endif

#ifndef SOAP_TYPE__ns1__union_AccountIdentification4Choice_DEFINED
#define SOAP_TYPE__ns1__union_AccountIdentification4Choice_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__ns1__union_AccountIdentification4Choice(struct soap*, int, const union _ns1__union_AccountIdentification4Choice *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__union_AccountIdentification4Choice(struct soap*, int, const union _ns1__union_AccountIdentification4Choice *);
SOAP_FMAC3 union _ns1__union_AccountIdentification4Choice * SOAP_FMAC4 soap_in__ns1__union_AccountIdentification4Choice(struct soap*, int*, union _ns1__union_AccountIdentification4Choice *);
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerTons1__TaxAmount3_DEFINED
#define SOAP_TYPE_PointerTons1__TaxAmount3_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__TaxAmount3(struct soap*, ns1__TaxAmount3 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__TaxAmount3(struct soap*, const char *, int, ns1__TaxAmount3 *const*, const char *);
SOAP_FMAC3 ns1__TaxAmount3 ** SOAP_FMAC4 soap_in_PointerTons1__TaxAmount3(struct soap*, const char*, ns1__TaxAmount3 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__TaxAmount3(struct soap*, ns1__TaxAmount3 *const*, const char*, const char*);
SOAP_FMAC3 ns1__TaxAmount3 ** SOAP_FMAC4 soap_get_PointerTons1__TaxAmount3(struct soap*, ns1__TaxAmount3 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__TaxPeriod3_DEFINED
#define SOAP_TYPE_PointerTons1__TaxPeriod3_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__TaxPeriod3(struct soap*, ns1__TaxPeriod3 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__TaxPeriod3(struct soap*, const char *, int, ns1__TaxPeriod3 *const*, const char *);
SOAP_FMAC3 ns1__TaxPeriod3 ** SOAP_FMAC4 soap_in_PointerTons1__TaxPeriod3(struct soap*, const char*, ns1__TaxPeriod3 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__TaxPeriod3(struct soap*, ns1__TaxPeriod3 *const*, const char*, const char*);
SOAP_FMAC3 ns1__TaxPeriod3 ** SOAP_FMAC4 soap_get_PointerTons1__TaxPeriod3(struct soap*, ns1__TaxPeriod3 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__DatePeriod2_DEFINED
#define SOAP_TYPE_PointerTons1__DatePeriod2_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__DatePeriod2(struct soap*, ns1__DatePeriod2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__DatePeriod2(struct soap*, const char *, int, ns1__DatePeriod2 *const*, const char *);
SOAP_FMAC3 ns1__DatePeriod2 ** SOAP_FMAC4 soap_in_PointerTons1__DatePeriod2(struct soap*, const char*, ns1__DatePeriod2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__DatePeriod2(struct soap*, ns1__DatePeriod2 *const*, const char*, const char*);
SOAP_FMAC3 ns1__DatePeriod2 ** SOAP_FMAC4 soap_get_PointerTons1__DatePeriod2(struct soap*, ns1__DatePeriod2 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__TaxRecordPeriod1Code_DEFINED
#define SOAP_TYPE_PointerTons1__TaxRecordPeriod1Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__TaxRecordPeriod1Code(struct soap*, enum ns1__TaxRecordPeriod1Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__TaxRecordPeriod1Code(struct soap*, const char *, int, enum ns1__TaxRecordPeriod1Code *const*, const char *);
SOAP_FMAC3 enum ns1__TaxRecordPeriod1Code ** SOAP_FMAC4 soap_in_PointerTons1__TaxRecordPeriod1Code(struct soap*, const char*, enum ns1__TaxRecordPeriod1Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__TaxRecordPeriod1Code(struct soap*, enum ns1__TaxRecordPeriod1Code *const*, const char*, const char*);
SOAP_FMAC3 enum ns1__TaxRecordPeriod1Code ** SOAP_FMAC4 soap_get_PointerTons1__TaxRecordPeriod1Code(struct soap*, enum ns1__TaxRecordPeriod1Code **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ISOYear_DEFINED
#define SOAP_TYPE_PointerTons1__ISOYear_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ISOYear(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ISOYear(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons1__ISOYear(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ISOYear(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons1__ISOYear(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__TaxAuthorisation1_DEFINED
#define SOAP_TYPE_PointerTons1__TaxAuthorisation1_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__TaxAuthorisation1(struct soap*, ns1__TaxAuthorisation1 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__TaxAuthorisation1(struct soap*, const char *, int, ns1__TaxAuthorisation1 *const*, const char *);
SOAP_FMAC3 ns1__TaxAuthorisation1 ** SOAP_FMAC4 soap_in_PointerTons1__TaxAuthorisation1(struct soap*, const char*, ns1__TaxAuthorisation1 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__TaxAuthorisation1(struct soap*, ns1__TaxAuthorisation1 *const*, const char*, const char*);
SOAP_FMAC3 ns1__TaxAuthorisation1 ** SOAP_FMAC4 soap_get_PointerTons1__TaxAuthorisation1(struct soap*, ns1__TaxAuthorisation1 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__TaxRecord3_DEFINED
#define SOAP_TYPE_PointerTons1__TaxRecord3_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__TaxRecord3(struct soap*, ns1__TaxRecord3 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__TaxRecord3(struct soap*, const char *, int, ns1__TaxRecord3 *const*, const char *);
SOAP_FMAC3 ns1__TaxRecord3 ** SOAP_FMAC4 soap_in_PointerTons1__TaxRecord3(struct soap*, const char*, ns1__TaxRecord3 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__TaxRecord3(struct soap*, ns1__TaxRecord3 *const*, const char*, const char*);
SOAP_FMAC3 ns1__TaxRecord3 ** SOAP_FMAC4 soap_get_PointerTons1__TaxRecord3(struct soap*, ns1__TaxRecord3 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__Number_DEFINED
#define SOAP_TYPE_PointerTons1__Number_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Number(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Number(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons1__Number(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Number(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons1__Number(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__TaxParty2_DEFINED
#define SOAP_TYPE_PointerTons1__TaxParty2_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__TaxParty2(struct soap*, ns1__TaxParty2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__TaxParty2(struct soap*, const char *, int, ns1__TaxParty2 *const*, const char *);
SOAP_FMAC3 ns1__TaxParty2 ** SOAP_FMAC4 soap_in_PointerTons1__TaxParty2(struct soap*, const char*, ns1__TaxParty2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__TaxParty2(struct soap*, ns1__TaxParty2 *const*, const char*, const char*);
SOAP_FMAC3 ns1__TaxParty2 ** SOAP_FMAC4 soap_get_PointerTons1__TaxParty2(struct soap*, ns1__TaxParty2 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__TaxParty1_DEFINED
#define SOAP_TYPE_PointerTons1__TaxParty1_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__TaxParty1(struct soap*, ns1__TaxParty1 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__TaxParty1(struct soap*, const char *, int, ns1__TaxParty1 *const*, const char *);
SOAP_FMAC3 ns1__TaxParty1 ** SOAP_FMAC4 soap_in_PointerTons1__TaxParty1(struct soap*, const char*, ns1__TaxParty1 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__TaxParty1(struct soap*, ns1__TaxParty1 *const*, const char*, const char*);
SOAP_FMAC3 ns1__TaxParty1 ** SOAP_FMAC4 soap_get_PointerTons1__TaxParty1(struct soap*, ns1__TaxParty1 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ExternalTaxAmountType1Code_DEFINED
#define SOAP_TYPE_PointerTons1__ExternalTaxAmountType1Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ExternalTaxAmountType1Code(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ExternalTaxAmountType1Code(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons1__ExternalTaxAmountType1Code(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ExternalTaxAmountType1Code(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons1__ExternalTaxAmountType1Code(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__TaxAmountType1Choice_DEFINED
#define SOAP_TYPE_PointerTons1__TaxAmountType1Choice_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__TaxAmountType1Choice(struct soap*, ns1__TaxAmountType1Choice *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__TaxAmountType1Choice(struct soap*, const char *, int, ns1__TaxAmountType1Choice *const*, const char *);
SOAP_FMAC3 ns1__TaxAmountType1Choice ** SOAP_FMAC4 soap_in_PointerTons1__TaxAmountType1Choice(struct soap*, const char*, ns1__TaxAmountType1Choice **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__TaxAmountType1Choice(struct soap*, ns1__TaxAmountType1Choice *const*, const char*, const char*);
SOAP_FMAC3 ns1__TaxAmountType1Choice ** SOAP_FMAC4 soap_get_PointerTons1__TaxAmountType1Choice(struct soap*, ns1__TaxAmountType1Choice **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__TaxRecordDetails3_DEFINED
#define SOAP_TYPE_PointerTons1__TaxRecordDetails3_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__TaxRecordDetails3(struct soap*, ns1__TaxRecordDetails3 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__TaxRecordDetails3(struct soap*, const char *, int, ns1__TaxRecordDetails3 *const*, const char *);
SOAP_FMAC3 ns1__TaxRecordDetails3 ** SOAP_FMAC4 soap_in_PointerTons1__TaxRecordDetails3(struct soap*, const char*, ns1__TaxRecordDetails3 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__TaxRecordDetails3(struct soap*, ns1__TaxRecordDetails3 *const*, const char*, const char*);
SOAP_FMAC3 ns1__TaxRecordDetails3 ** SOAP_FMAC4 soap_get_PointerTons1__TaxRecordDetails3(struct soap*, ns1__TaxRecordDetails3 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__PercentageRate_DEFINED
#define SOAP_TYPE_PointerTons1__PercentageRate_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__PercentageRate(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__PercentageRate(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons1__PercentageRate(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__PercentageRate(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons1__PercentageRate(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SupplementaryDataEnvelope1_DEFINED
#define SOAP_TYPE_PointerTons1__SupplementaryDataEnvelope1_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SupplementaryDataEnvelope1(struct soap*, ns1__SupplementaryDataEnvelope1 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SupplementaryDataEnvelope1(struct soap*, const char *, int, ns1__SupplementaryDataEnvelope1 *const*, const char *);
SOAP_FMAC3 ns1__SupplementaryDataEnvelope1 ** SOAP_FMAC4 soap_in_PointerTons1__SupplementaryDataEnvelope1(struct soap*, const char*, ns1__SupplementaryDataEnvelope1 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SupplementaryDataEnvelope1(struct soap*, ns1__SupplementaryDataEnvelope1 *const*, const char*, const char*);
SOAP_FMAC3 ns1__SupplementaryDataEnvelope1 ** SOAP_FMAC4 soap_get_PointerTons1__SupplementaryDataEnvelope1(struct soap*, ns1__SupplementaryDataEnvelope1 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__Max350Text_DEFINED
#define SOAP_TYPE_PointerTons1__Max350Text_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Max350Text(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Max350Text(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons1__Max350Text(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Max350Text(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons1__Max350Text(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__Garnishment3_DEFINED
#define SOAP_TYPE_PointerTons1__Garnishment3_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Garnishment3(struct soap*, ns1__Garnishment3 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Garnishment3(struct soap*, const char *, int, ns1__Garnishment3 *const*, const char *);
SOAP_FMAC3 ns1__Garnishment3 ** SOAP_FMAC4 soap_in_PointerTons1__Garnishment3(struct soap*, const char*, ns1__Garnishment3 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Garnishment3(struct soap*, ns1__Garnishment3 *const*, const char*, const char*);
SOAP_FMAC3 ns1__Garnishment3 ** SOAP_FMAC4 soap_get_PointerTons1__Garnishment3(struct soap*, ns1__Garnishment3 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__TaxData1_DEFINED
#define SOAP_TYPE_PointerTons1__TaxData1_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__TaxData1(struct soap*, ns1__TaxData1 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__TaxData1(struct soap*, const char *, int, ns1__TaxData1 *const*, const char *);
SOAP_FMAC3 ns1__TaxData1 ** SOAP_FMAC4 soap_in_PointerTons1__TaxData1(struct soap*, const char*, ns1__TaxData1 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__TaxData1(struct soap*, ns1__TaxData1 *const*, const char*, const char*);
SOAP_FMAC3 ns1__TaxData1 ** SOAP_FMAC4 soap_get_PointerTons1__TaxData1(struct soap*, ns1__TaxData1 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__CreditorReferenceInformation2_DEFINED
#define SOAP_TYPE_PointerTons1__CreditorReferenceInformation2_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CreditorReferenceInformation2(struct soap*, ns1__CreditorReferenceInformation2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CreditorReferenceInformation2(struct soap*, const char *, int, ns1__CreditorReferenceInformation2 *const*, const char *);
SOAP_FMAC3 ns1__CreditorReferenceInformation2 ** SOAP_FMAC4 soap_in_PointerTons1__CreditorReferenceInformation2(struct soap*, const char*, ns1__CreditorReferenceInformation2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CreditorReferenceInformation2(struct soap*, ns1__CreditorReferenceInformation2 *const*, const char*, const char*);
SOAP_FMAC3 ns1__CreditorReferenceInformation2 ** SOAP_FMAC4 soap_get_PointerTons1__CreditorReferenceInformation2(struct soap*, ns1__CreditorReferenceInformation2 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__RemittanceAmount2_DEFINED
#define SOAP_TYPE_PointerTons1__RemittanceAmount2_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__RemittanceAmount2(struct soap*, ns1__RemittanceAmount2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__RemittanceAmount2(struct soap*, const char *, int, ns1__RemittanceAmount2 *const*, const char *);
SOAP_FMAC3 ns1__RemittanceAmount2 ** SOAP_FMAC4 soap_in_PointerTons1__RemittanceAmount2(struct soap*, const char*, ns1__RemittanceAmount2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__RemittanceAmount2(struct soap*, ns1__RemittanceAmount2 *const*, const char*, const char*);
SOAP_FMAC3 ns1__RemittanceAmount2 ** SOAP_FMAC4 soap_get_PointerTons1__RemittanceAmount2(struct soap*, ns1__RemittanceAmount2 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ReferredDocumentInformation7_DEFINED
#define SOAP_TYPE_PointerTons1__ReferredDocumentInformation7_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ReferredDocumentInformation7(struct soap*, ns1__ReferredDocumentInformation7 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ReferredDocumentInformation7(struct soap*, const char *, int, ns1__ReferredDocumentInformation7 *const*, const char *);
SOAP_FMAC3 ns1__ReferredDocumentInformation7 ** SOAP_FMAC4 soap_in_PointerTons1__ReferredDocumentInformation7(struct soap*, const char*, ns1__ReferredDocumentInformation7 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ReferredDocumentInformation7(struct soap*, ns1__ReferredDocumentInformation7 *const*, const char*, const char*);
SOAP_FMAC3 ns1__ReferredDocumentInformation7 ** SOAP_FMAC4 soap_get_PointerTons1__ReferredDocumentInformation7(struct soap*, ns1__ReferredDocumentInformation7 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__Max10Text_DEFINED
#define SOAP_TYPE_PointerTons1__Max10Text_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Max10Text(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Max10Text(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons1__Max10Text(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Max10Text(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons1__Max10Text(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ExternalServiceLevel1Code_DEFINED
#define SOAP_TYPE_PointerTons1__ExternalServiceLevel1Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ExternalServiceLevel1Code(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ExternalServiceLevel1Code(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons1__ExternalServiceLevel1Code(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ExternalServiceLevel1Code(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons1__ExternalServiceLevel1Code(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__RemittanceLocationData1_DEFINED
#define SOAP_TYPE_PointerTons1__RemittanceLocationData1_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__RemittanceLocationData1(struct soap*, ns1__RemittanceLocationData1 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__RemittanceLocationData1(struct soap*, const char *, int, ns1__RemittanceLocationData1 *const*, const char *);
SOAP_FMAC3 ns1__RemittanceLocationData1 ** SOAP_FMAC4 soap_in_PointerTons1__RemittanceLocationData1(struct soap*, const char*, ns1__RemittanceLocationData1 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__RemittanceLocationData1(struct soap*, ns1__RemittanceLocationData1 *const*, const char*, const char*);
SOAP_FMAC3 ns1__RemittanceLocationData1 ** SOAP_FMAC4 soap_get_PointerTons1__RemittanceLocationData1(struct soap*, ns1__RemittanceLocationData1 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__StructuredRemittanceInformation17_DEFINED
#define SOAP_TYPE_PointerTons1__StructuredRemittanceInformation17_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__StructuredRemittanceInformation17(struct soap*, ns1__StructuredRemittanceInformation17 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__StructuredRemittanceInformation17(struct soap*, const char *, int, ns1__StructuredRemittanceInformation17 *const*, const char *);
SOAP_FMAC3 ns1__StructuredRemittanceInformation17 ** SOAP_FMAC4 soap_in_PointerTons1__StructuredRemittanceInformation17(struct soap*, const char*, ns1__StructuredRemittanceInformation17 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__StructuredRemittanceInformation17(struct soap*, ns1__StructuredRemittanceInformation17 *const*, const char*, const char*);
SOAP_FMAC3 ns1__StructuredRemittanceInformation17 ** SOAP_FMAC4 soap_get_PointerTons1__StructuredRemittanceInformation17(struct soap*, ns1__StructuredRemittanceInformation17 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__DocumentAdjustment1_DEFINED
#define SOAP_TYPE_PointerTons1__DocumentAdjustment1_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__DocumentAdjustment1(struct soap*, ns1__DocumentAdjustment1 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__DocumentAdjustment1(struct soap*, const char *, int, ns1__DocumentAdjustment1 *const*, const char *);
SOAP_FMAC3 ns1__DocumentAdjustment1 ** SOAP_FMAC4 soap_in_PointerTons1__DocumentAdjustment1(struct soap*, const char*, ns1__DocumentAdjustment1 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__DocumentAdjustment1(struct soap*, ns1__DocumentAdjustment1 *const*, const char*, const char*);
SOAP_FMAC3 ns1__DocumentAdjustment1 ** SOAP_FMAC4 soap_get_PointerTons1__DocumentAdjustment1(struct soap*, ns1__DocumentAdjustment1 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__TaxAmountAndType1_DEFINED
#define SOAP_TYPE_PointerTons1__TaxAmountAndType1_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__TaxAmountAndType1(struct soap*, ns1__TaxAmountAndType1 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__TaxAmountAndType1(struct soap*, const char *, int, ns1__TaxAmountAndType1 *const*, const char *);
SOAP_FMAC3 ns1__TaxAmountAndType1 ** SOAP_FMAC4 soap_in_PointerTons1__TaxAmountAndType1(struct soap*, const char*, ns1__TaxAmountAndType1 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__TaxAmountAndType1(struct soap*, ns1__TaxAmountAndType1 *const*, const char*, const char*);
SOAP_FMAC3 ns1__TaxAmountAndType1 ** SOAP_FMAC4 soap_get_PointerTons1__TaxAmountAndType1(struct soap*, ns1__TaxAmountAndType1 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__DiscountAmountAndType1_DEFINED
#define SOAP_TYPE_PointerTons1__DiscountAmountAndType1_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__DiscountAmountAndType1(struct soap*, ns1__DiscountAmountAndType1 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__DiscountAmountAndType1(struct soap*, const char *, int, ns1__DiscountAmountAndType1 *const*, const char *);
SOAP_FMAC3 ns1__DiscountAmountAndType1 ** SOAP_FMAC4 soap_in_PointerTons1__DiscountAmountAndType1(struct soap*, const char*, ns1__DiscountAmountAndType1 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__DiscountAmountAndType1(struct soap*, ns1__DiscountAmountAndType1 *const*, const char*, const char*);
SOAP_FMAC3 ns1__DiscountAmountAndType1 ** SOAP_FMAC4 soap_get_PointerTons1__DiscountAmountAndType1(struct soap*, ns1__DiscountAmountAndType1 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__StructuredRegulatoryReporting3_DEFINED
#define SOAP_TYPE_PointerTons1__StructuredRegulatoryReporting3_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__StructuredRegulatoryReporting3(struct soap*, ns1__StructuredRegulatoryReporting3 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__StructuredRegulatoryReporting3(struct soap*, const char *, int, ns1__StructuredRegulatoryReporting3 *const*, const char *);
SOAP_FMAC3 ns1__StructuredRegulatoryReporting3 ** SOAP_FMAC4 soap_in_PointerTons1__StructuredRegulatoryReporting3(struct soap*, const char*, ns1__StructuredRegulatoryReporting3 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__StructuredRegulatoryReporting3(struct soap*, ns1__StructuredRegulatoryReporting3 *const*, const char*, const char*);
SOAP_FMAC3 ns1__StructuredRegulatoryReporting3 ** SOAP_FMAC4 soap_get_PointerTons1__StructuredRegulatoryReporting3(struct soap*, ns1__StructuredRegulatoryReporting3 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__RegulatoryAuthority2_DEFINED
#define SOAP_TYPE_PointerTons1__RegulatoryAuthority2_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__RegulatoryAuthority2(struct soap*, ns1__RegulatoryAuthority2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__RegulatoryAuthority2(struct soap*, const char *, int, ns1__RegulatoryAuthority2 *const*, const char *);
SOAP_FMAC3 ns1__RegulatoryAuthority2 ** SOAP_FMAC4 soap_in_PointerTons1__RegulatoryAuthority2(struct soap*, const char*, ns1__RegulatoryAuthority2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__RegulatoryAuthority2(struct soap*, ns1__RegulatoryAuthority2 *const*, const char*, const char*);
SOAP_FMAC3 ns1__RegulatoryAuthority2 ** SOAP_FMAC4 soap_get_PointerTons1__RegulatoryAuthority2(struct soap*, ns1__RegulatoryAuthority2 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__RegulatoryReportingType1Code_DEFINED
#define SOAP_TYPE_PointerTons1__RegulatoryReportingType1Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__RegulatoryReportingType1Code(struct soap*, enum ns1__RegulatoryReportingType1Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__RegulatoryReportingType1Code(struct soap*, const char *, int, enum ns1__RegulatoryReportingType1Code *const*, const char *);
SOAP_FMAC3 enum ns1__RegulatoryReportingType1Code ** SOAP_FMAC4 soap_in_PointerTons1__RegulatoryReportingType1Code(struct soap*, const char*, enum ns1__RegulatoryReportingType1Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__RegulatoryReportingType1Code(struct soap*, enum ns1__RegulatoryReportingType1Code *const*, const char*, const char*);
SOAP_FMAC3 enum ns1__RegulatoryReportingType1Code ** SOAP_FMAC4 soap_get_PointerTons1__RegulatoryReportingType1Code(struct soap*, enum ns1__RegulatoryReportingType1Code **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ReferredDocumentType3Choice_DEFINED
#define SOAP_TYPE_PointerTons1__ReferredDocumentType3Choice_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ReferredDocumentType3Choice(struct soap*, ns1__ReferredDocumentType3Choice *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ReferredDocumentType3Choice(struct soap*, const char *, int, ns1__ReferredDocumentType3Choice *const*, const char *);
SOAP_FMAC3 ns1__ReferredDocumentType3Choice ** SOAP_FMAC4 soap_in_PointerTons1__ReferredDocumentType3Choice(struct soap*, const char*, ns1__ReferredDocumentType3Choice **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ReferredDocumentType3Choice(struct soap*, ns1__ReferredDocumentType3Choice *const*, const char*, const char*);
SOAP_FMAC3 ns1__ReferredDocumentType3Choice ** SOAP_FMAC4 soap_get_PointerTons1__ReferredDocumentType3Choice(struct soap*, ns1__ReferredDocumentType3Choice **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__DocumentLineInformation1_DEFINED
#define SOAP_TYPE_PointerTons1__DocumentLineInformation1_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__DocumentLineInformation1(struct soap*, ns1__DocumentLineInformation1 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__DocumentLineInformation1(struct soap*, const char *, int, ns1__DocumentLineInformation1 *const*, const char *);
SOAP_FMAC3 ns1__DocumentLineInformation1 ** SOAP_FMAC4 soap_in_PointerTons1__DocumentLineInformation1(struct soap*, const char*, ns1__DocumentLineInformation1 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__DocumentLineInformation1(struct soap*, ns1__DocumentLineInformation1 *const*, const char*, const char*);
SOAP_FMAC3 ns1__DocumentLineInformation1 ** SOAP_FMAC4 soap_get_PointerTons1__DocumentLineInformation1(struct soap*, ns1__DocumentLineInformation1 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ReferredDocumentType4_DEFINED
#define SOAP_TYPE_PointerTons1__ReferredDocumentType4_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ReferredDocumentType4(struct soap*, ns1__ReferredDocumentType4 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ReferredDocumentType4(struct soap*, const char *, int, ns1__ReferredDocumentType4 *const*, const char *);
SOAP_FMAC3 ns1__ReferredDocumentType4 ** SOAP_FMAC4 soap_in_PointerTons1__ReferredDocumentType4(struct soap*, const char*, ns1__ReferredDocumentType4 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ReferredDocumentType4(struct soap*, ns1__ReferredDocumentType4 *const*, const char*, const char*);
SOAP_FMAC3 ns1__ReferredDocumentType4 ** SOAP_FMAC4 soap_get_PointerTons1__ReferredDocumentType4(struct soap*, ns1__ReferredDocumentType4 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ExternalPurpose1Code_DEFINED
#define SOAP_TYPE_PointerTons1__ExternalPurpose1Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ExternalPurpose1Code(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ExternalPurpose1Code(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons1__ExternalPurpose1Code(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ExternalPurpose1Code(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons1__ExternalPurpose1Code(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ExternalProxyAccountType1Code_DEFINED
#define SOAP_TYPE_PointerTons1__ExternalProxyAccountType1Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ExternalProxyAccountType1Code(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ExternalProxyAccountType1Code(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons1__ExternalProxyAccountType1Code(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ExternalProxyAccountType1Code(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons1__ExternalProxyAccountType1Code(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ProxyAccountType1Choice_DEFINED
#define SOAP_TYPE_PointerTons1__ProxyAccountType1Choice_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ProxyAccountType1Choice(struct soap*, ns1__ProxyAccountType1Choice *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ProxyAccountType1Choice(struct soap*, const char *, int, ns1__ProxyAccountType1Choice *const*, const char *);
SOAP_FMAC3 ns1__ProxyAccountType1Choice ** SOAP_FMAC4 soap_in_PointerTons1__ProxyAccountType1Choice(struct soap*, const char*, ns1__ProxyAccountType1Choice **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ProxyAccountType1Choice(struct soap*, ns1__ProxyAccountType1Choice *const*, const char*, const char*);
SOAP_FMAC3 ns1__ProxyAccountType1Choice ** SOAP_FMAC4 soap_get_PointerTons1__ProxyAccountType1Choice(struct soap*, ns1__ProxyAccountType1Choice **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__Max16Text_DEFINED
#define SOAP_TYPE_PointerTons1__Max16Text_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Max16Text(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Max16Text(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons1__Max16Text(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Max16Text(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons1__Max16Text(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__AddressType3Choice_DEFINED
#define SOAP_TYPE_PointerTons1__AddressType3Choice_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__AddressType3Choice(struct soap*, ns1__AddressType3Choice *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__AddressType3Choice(struct soap*, const char *, int, ns1__AddressType3Choice *const*, const char *);
SOAP_FMAC3 ns1__AddressType3Choice ** SOAP_FMAC4 soap_in_PointerTons1__AddressType3Choice(struct soap*, const char*, ns1__AddressType3Choice **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__AddressType3Choice(struct soap*, ns1__AddressType3Choice *const*, const char*, const char*);
SOAP_FMAC3 ns1__AddressType3Choice ** SOAP_FMAC4 soap_get_PointerTons1__AddressType3Choice(struct soap*, ns1__AddressType3Choice **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ExternalPersonIdentification1Code_DEFINED
#define SOAP_TYPE_PointerTons1__ExternalPersonIdentification1Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ExternalPersonIdentification1Code(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ExternalPersonIdentification1Code(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons1__ExternalPersonIdentification1Code(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ExternalPersonIdentification1Code(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons1__ExternalPersonIdentification1Code(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__GenericPersonIdentification1_DEFINED
#define SOAP_TYPE_PointerTons1__GenericPersonIdentification1_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__GenericPersonIdentification1(struct soap*, ns1__GenericPersonIdentification1 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__GenericPersonIdentification1(struct soap*, const char *, int, ns1__GenericPersonIdentification1 *const*, const char *);
SOAP_FMAC3 ns1__GenericPersonIdentification1 ** SOAP_FMAC4 soap_in_PointerTons1__GenericPersonIdentification1(struct soap*, const char*, ns1__GenericPersonIdentification1 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__GenericPersonIdentification1(struct soap*, ns1__GenericPersonIdentification1 *const*, const char*, const char*);
SOAP_FMAC3 ns1__GenericPersonIdentification1 ** SOAP_FMAC4 soap_get_PointerTons1__GenericPersonIdentification1(struct soap*, ns1__GenericPersonIdentification1 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__DateAndPlaceOfBirth1_DEFINED
#define SOAP_TYPE_PointerTons1__DateAndPlaceOfBirth1_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__DateAndPlaceOfBirth1(struct soap*, ns1__DateAndPlaceOfBirth1 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__DateAndPlaceOfBirth1(struct soap*, const char *, int, ns1__DateAndPlaceOfBirth1 *const*, const char *);
SOAP_FMAC3 ns1__DateAndPlaceOfBirth1 ** SOAP_FMAC4 soap_in_PointerTons1__DateAndPlaceOfBirth1(struct soap*, const char*, ns1__DateAndPlaceOfBirth1 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__DateAndPlaceOfBirth1(struct soap*, ns1__DateAndPlaceOfBirth1 *const*, const char*, const char*);
SOAP_FMAC3 ns1__DateAndPlaceOfBirth1 ** SOAP_FMAC4 soap_get_PointerTons1__DateAndPlaceOfBirth1(struct soap*, ns1__DateAndPlaceOfBirth1 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__CreditTransferTransaction54_DEFINED
#define SOAP_TYPE_PointerTons1__CreditTransferTransaction54_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CreditTransferTransaction54(struct soap*, ns1__CreditTransferTransaction54 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CreditTransferTransaction54(struct soap*, const char *, int, ns1__CreditTransferTransaction54 *const*, const char *);
SOAP_FMAC3 ns1__CreditTransferTransaction54 ** SOAP_FMAC4 soap_in_PointerTons1__CreditTransferTransaction54(struct soap*, const char*, ns1__CreditTransferTransaction54 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CreditTransferTransaction54(struct soap*, ns1__CreditTransferTransaction54 *const*, const char*, const char*);
SOAP_FMAC3 ns1__CreditTransferTransaction54 ** SOAP_FMAC4 soap_get_PointerTons1__CreditTransferTransaction54(struct soap*, ns1__CreditTransferTransaction54 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__DateAndDateTime2Choice_DEFINED
#define SOAP_TYPE_PointerTons1__DateAndDateTime2Choice_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__DateAndDateTime2Choice(struct soap*, ns1__DateAndDateTime2Choice *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__DateAndDateTime2Choice(struct soap*, const char *, int, ns1__DateAndDateTime2Choice *const*, const char *);
SOAP_FMAC3 ns1__DateAndDateTime2Choice ** SOAP_FMAC4 soap_in_PointerTons1__DateAndDateTime2Choice(struct soap*, const char*, ns1__DateAndDateTime2Choice **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__DateAndDateTime2Choice(struct soap*, ns1__DateAndDateTime2Choice *const*, const char*, const char*);
SOAP_FMAC3 ns1__DateAndDateTime2Choice ** SOAP_FMAC4 soap_get_PointerTons1__DateAndDateTime2Choice(struct soap*, ns1__DateAndDateTime2Choice **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__Max15NumericText_DEFINED
#define SOAP_TYPE_PointerTons1__Max15NumericText_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Max15NumericText(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Max15NumericText(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons1__Max15NumericText(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Max15NumericText(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons1__Max15NumericText(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__BatchBookingIndicator_DEFINED
#define SOAP_TYPE_PointerTons1__BatchBookingIndicator_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__BatchBookingIndicator(struct soap*, bool *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__BatchBookingIndicator(struct soap*, const char *, int, bool *const*, const char *);
SOAP_FMAC3 bool ** SOAP_FMAC4 soap_in_PointerTons1__BatchBookingIndicator(struct soap*, const char*, bool **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__BatchBookingIndicator(struct soap*, bool *const*, const char*, const char*);
SOAP_FMAC3 bool ** SOAP_FMAC4 soap_get_PointerTons1__BatchBookingIndicator(struct soap*, bool **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__AdviceType1_DEFINED
#define SOAP_TYPE_PointerTons1__AdviceType1_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__AdviceType1(struct soap*, ns1__AdviceType1 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__AdviceType1(struct soap*, const char *, int, ns1__AdviceType1 *const*, const char *);
SOAP_FMAC3 ns1__AdviceType1 ** SOAP_FMAC4 soap_in_PointerTons1__AdviceType1(struct soap*, const char*, ns1__AdviceType1 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__AdviceType1(struct soap*, ns1__AdviceType1 *const*, const char*, const char*);
SOAP_FMAC3 ns1__AdviceType1 ** SOAP_FMAC4 soap_get_PointerTons1__AdviceType1(struct soap*, ns1__AdviceType1 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__UUIDv4Identifier_DEFINED
#define SOAP_TYPE_PointerTons1__UUIDv4Identifier_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__UUIDv4Identifier(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__UUIDv4Identifier(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons1__UUIDv4Identifier(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__UUIDv4Identifier(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons1__UUIDv4Identifier(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__Contact4_DEFINED
#define SOAP_TYPE_PointerTons1__Contact4_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Contact4(struct soap*, ns1__Contact4 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Contact4(struct soap*, const char *, int, ns1__Contact4 *const*, const char *);
SOAP_FMAC3 ns1__Contact4 ** SOAP_FMAC4 soap_in_PointerTons1__Contact4(struct soap*, const char*, ns1__Contact4 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Contact4(struct soap*, ns1__Contact4 *const*, const char*, const char*);
SOAP_FMAC3 ns1__Contact4 ** SOAP_FMAC4 soap_get_PointerTons1__Contact4(struct soap*, ns1__Contact4 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__CountryCode_DEFINED
#define SOAP_TYPE_PointerTons1__CountryCode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CountryCode(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CountryCode(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons1__CountryCode(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CountryCode(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons1__CountryCode(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__Party38Choice_DEFINED
#define SOAP_TYPE_PointerTons1__Party38Choice_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Party38Choice(struct soap*, ns1__Party38Choice *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Party38Choice(struct soap*, const char *, int, ns1__Party38Choice *const*, const char *);
SOAP_FMAC3 ns1__Party38Choice ** SOAP_FMAC4 soap_in_PointerTons1__Party38Choice(struct soap*, const char*, ns1__Party38Choice **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Party38Choice(struct soap*, ns1__Party38Choice *const*, const char*, const char*);
SOAP_FMAC3 ns1__Party38Choice ** SOAP_FMAC4 soap_get_PointerTons1__Party38Choice(struct soap*, ns1__Party38Choice **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__PersonIdentification13_DEFINED
#define SOAP_TYPE_PointerTons1__PersonIdentification13_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__PersonIdentification13(struct soap*, ns1__PersonIdentification13 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__PersonIdentification13(struct soap*, const char *, int, ns1__PersonIdentification13 *const*, const char *);
SOAP_FMAC3 ns1__PersonIdentification13 ** SOAP_FMAC4 soap_in_PointerTons1__PersonIdentification13(struct soap*, const char*, ns1__PersonIdentification13 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__PersonIdentification13(struct soap*, ns1__PersonIdentification13 *const*, const char*, const char*);
SOAP_FMAC3 ns1__PersonIdentification13 ** SOAP_FMAC4 soap_get_PointerTons1__PersonIdentification13(struct soap*, ns1__PersonIdentification13 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__OrganisationIdentification29_DEFINED
#define SOAP_TYPE_PointerTons1__OrganisationIdentification29_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__OrganisationIdentification29(struct soap*, ns1__OrganisationIdentification29 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__OrganisationIdentification29(struct soap*, const char *, int, ns1__OrganisationIdentification29 *const*, const char *);
SOAP_FMAC3 ns1__OrganisationIdentification29 ** SOAP_FMAC4 soap_in_PointerTons1__OrganisationIdentification29(struct soap*, const char*, ns1__OrganisationIdentification29 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__OrganisationIdentification29(struct soap*, ns1__OrganisationIdentification29 *const*, const char*, const char*);
SOAP_FMAC3 ns1__OrganisationIdentification29 ** SOAP_FMAC4 soap_get_PointerTons1__OrganisationIdentification29(struct soap*, ns1__OrganisationIdentification29 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ExternalOrganisationIdentification1Code_DEFINED
#define SOAP_TYPE_PointerTons1__ExternalOrganisationIdentification1Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ExternalOrganisationIdentification1Code(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ExternalOrganisationIdentification1Code(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons1__ExternalOrganisationIdentification1Code(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ExternalOrganisationIdentification1Code(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons1__ExternalOrganisationIdentification1Code(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__GenericOrganisationIdentification1_DEFINED
#define SOAP_TYPE_PointerTons1__GenericOrganisationIdentification1_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__GenericOrganisationIdentification1(struct soap*, ns1__GenericOrganisationIdentification1 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__GenericOrganisationIdentification1(struct soap*, const char *, int, ns1__GenericOrganisationIdentification1 *const*, const char *);
SOAP_FMAC3 ns1__GenericOrganisationIdentification1 ** SOAP_FMAC4 soap_in_PointerTons1__GenericOrganisationIdentification1(struct soap*, const char*, ns1__GenericOrganisationIdentification1 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__GenericOrganisationIdentification1(struct soap*, ns1__GenericOrganisationIdentification1 *const*, const char*, const char*);
SOAP_FMAC3 ns1__GenericOrganisationIdentification1 ** SOAP_FMAC4 soap_get_PointerTons1__GenericOrganisationIdentification1(struct soap*, ns1__GenericOrganisationIdentification1 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__AnyBICDec2014Identifier_DEFINED
#define SOAP_TYPE_PointerTons1__AnyBICDec2014Identifier_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__AnyBICDec2014Identifier(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__AnyBICDec2014Identifier(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons1__AnyBICDec2014Identifier(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__AnyBICDec2014Identifier(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons1__AnyBICDec2014Identifier(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__MandateClassification1Choice_DEFINED
#define SOAP_TYPE_PointerTons1__MandateClassification1Choice_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__MandateClassification1Choice(struct soap*, ns1__MandateClassification1Choice *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__MandateClassification1Choice(struct soap*, const char *, int, ns1__MandateClassification1Choice *const*, const char *);
SOAP_FMAC3 ns1__MandateClassification1Choice ** SOAP_FMAC4 soap_in_PointerTons1__MandateClassification1Choice(struct soap*, const char*, ns1__MandateClassification1Choice **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__MandateClassification1Choice(struct soap*, ns1__MandateClassification1Choice *const*, const char*, const char*);
SOAP_FMAC3 ns1__MandateClassification1Choice ** SOAP_FMAC4 soap_get_PointerTons1__MandateClassification1Choice(struct soap*, ns1__MandateClassification1Choice **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__CategoryPurpose1Choice_DEFINED
#define SOAP_TYPE_PointerTons1__CategoryPurpose1Choice_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CategoryPurpose1Choice(struct soap*, ns1__CategoryPurpose1Choice *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CategoryPurpose1Choice(struct soap*, const char *, int, ns1__CategoryPurpose1Choice *const*, const char *);
SOAP_FMAC3 ns1__CategoryPurpose1Choice ** SOAP_FMAC4 soap_in_PointerTons1__CategoryPurpose1Choice(struct soap*, const char*, ns1__CategoryPurpose1Choice **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CategoryPurpose1Choice(struct soap*, ns1__CategoryPurpose1Choice *const*, const char*, const char*);
SOAP_FMAC3 ns1__CategoryPurpose1Choice ** SOAP_FMAC4 soap_get_PointerTons1__CategoryPurpose1Choice(struct soap*, ns1__CategoryPurpose1Choice **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__LocalInstrument2Choice_DEFINED
#define SOAP_TYPE_PointerTons1__LocalInstrument2Choice_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__LocalInstrument2Choice(struct soap*, ns1__LocalInstrument2Choice *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__LocalInstrument2Choice(struct soap*, const char *, int, ns1__LocalInstrument2Choice *const*, const char *);
SOAP_FMAC3 ns1__LocalInstrument2Choice ** SOAP_FMAC4 soap_in_PointerTons1__LocalInstrument2Choice(struct soap*, const char*, ns1__LocalInstrument2Choice **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__LocalInstrument2Choice(struct soap*, ns1__LocalInstrument2Choice *const*, const char*, const char*);
SOAP_FMAC3 ns1__LocalInstrument2Choice ** SOAP_FMAC4 soap_get_PointerTons1__LocalInstrument2Choice(struct soap*, ns1__LocalInstrument2Choice **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ServiceLevel8Choice_DEFINED
#define SOAP_TYPE_PointerTons1__ServiceLevel8Choice_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ServiceLevel8Choice(struct soap*, ns1__ServiceLevel8Choice *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ServiceLevel8Choice(struct soap*, const char *, int, ns1__ServiceLevel8Choice *const*, const char *);
SOAP_FMAC3 ns1__ServiceLevel8Choice ** SOAP_FMAC4 soap_in_PointerTons1__ServiceLevel8Choice(struct soap*, const char*, ns1__ServiceLevel8Choice **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ServiceLevel8Choice(struct soap*, ns1__ServiceLevel8Choice *const*, const char*, const char*);
SOAP_FMAC3 ns1__ServiceLevel8Choice ** SOAP_FMAC4 soap_get_PointerTons1__ServiceLevel8Choice(struct soap*, ns1__ServiceLevel8Choice **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ExternalMandateSetupReason1Code_DEFINED
#define SOAP_TYPE_PointerTons1__ExternalMandateSetupReason1Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ExternalMandateSetupReason1Code(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ExternalMandateSetupReason1Code(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons1__ExternalMandateSetupReason1Code(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ExternalMandateSetupReason1Code(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons1__ExternalMandateSetupReason1Code(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ExternalLocalInstrument1Code_DEFINED
#define SOAP_TYPE_PointerTons1__ExternalLocalInstrument1Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ExternalLocalInstrument1Code(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ExternalLocalInstrument1Code(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons1__ExternalLocalInstrument1Code(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ExternalLocalInstrument1Code(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons1__ExternalLocalInstrument1Code(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ExternalDebtorAgentInstruction1Code_DEFINED
#define SOAP_TYPE_PointerTons1__ExternalDebtorAgentInstruction1Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ExternalDebtorAgentInstruction1Code(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ExternalDebtorAgentInstruction1Code(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons1__ExternalDebtorAgentInstruction1Code(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ExternalDebtorAgentInstruction1Code(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons1__ExternalDebtorAgentInstruction1Code(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ExternalCreditorAgentInstruction1Code_DEFINED
#define SOAP_TYPE_PointerTons1__ExternalCreditorAgentInstruction1Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ExternalCreditorAgentInstruction1Code(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ExternalCreditorAgentInstruction1Code(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons1__ExternalCreditorAgentInstruction1Code(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ExternalCreditorAgentInstruction1Code(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons1__ExternalCreditorAgentInstruction1Code(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__PaymentInitiationSource1_DEFINED
#define SOAP_TYPE_PointerTons1__PaymentInitiationSource1_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__PaymentInitiationSource1(struct soap*, ns1__PaymentInitiationSource1 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__PaymentInitiationSource1(struct soap*, const char *, int, ns1__PaymentInitiationSource1 *const*, const char *);
SOAP_FMAC3 ns1__PaymentInitiationSource1 ** SOAP_FMAC4 soap_in_PointerTons1__PaymentInitiationSource1(struct soap*, const char*, ns1__PaymentInitiationSource1 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__PaymentInitiationSource1(struct soap*, ns1__PaymentInitiationSource1 *const*, const char*, const char*);
SOAP_FMAC3 ns1__PaymentInitiationSource1 ** SOAP_FMAC4 soap_get_PointerTons1__PaymentInitiationSource1(struct soap*, ns1__PaymentInitiationSource1 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__DecimalNumber_DEFINED
#define SOAP_TYPE_PointerTons1__DecimalNumber_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__DecimalNumber(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__DecimalNumber(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons1__DecimalNumber(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__DecimalNumber(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons1__DecimalNumber(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__Authorisation1Choice_DEFINED
#define SOAP_TYPE_PointerTons1__Authorisation1Choice_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Authorisation1Choice(struct soap*, ns1__Authorisation1Choice *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Authorisation1Choice(struct soap*, const char *, int, ns1__Authorisation1Choice *const*, const char *);
SOAP_FMAC3 ns1__Authorisation1Choice ** SOAP_FMAC4 soap_in_PointerTons1__Authorisation1Choice(struct soap*, const char*, ns1__Authorisation1Choice **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Authorisation1Choice(struct soap*, ns1__Authorisation1Choice *const*, const char*, const char*);
SOAP_FMAC3 ns1__Authorisation1Choice ** SOAP_FMAC4 soap_get_PointerTons1__Authorisation1Choice(struct soap*, ns1__Authorisation1Choice **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__PersonIdentificationSchemeName1Choice_DEFINED
#define SOAP_TYPE_PointerTons1__PersonIdentificationSchemeName1Choice_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__PersonIdentificationSchemeName1Choice(struct soap*, ns1__PersonIdentificationSchemeName1Choice *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__PersonIdentificationSchemeName1Choice(struct soap*, const char *, int, ns1__PersonIdentificationSchemeName1Choice *const*, const char *);
SOAP_FMAC3 ns1__PersonIdentificationSchemeName1Choice ** SOAP_FMAC4 soap_in_PointerTons1__PersonIdentificationSchemeName1Choice(struct soap*, const char*, ns1__PersonIdentificationSchemeName1Choice **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__PersonIdentificationSchemeName1Choice(struct soap*, ns1__PersonIdentificationSchemeName1Choice *const*, const char*, const char*);
SOAP_FMAC3 ns1__PersonIdentificationSchemeName1Choice ** SOAP_FMAC4 soap_get_PointerTons1__PersonIdentificationSchemeName1Choice(struct soap*, ns1__PersonIdentificationSchemeName1Choice **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__OrganisationIdentificationSchemeName1Choice_DEFINED
#define SOAP_TYPE_PointerTons1__OrganisationIdentificationSchemeName1Choice_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__OrganisationIdentificationSchemeName1Choice(struct soap*, ns1__OrganisationIdentificationSchemeName1Choice *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__OrganisationIdentificationSchemeName1Choice(struct soap*, const char *, int, ns1__OrganisationIdentificationSchemeName1Choice *const*, const char *);
SOAP_FMAC3 ns1__OrganisationIdentificationSchemeName1Choice ** SOAP_FMAC4 soap_in_PointerTons1__OrganisationIdentificationSchemeName1Choice(struct soap*, const char*, ns1__OrganisationIdentificationSchemeName1Choice **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__OrganisationIdentificationSchemeName1Choice(struct soap*, ns1__OrganisationIdentificationSchemeName1Choice *const*, const char*, const char*);
SOAP_FMAC3 ns1__OrganisationIdentificationSchemeName1Choice ** SOAP_FMAC4 soap_get_PointerTons1__OrganisationIdentificationSchemeName1Choice(struct soap*, ns1__OrganisationIdentificationSchemeName1Choice **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__FinancialIdentificationSchemeName1Choice_DEFINED
#define SOAP_TYPE_PointerTons1__FinancialIdentificationSchemeName1Choice_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__FinancialIdentificationSchemeName1Choice(struct soap*, ns1__FinancialIdentificationSchemeName1Choice *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__FinancialIdentificationSchemeName1Choice(struct soap*, const char *, int, ns1__FinancialIdentificationSchemeName1Choice *const*, const char *);
SOAP_FMAC3 ns1__FinancialIdentificationSchemeName1Choice ** SOAP_FMAC4 soap_in_PointerTons1__FinancialIdentificationSchemeName1Choice(struct soap*, const char*, ns1__FinancialIdentificationSchemeName1Choice **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__FinancialIdentificationSchemeName1Choice(struct soap*, ns1__FinancialIdentificationSchemeName1Choice *const*, const char*, const char*);
SOAP_FMAC3 ns1__FinancialIdentificationSchemeName1Choice ** SOAP_FMAC4 soap_get_PointerTons1__FinancialIdentificationSchemeName1Choice(struct soap*, ns1__FinancialIdentificationSchemeName1Choice **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__AccountSchemeName1Choice_DEFINED
#define SOAP_TYPE_PointerTons1__AccountSchemeName1Choice_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__AccountSchemeName1Choice(struct soap*, ns1__AccountSchemeName1Choice *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__AccountSchemeName1Choice(struct soap*, const char *, int, ns1__AccountSchemeName1Choice *const*, const char *);
SOAP_FMAC3 ns1__AccountSchemeName1Choice ** SOAP_FMAC4 soap_in_PointerTons1__AccountSchemeName1Choice(struct soap*, const char*, ns1__AccountSchemeName1Choice **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__AccountSchemeName1Choice(struct soap*, ns1__AccountSchemeName1Choice *const*, const char*, const char*);
SOAP_FMAC3 ns1__AccountSchemeName1Choice ** SOAP_FMAC4 soap_get_PointerTons1__AccountSchemeName1Choice(struct soap*, ns1__AccountSchemeName1Choice **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ExternalGarnishmentType1Code_DEFINED
#define SOAP_TYPE_PointerTons1__ExternalGarnishmentType1Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ExternalGarnishmentType1Code(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ExternalGarnishmentType1Code(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons1__ExternalGarnishmentType1Code(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ExternalGarnishmentType1Code(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons1__ExternalGarnishmentType1Code(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__GarnishmentType1Choice_DEFINED
#define SOAP_TYPE_PointerTons1__GarnishmentType1Choice_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__GarnishmentType1Choice(struct soap*, ns1__GarnishmentType1Choice *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__GarnishmentType1Choice(struct soap*, const char *, int, ns1__GarnishmentType1Choice *const*, const char *);
SOAP_FMAC3 ns1__GarnishmentType1Choice ** SOAP_FMAC4 soap_in_PointerTons1__GarnishmentType1Choice(struct soap*, const char*, ns1__GarnishmentType1Choice **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__GarnishmentType1Choice(struct soap*, ns1__GarnishmentType1Choice *const*, const char*, const char*);
SOAP_FMAC3 ns1__GarnishmentType1Choice ** SOAP_FMAC4 soap_get_PointerTons1__GarnishmentType1Choice(struct soap*, ns1__GarnishmentType1Choice **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__TrueFalseIndicator_DEFINED
#define SOAP_TYPE_PointerTons1__TrueFalseIndicator_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__TrueFalseIndicator(struct soap*, bool *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__TrueFalseIndicator(struct soap*, const char *, int, bool *const*, const char *);
SOAP_FMAC3 bool ** SOAP_FMAC4 soap_in_PointerTons1__TrueFalseIndicator(struct soap*, const char*, bool **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__TrueFalseIndicator(struct soap*, bool *const*, const char*, const char*);
SOAP_FMAC3 bool ** SOAP_FMAC4 soap_get_PointerTons1__TrueFalseIndicator(struct soap*, bool **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__GarnishmentType1_DEFINED
#define SOAP_TYPE_PointerTons1__GarnishmentType1_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__GarnishmentType1(struct soap*, ns1__GarnishmentType1 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__GarnishmentType1(struct soap*, const char *, int, ns1__GarnishmentType1 *const*, const char *);
SOAP_FMAC3 ns1__GarnishmentType1 ** SOAP_FMAC4 soap_in_PointerTons1__GarnishmentType1(struct soap*, const char*, ns1__GarnishmentType1 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__GarnishmentType1(struct soap*, ns1__GarnishmentType1 *const*, const char*, const char*);
SOAP_FMAC3 ns1__GarnishmentType1 ** SOAP_FMAC4 soap_get_PointerTons1__GarnishmentType1(struct soap*, ns1__GarnishmentType1 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__FrequencyAndMoment1_DEFINED
#define SOAP_TYPE_PointerTons1__FrequencyAndMoment1_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__FrequencyAndMoment1(struct soap*, ns1__FrequencyAndMoment1 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__FrequencyAndMoment1(struct soap*, const char *, int, ns1__FrequencyAndMoment1 *const*, const char *);
SOAP_FMAC3 ns1__FrequencyAndMoment1 ** SOAP_FMAC4 soap_in_PointerTons1__FrequencyAndMoment1(struct soap*, const char*, ns1__FrequencyAndMoment1 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__FrequencyAndMoment1(struct soap*, ns1__FrequencyAndMoment1 *const*, const char*, const char*);
SOAP_FMAC3 ns1__FrequencyAndMoment1 ** SOAP_FMAC4 soap_get_PointerTons1__FrequencyAndMoment1(struct soap*, ns1__FrequencyAndMoment1 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__FrequencyPeriod1_DEFINED
#define SOAP_TYPE_PointerTons1__FrequencyPeriod1_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__FrequencyPeriod1(struct soap*, ns1__FrequencyPeriod1 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__FrequencyPeriod1(struct soap*, const char *, int, ns1__FrequencyPeriod1 *const*, const char *);
SOAP_FMAC3 ns1__FrequencyPeriod1 ** SOAP_FMAC4 soap_in_PointerTons1__FrequencyPeriod1(struct soap*, const char*, ns1__FrequencyPeriod1 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__FrequencyPeriod1(struct soap*, ns1__FrequencyPeriod1 *const*, const char*, const char*);
SOAP_FMAC3 ns1__FrequencyPeriod1 ** SOAP_FMAC4 soap_get_PointerTons1__FrequencyPeriod1(struct soap*, ns1__FrequencyPeriod1 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__GenericFinancialIdentification1_DEFINED
#define SOAP_TYPE_PointerTons1__GenericFinancialIdentification1_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__GenericFinancialIdentification1(struct soap*, ns1__GenericFinancialIdentification1 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__GenericFinancialIdentification1(struct soap*, const char *, int, ns1__GenericFinancialIdentification1 *const*, const char *);
SOAP_FMAC3 ns1__GenericFinancialIdentification1 ** SOAP_FMAC4 soap_in_PointerTons1__GenericFinancialIdentification1(struct soap*, const char*, ns1__GenericFinancialIdentification1 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__GenericFinancialIdentification1(struct soap*, ns1__GenericFinancialIdentification1 *const*, const char*, const char*);
SOAP_FMAC3 ns1__GenericFinancialIdentification1 ** SOAP_FMAC4 soap_get_PointerTons1__GenericFinancialIdentification1(struct soap*, ns1__GenericFinancialIdentification1 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ClearingSystemMemberIdentification2_DEFINED
#define SOAP_TYPE_PointerTons1__ClearingSystemMemberIdentification2_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ClearingSystemMemberIdentification2(struct soap*, ns1__ClearingSystemMemberIdentification2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ClearingSystemMemberIdentification2(struct soap*, const char *, int, ns1__ClearingSystemMemberIdentification2 *const*, const char *);
SOAP_FMAC3 ns1__ClearingSystemMemberIdentification2 ** SOAP_FMAC4 soap_in_PointerTons1__ClearingSystemMemberIdentification2(struct soap*, const char*, ns1__ClearingSystemMemberIdentification2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ClearingSystemMemberIdentification2(struct soap*, ns1__ClearingSystemMemberIdentification2 *const*, const char*, const char*);
SOAP_FMAC3 ns1__ClearingSystemMemberIdentification2 ** SOAP_FMAC4 soap_get_PointerTons1__ClearingSystemMemberIdentification2(struct soap*, ns1__ClearingSystemMemberIdentification2 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__BICFIDec2014Identifier_DEFINED
#define SOAP_TYPE_PointerTons1__BICFIDec2014Identifier_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__BICFIDec2014Identifier(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__BICFIDec2014Identifier(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons1__BICFIDec2014Identifier(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__BICFIDec2014Identifier(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons1__BICFIDec2014Identifier(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ExternalFinancialInstitutionIdentification1Code_DEFINED
#define SOAP_TYPE_PointerTons1__ExternalFinancialInstitutionIdentification1Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ExternalFinancialInstitutionIdentification1Code(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ExternalFinancialInstitutionIdentification1Code(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons1__ExternalFinancialInstitutionIdentification1Code(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ExternalFinancialInstitutionIdentification1Code(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons1__ExternalFinancialInstitutionIdentification1Code(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ExchangeRateType1Code_DEFINED
#define SOAP_TYPE_PointerTons1__ExchangeRateType1Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ExchangeRateType1Code(struct soap*, enum ns1__ExchangeRateType1Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ExchangeRateType1Code(struct soap*, const char *, int, enum ns1__ExchangeRateType1Code *const*, const char *);
SOAP_FMAC3 enum ns1__ExchangeRateType1Code ** SOAP_FMAC4 soap_in_PointerTons1__ExchangeRateType1Code(struct soap*, const char*, enum ns1__ExchangeRateType1Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ExchangeRateType1Code(struct soap*, enum ns1__ExchangeRateType1Code *const*, const char*, const char*);
SOAP_FMAC3 enum ns1__ExchangeRateType1Code ** SOAP_FMAC4 soap_get_PointerTons1__ExchangeRateType1Code(struct soap*, enum ns1__ExchangeRateType1Code **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__BaseOneRate_DEFINED
#define SOAP_TYPE_PointerTons1__BaseOneRate_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__BaseOneRate(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__BaseOneRate(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons1__BaseOneRate(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__BaseOneRate(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons1__BaseOneRate(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ExternalDocumentLineType1Code_DEFINED
#define SOAP_TYPE_PointerTons1__ExternalDocumentLineType1Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ExternalDocumentLineType1Code(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ExternalDocumentLineType1Code(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons1__ExternalDocumentLineType1Code(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ExternalDocumentLineType1Code(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons1__ExternalDocumentLineType1Code(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__DocumentLineType1Choice_DEFINED
#define SOAP_TYPE_PointerTons1__DocumentLineType1Choice_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__DocumentLineType1Choice(struct soap*, ns1__DocumentLineType1Choice *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__DocumentLineType1Choice(struct soap*, const char *, int, ns1__DocumentLineType1Choice *const*, const char *);
SOAP_FMAC3 ns1__DocumentLineType1Choice ** SOAP_FMAC4 soap_in_PointerTons1__DocumentLineType1Choice(struct soap*, const char*, ns1__DocumentLineType1Choice **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__DocumentLineType1Choice(struct soap*, ns1__DocumentLineType1Choice *const*, const char*, const char*);
SOAP_FMAC3 ns1__DocumentLineType1Choice ** SOAP_FMAC4 soap_get_PointerTons1__DocumentLineType1Choice(struct soap*, ns1__DocumentLineType1Choice **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__RemittanceAmount3_DEFINED
#define SOAP_TYPE_PointerTons1__RemittanceAmount3_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__RemittanceAmount3(struct soap*, ns1__RemittanceAmount3 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__RemittanceAmount3(struct soap*, const char *, int, ns1__RemittanceAmount3 *const*, const char *);
SOAP_FMAC3 ns1__RemittanceAmount3 ** SOAP_FMAC4 soap_in_PointerTons1__RemittanceAmount3(struct soap*, const char*, ns1__RemittanceAmount3 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__RemittanceAmount3(struct soap*, ns1__RemittanceAmount3 *const*, const char*, const char*);
SOAP_FMAC3 ns1__RemittanceAmount3 ** SOAP_FMAC4 soap_get_PointerTons1__RemittanceAmount3(struct soap*, ns1__RemittanceAmount3 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__DocumentLineIdentification1_DEFINED
#define SOAP_TYPE_PointerTons1__DocumentLineIdentification1_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__DocumentLineIdentification1(struct soap*, ns1__DocumentLineIdentification1 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__DocumentLineIdentification1(struct soap*, const char *, int, ns1__DocumentLineIdentification1 *const*, const char *);
SOAP_FMAC3 ns1__DocumentLineIdentification1 ** SOAP_FMAC4 soap_in_PointerTons1__DocumentLineIdentification1(struct soap*, const char*, ns1__DocumentLineIdentification1 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__DocumentLineIdentification1(struct soap*, ns1__DocumentLineIdentification1 *const*, const char*, const char*);
SOAP_FMAC3 ns1__DocumentLineIdentification1 ** SOAP_FMAC4 soap_get_PointerTons1__DocumentLineIdentification1(struct soap*, ns1__DocumentLineIdentification1 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__DocumentLineType1_DEFINED
#define SOAP_TYPE_PointerTons1__DocumentLineType1_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__DocumentLineType1(struct soap*, ns1__DocumentLineType1 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__DocumentLineType1(struct soap*, const char *, int, ns1__DocumentLineType1 *const*, const char *);
SOAP_FMAC3 ns1__DocumentLineType1 ** SOAP_FMAC4 soap_in_PointerTons1__DocumentLineType1(struct soap*, const char*, ns1__DocumentLineType1 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__DocumentLineType1(struct soap*, ns1__DocumentLineType1 *const*, const char*, const char*);
SOAP_FMAC3 ns1__DocumentLineType1 ** SOAP_FMAC4 soap_get_PointerTons1__DocumentLineType1(struct soap*, ns1__DocumentLineType1 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__Max4Text_DEFINED
#define SOAP_TYPE_PointerTons1__Max4Text_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Max4Text(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Max4Text(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons1__Max4Text(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Max4Text(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons1__Max4Text(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__CreditDebitCode_DEFINED
#define SOAP_TYPE_PointerTons1__CreditDebitCode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CreditDebitCode(struct soap*, enum ns1__CreditDebitCode *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CreditDebitCode(struct soap*, const char *, int, enum ns1__CreditDebitCode *const*, const char *);
SOAP_FMAC3 enum ns1__CreditDebitCode ** SOAP_FMAC4 soap_in_PointerTons1__CreditDebitCode(struct soap*, const char*, enum ns1__CreditDebitCode **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CreditDebitCode(struct soap*, enum ns1__CreditDebitCode *const*, const char*, const char*);
SOAP_FMAC3 enum ns1__CreditDebitCode ** SOAP_FMAC4 soap_get_PointerTons1__CreditDebitCode(struct soap*, enum ns1__CreditDebitCode **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__CustomerCreditTransferInitiationV11_DEFINED
#define SOAP_TYPE_PointerTons1__CustomerCreditTransferInitiationV11_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CustomerCreditTransferInitiationV11(struct soap*, ns1__CustomerCreditTransferInitiationV11 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CustomerCreditTransferInitiationV11(struct soap*, const char *, int, ns1__CustomerCreditTransferInitiationV11 *const*, const char *);
SOAP_FMAC3 ns1__CustomerCreditTransferInitiationV11 ** SOAP_FMAC4 soap_in_PointerTons1__CustomerCreditTransferInitiationV11(struct soap*, const char*, ns1__CustomerCreditTransferInitiationV11 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CustomerCreditTransferInitiationV11(struct soap*, ns1__CustomerCreditTransferInitiationV11 *const*, const char*, const char*);
SOAP_FMAC3 ns1__CustomerCreditTransferInitiationV11 ** SOAP_FMAC4 soap_get_PointerTons1__CustomerCreditTransferInitiationV11(struct soap*, ns1__CustomerCreditTransferInitiationV11 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ExternalDiscountAmountType1Code_DEFINED
#define SOAP_TYPE_PointerTons1__ExternalDiscountAmountType1Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ExternalDiscountAmountType1Code(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ExternalDiscountAmountType1Code(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons1__ExternalDiscountAmountType1Code(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ExternalDiscountAmountType1Code(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons1__ExternalDiscountAmountType1Code(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__DiscountAmountType1Choice_DEFINED
#define SOAP_TYPE_PointerTons1__DiscountAmountType1Choice_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__DiscountAmountType1Choice(struct soap*, ns1__DiscountAmountType1Choice *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__DiscountAmountType1Choice(struct soap*, const char *, int, ns1__DiscountAmountType1Choice *const*, const char *);
SOAP_FMAC3 ns1__DiscountAmountType1Choice ** SOAP_FMAC4 soap_in_PointerTons1__DiscountAmountType1Choice(struct soap*, const char*, ns1__DiscountAmountType1Choice **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__DiscountAmountType1Choice(struct soap*, ns1__DiscountAmountType1Choice *const*, const char*, const char*);
SOAP_FMAC3 ns1__DiscountAmountType1Choice ** SOAP_FMAC4 soap_get_PointerTons1__DiscountAmountType1Choice(struct soap*, ns1__DiscountAmountType1Choice **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__PaymentInstruction40_DEFINED
#define SOAP_TYPE_PointerTons1__PaymentInstruction40_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__PaymentInstruction40(struct soap*, ns1__PaymentInstruction40 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__PaymentInstruction40(struct soap*, const char *, int, ns1__PaymentInstruction40 *const*, const char *);
SOAP_FMAC3 ns1__PaymentInstruction40 ** SOAP_FMAC4 soap_in_PointerTons1__PaymentInstruction40(struct soap*, const char*, ns1__PaymentInstruction40 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__PaymentInstruction40(struct soap*, ns1__PaymentInstruction40 *const*, const char*, const char*);
SOAP_FMAC3 ns1__PaymentInstruction40 ** SOAP_FMAC4 soap_get_PointerTons1__PaymentInstruction40(struct soap*, ns1__PaymentInstruction40 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__GroupHeader95_DEFINED
#define SOAP_TYPE_PointerTons1__GroupHeader95_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__GroupHeader95(struct soap*, ns1__GroupHeader95 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__GroupHeader95(struct soap*, const char *, int, ns1__GroupHeader95 *const*, const char *);
SOAP_FMAC3 ns1__GroupHeader95 ** SOAP_FMAC4 soap_in_PointerTons1__GroupHeader95(struct soap*, const char*, ns1__GroupHeader95 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__GroupHeader95(struct soap*, ns1__GroupHeader95 *const*, const char*, const char*);
SOAP_FMAC3 ns1__GroupHeader95 ** SOAP_FMAC4 soap_get_PointerTons1__GroupHeader95(struct soap*, ns1__GroupHeader95 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__CreditorReferenceType1Choice_DEFINED
#define SOAP_TYPE_PointerTons1__CreditorReferenceType1Choice_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CreditorReferenceType1Choice(struct soap*, ns1__CreditorReferenceType1Choice *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CreditorReferenceType1Choice(struct soap*, const char *, int, ns1__CreditorReferenceType1Choice *const*, const char *);
SOAP_FMAC3 ns1__CreditorReferenceType1Choice ** SOAP_FMAC4 soap_in_PointerTons1__CreditorReferenceType1Choice(struct soap*, const char*, ns1__CreditorReferenceType1Choice **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CreditorReferenceType1Choice(struct soap*, ns1__CreditorReferenceType1Choice *const*, const char*, const char*);
SOAP_FMAC3 ns1__CreditorReferenceType1Choice ** SOAP_FMAC4 soap_get_PointerTons1__CreditorReferenceType1Choice(struct soap*, ns1__CreditorReferenceType1Choice **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__CreditorReferenceType2_DEFINED
#define SOAP_TYPE_PointerTons1__CreditorReferenceType2_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CreditorReferenceType2(struct soap*, ns1__CreditorReferenceType2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CreditorReferenceType2(struct soap*, const char *, int, ns1__CreditorReferenceType2 *const*, const char *);
SOAP_FMAC3 ns1__CreditorReferenceType2 ** SOAP_FMAC4 soap_in_PointerTons1__CreditorReferenceType2(struct soap*, const char*, ns1__CreditorReferenceType2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CreditorReferenceType2(struct soap*, ns1__CreditorReferenceType2 *const*, const char*, const char*);
SOAP_FMAC3 ns1__CreditorReferenceType2 ** SOAP_FMAC4 soap_get_PointerTons1__CreditorReferenceType2(struct soap*, ns1__CreditorReferenceType2 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SupplementaryData1_DEFINED
#define SOAP_TYPE_PointerTons1__SupplementaryData1_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SupplementaryData1(struct soap*, ns1__SupplementaryData1 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SupplementaryData1(struct soap*, const char *, int, ns1__SupplementaryData1 *const*, const char *);
SOAP_FMAC3 ns1__SupplementaryData1 ** SOAP_FMAC4 soap_in_PointerTons1__SupplementaryData1(struct soap*, const char*, ns1__SupplementaryData1 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SupplementaryData1(struct soap*, ns1__SupplementaryData1 *const*, const char*, const char*);
SOAP_FMAC3 ns1__SupplementaryData1 ** SOAP_FMAC4 soap_get_PointerTons1__SupplementaryData1(struct soap*, ns1__SupplementaryData1 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__RemittanceInformation21_DEFINED
#define SOAP_TYPE_PointerTons1__RemittanceInformation21_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__RemittanceInformation21(struct soap*, ns1__RemittanceInformation21 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__RemittanceInformation21(struct soap*, const char *, int, ns1__RemittanceInformation21 *const*, const char *);
SOAP_FMAC3 ns1__RemittanceInformation21 ** SOAP_FMAC4 soap_in_PointerTons1__RemittanceInformation21(struct soap*, const char*, ns1__RemittanceInformation21 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__RemittanceInformation21(struct soap*, ns1__RemittanceInformation21 *const*, const char*, const char*);
SOAP_FMAC3 ns1__RemittanceInformation21 ** SOAP_FMAC4 soap_get_PointerTons1__RemittanceInformation21(struct soap*, ns1__RemittanceInformation21 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__RemittanceLocation7_DEFINED
#define SOAP_TYPE_PointerTons1__RemittanceLocation7_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__RemittanceLocation7(struct soap*, ns1__RemittanceLocation7 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__RemittanceLocation7(struct soap*, const char *, int, ns1__RemittanceLocation7 *const*, const char *);
SOAP_FMAC3 ns1__RemittanceLocation7 ** SOAP_FMAC4 soap_in_PointerTons1__RemittanceLocation7(struct soap*, const char*, ns1__RemittanceLocation7 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__RemittanceLocation7(struct soap*, ns1__RemittanceLocation7 *const*, const char*, const char*);
SOAP_FMAC3 ns1__RemittanceLocation7 ** SOAP_FMAC4 soap_get_PointerTons1__RemittanceLocation7(struct soap*, ns1__RemittanceLocation7 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__TaxInformation10_DEFINED
#define SOAP_TYPE_PointerTons1__TaxInformation10_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__TaxInformation10(struct soap*, ns1__TaxInformation10 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__TaxInformation10(struct soap*, const char *, int, ns1__TaxInformation10 *const*, const char *);
SOAP_FMAC3 ns1__TaxInformation10 ** SOAP_FMAC4 soap_in_PointerTons1__TaxInformation10(struct soap*, const char*, ns1__TaxInformation10 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__TaxInformation10(struct soap*, ns1__TaxInformation10 *const*, const char*, const char*);
SOAP_FMAC3 ns1__TaxInformation10 ** SOAP_FMAC4 soap_get_PointerTons1__TaxInformation10(struct soap*, ns1__TaxInformation10 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__RegulatoryReporting3_DEFINED
#define SOAP_TYPE_PointerTons1__RegulatoryReporting3_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__RegulatoryReporting3(struct soap*, ns1__RegulatoryReporting3 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__RegulatoryReporting3(struct soap*, const char *, int, ns1__RegulatoryReporting3 *const*, const char *);
SOAP_FMAC3 ns1__RegulatoryReporting3 ** SOAP_FMAC4 soap_in_PointerTons1__RegulatoryReporting3(struct soap*, const char*, ns1__RegulatoryReporting3 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__RegulatoryReporting3(struct soap*, ns1__RegulatoryReporting3 *const*, const char*, const char*);
SOAP_FMAC3 ns1__RegulatoryReporting3 ** SOAP_FMAC4 soap_get_PointerTons1__RegulatoryReporting3(struct soap*, ns1__RegulatoryReporting3 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__Purpose2Choice_DEFINED
#define SOAP_TYPE_PointerTons1__Purpose2Choice_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Purpose2Choice(struct soap*, ns1__Purpose2Choice *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Purpose2Choice(struct soap*, const char *, int, ns1__Purpose2Choice *const*, const char *);
SOAP_FMAC3 ns1__Purpose2Choice ** SOAP_FMAC4 soap_in_PointerTons1__Purpose2Choice(struct soap*, const char*, ns1__Purpose2Choice **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Purpose2Choice(struct soap*, ns1__Purpose2Choice *const*, const char*, const char*);
SOAP_FMAC3 ns1__Purpose2Choice ** SOAP_FMAC4 soap_get_PointerTons1__Purpose2Choice(struct soap*, ns1__Purpose2Choice **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__InstructionForDebtorAgent1_DEFINED
#define SOAP_TYPE_PointerTons1__InstructionForDebtorAgent1_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__InstructionForDebtorAgent1(struct soap*, ns1__InstructionForDebtorAgent1 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__InstructionForDebtorAgent1(struct soap*, const char *, int, ns1__InstructionForDebtorAgent1 *const*, const char *);
SOAP_FMAC3 ns1__InstructionForDebtorAgent1 ** SOAP_FMAC4 soap_in_PointerTons1__InstructionForDebtorAgent1(struct soap*, const char*, ns1__InstructionForDebtorAgent1 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__InstructionForDebtorAgent1(struct soap*, ns1__InstructionForDebtorAgent1 *const*, const char*, const char*);
SOAP_FMAC3 ns1__InstructionForDebtorAgent1 ** SOAP_FMAC4 soap_get_PointerTons1__InstructionForDebtorAgent1(struct soap*, ns1__InstructionForDebtorAgent1 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__InstructionForCreditorAgent3_DEFINED
#define SOAP_TYPE_PointerTons1__InstructionForCreditorAgent3_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__InstructionForCreditorAgent3(struct soap*, ns1__InstructionForCreditorAgent3 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__InstructionForCreditorAgent3(struct soap*, const char *, int, ns1__InstructionForCreditorAgent3 *const*, const char *);
SOAP_FMAC3 ns1__InstructionForCreditorAgent3 ** SOAP_FMAC4 soap_in_PointerTons1__InstructionForCreditorAgent3(struct soap*, const char*, ns1__InstructionForCreditorAgent3 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__InstructionForCreditorAgent3(struct soap*, ns1__InstructionForCreditorAgent3 *const*, const char*, const char*);
SOAP_FMAC3 ns1__InstructionForCreditorAgent3 ** SOAP_FMAC4 soap_get_PointerTons1__InstructionForCreditorAgent3(struct soap*, ns1__InstructionForCreditorAgent3 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__CashAccount40_DEFINED
#define SOAP_TYPE_PointerTons1__CashAccount40_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CashAccount40(struct soap*, ns1__CashAccount40 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CashAccount40(struct soap*, const char *, int, ns1__CashAccount40 *const*, const char *);
SOAP_FMAC3 ns1__CashAccount40 ** SOAP_FMAC4 soap_in_PointerTons1__CashAccount40(struct soap*, const char*, ns1__CashAccount40 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CashAccount40(struct soap*, ns1__CashAccount40 *const*, const char*, const char*);
SOAP_FMAC3 ns1__CashAccount40 ** SOAP_FMAC4 soap_get_PointerTons1__CashAccount40(struct soap*, ns1__CashAccount40 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__BranchAndFinancialInstitutionIdentification6_DEFINED
#define SOAP_TYPE_PointerTons1__BranchAndFinancialInstitutionIdentification6_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__BranchAndFinancialInstitutionIdentification6(struct soap*, ns1__BranchAndFinancialInstitutionIdentification6 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__BranchAndFinancialInstitutionIdentification6(struct soap*, const char *, int, ns1__BranchAndFinancialInstitutionIdentification6 *const*, const char *);
SOAP_FMAC3 ns1__BranchAndFinancialInstitutionIdentification6 ** SOAP_FMAC4 soap_in_PointerTons1__BranchAndFinancialInstitutionIdentification6(struct soap*, const char*, ns1__BranchAndFinancialInstitutionIdentification6 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__BranchAndFinancialInstitutionIdentification6(struct soap*, ns1__BranchAndFinancialInstitutionIdentification6 *const*, const char*, const char*);
SOAP_FMAC3 ns1__BranchAndFinancialInstitutionIdentification6 ** SOAP_FMAC4 soap_get_PointerTons1__BranchAndFinancialInstitutionIdentification6(struct soap*, ns1__BranchAndFinancialInstitutionIdentification6 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__PartyIdentification135_DEFINED
#define SOAP_TYPE_PointerTons1__PartyIdentification135_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__PartyIdentification135(struct soap*, ns1__PartyIdentification135 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__PartyIdentification135(struct soap*, const char *, int, ns1__PartyIdentification135 *const*, const char *);
SOAP_FMAC3 ns1__PartyIdentification135 ** SOAP_FMAC4 soap_in_PointerTons1__PartyIdentification135(struct soap*, const char*, ns1__PartyIdentification135 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__PartyIdentification135(struct soap*, ns1__PartyIdentification135 *const*, const char*, const char*);
SOAP_FMAC3 ns1__PartyIdentification135 ** SOAP_FMAC4 soap_get_PointerTons1__PartyIdentification135(struct soap*, ns1__PartyIdentification135 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__Cheque11_DEFINED
#define SOAP_TYPE_PointerTons1__Cheque11_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Cheque11(struct soap*, ns1__Cheque11 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Cheque11(struct soap*, const char *, int, ns1__Cheque11 *const*, const char *);
SOAP_FMAC3 ns1__Cheque11 ** SOAP_FMAC4 soap_in_PointerTons1__Cheque11(struct soap*, const char*, ns1__Cheque11 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Cheque11(struct soap*, ns1__Cheque11 *const*, const char*, const char*);
SOAP_FMAC3 ns1__Cheque11 ** SOAP_FMAC4 soap_get_PointerTons1__Cheque11(struct soap*, ns1__Cheque11 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__CreditTransferMandateData1_DEFINED
#define SOAP_TYPE_PointerTons1__CreditTransferMandateData1_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CreditTransferMandateData1(struct soap*, ns1__CreditTransferMandateData1 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CreditTransferMandateData1(struct soap*, const char *, int, ns1__CreditTransferMandateData1 *const*, const char *);
SOAP_FMAC3 ns1__CreditTransferMandateData1 ** SOAP_FMAC4 soap_in_PointerTons1__CreditTransferMandateData1(struct soap*, const char*, ns1__CreditTransferMandateData1 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CreditTransferMandateData1(struct soap*, ns1__CreditTransferMandateData1 *const*, const char*, const char*);
SOAP_FMAC3 ns1__CreditTransferMandateData1 ** SOAP_FMAC4 soap_get_PointerTons1__CreditTransferMandateData1(struct soap*, ns1__CreditTransferMandateData1 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ChargeBearerType1Code_DEFINED
#define SOAP_TYPE_PointerTons1__ChargeBearerType1Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ChargeBearerType1Code(struct soap*, enum ns1__ChargeBearerType1Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ChargeBearerType1Code(struct soap*, const char *, int, enum ns1__ChargeBearerType1Code *const*, const char *);
SOAP_FMAC3 enum ns1__ChargeBearerType1Code ** SOAP_FMAC4 soap_in_PointerTons1__ChargeBearerType1Code(struct soap*, const char*, enum ns1__ChargeBearerType1Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ChargeBearerType1Code(struct soap*, enum ns1__ChargeBearerType1Code *const*, const char*, const char*);
SOAP_FMAC3 enum ns1__ChargeBearerType1Code ** SOAP_FMAC4 soap_get_PointerTons1__ChargeBearerType1Code(struct soap*, enum ns1__ChargeBearerType1Code **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ExchangeRate1_DEFINED
#define SOAP_TYPE_PointerTons1__ExchangeRate1_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ExchangeRate1(struct soap*, ns1__ExchangeRate1 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ExchangeRate1(struct soap*, const char *, int, ns1__ExchangeRate1 *const*, const char *);
SOAP_FMAC3 ns1__ExchangeRate1 ** SOAP_FMAC4 soap_in_PointerTons1__ExchangeRate1(struct soap*, const char*, ns1__ExchangeRate1 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ExchangeRate1(struct soap*, ns1__ExchangeRate1 *const*, const char*, const char*);
SOAP_FMAC3 ns1__ExchangeRate1 ** SOAP_FMAC4 soap_get_PointerTons1__ExchangeRate1(struct soap*, ns1__ExchangeRate1 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__AmountType4Choice_DEFINED
#define SOAP_TYPE_PointerTons1__AmountType4Choice_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__AmountType4Choice(struct soap*, ns1__AmountType4Choice *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__AmountType4Choice(struct soap*, const char *, int, ns1__AmountType4Choice *const*, const char *);
SOAP_FMAC3 ns1__AmountType4Choice ** SOAP_FMAC4 soap_in_PointerTons1__AmountType4Choice(struct soap*, const char*, ns1__AmountType4Choice **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__AmountType4Choice(struct soap*, ns1__AmountType4Choice *const*, const char*, const char*);
SOAP_FMAC3 ns1__AmountType4Choice ** SOAP_FMAC4 soap_get_PointerTons1__AmountType4Choice(struct soap*, ns1__AmountType4Choice **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__PaymentTypeInformation26_DEFINED
#define SOAP_TYPE_PointerTons1__PaymentTypeInformation26_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__PaymentTypeInformation26(struct soap*, ns1__PaymentTypeInformation26 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__PaymentTypeInformation26(struct soap*, const char *, int, ns1__PaymentTypeInformation26 *const*, const char *);
SOAP_FMAC3 ns1__PaymentTypeInformation26 ** SOAP_FMAC4 soap_in_PointerTons1__PaymentTypeInformation26(struct soap*, const char*, ns1__PaymentTypeInformation26 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__PaymentTypeInformation26(struct soap*, ns1__PaymentTypeInformation26 *const*, const char*, const char*);
SOAP_FMAC3 ns1__PaymentTypeInformation26 ** SOAP_FMAC4 soap_get_PointerTons1__PaymentTypeInformation26(struct soap*, ns1__PaymentTypeInformation26 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__PaymentIdentification6_DEFINED
#define SOAP_TYPE_PointerTons1__PaymentIdentification6_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__PaymentIdentification6(struct soap*, ns1__PaymentIdentification6 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__PaymentIdentification6(struct soap*, const char *, int, ns1__PaymentIdentification6 *const*, const char *);
SOAP_FMAC3 ns1__PaymentIdentification6 ** SOAP_FMAC4 soap_in_PointerTons1__PaymentIdentification6(struct soap*, const char*, ns1__PaymentIdentification6 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__PaymentIdentification6(struct soap*, ns1__PaymentIdentification6 *const*, const char*, const char*);
SOAP_FMAC3 ns1__PaymentIdentification6 ** SOAP_FMAC4 soap_get_PointerTons1__PaymentIdentification6(struct soap*, ns1__PaymentIdentification6 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__MandateSetupReason1Choice_DEFINED
#define SOAP_TYPE_PointerTons1__MandateSetupReason1Choice_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__MandateSetupReason1Choice(struct soap*, ns1__MandateSetupReason1Choice *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__MandateSetupReason1Choice(struct soap*, const char *, int, ns1__MandateSetupReason1Choice *const*, const char *);
SOAP_FMAC3 ns1__MandateSetupReason1Choice ** SOAP_FMAC4 soap_in_PointerTons1__MandateSetupReason1Choice(struct soap*, const char*, ns1__MandateSetupReason1Choice **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__MandateSetupReason1Choice(struct soap*, ns1__MandateSetupReason1Choice *const*, const char*, const char*);
SOAP_FMAC3 ns1__MandateSetupReason1Choice ** SOAP_FMAC4 soap_get_PointerTons1__MandateSetupReason1Choice(struct soap*, ns1__MandateSetupReason1Choice **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__Frequency36Choice_DEFINED
#define SOAP_TYPE_PointerTons1__Frequency36Choice_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Frequency36Choice(struct soap*, ns1__Frequency36Choice *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Frequency36Choice(struct soap*, const char *, int, ns1__Frequency36Choice *const*, const char *);
SOAP_FMAC3 ns1__Frequency36Choice ** SOAP_FMAC4 soap_in_PointerTons1__Frequency36Choice(struct soap*, const char*, ns1__Frequency36Choice **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Frequency36Choice(struct soap*, ns1__Frequency36Choice *const*, const char*, const char*);
SOAP_FMAC3 ns1__Frequency36Choice ** SOAP_FMAC4 soap_get_PointerTons1__Frequency36Choice(struct soap*, ns1__Frequency36Choice **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__Max10KBinary_DEFINED
#define SOAP_TYPE_PointerTons1__Max10KBinary_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Max10KBinary(struct soap*, xsd__base64Binary *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Max10KBinary(struct soap*, const char *, int, xsd__base64Binary *const*, const char *);
SOAP_FMAC3 xsd__base64Binary ** SOAP_FMAC4 soap_in_PointerTons1__Max10KBinary(struct soap*, const char*, xsd__base64Binary **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Max10KBinary(struct soap*, xsd__base64Binary *const*, const char*, const char*);
SOAP_FMAC3 xsd__base64Binary ** SOAP_FMAC4 soap_get_PointerTons1__Max10KBinary(struct soap*, xsd__base64Binary **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ISODateTime_DEFINED
#define SOAP_TYPE_PointerTons1__ISODateTime_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ISODateTime(struct soap*, time_t *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ISODateTime(struct soap*, const char *, int, time_t *const*, const char *);
SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_in_PointerTons1__ISODateTime(struct soap*, const char*, time_t **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ISODateTime(struct soap*, time_t *const*, const char*, const char*);
SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_get_PointerTons1__ISODateTime(struct soap*, time_t **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__MandateTypeInformation2_DEFINED
#define SOAP_TYPE_PointerTons1__MandateTypeInformation2_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__MandateTypeInformation2(struct soap*, ns1__MandateTypeInformation2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__MandateTypeInformation2(struct soap*, const char *, int, ns1__MandateTypeInformation2 *const*, const char *);
SOAP_FMAC3 ns1__MandateTypeInformation2 ** SOAP_FMAC4 soap_in_PointerTons1__MandateTypeInformation2(struct soap*, const char*, ns1__MandateTypeInformation2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__MandateTypeInformation2(struct soap*, ns1__MandateTypeInformation2 *const*, const char*, const char*);
SOAP_FMAC3 ns1__MandateTypeInformation2 ** SOAP_FMAC4 soap_get_PointerTons1__MandateTypeInformation2(struct soap*, ns1__MandateTypeInformation2 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__PreferredContactMethod1Code_DEFINED
#define SOAP_TYPE_PointerTons1__PreferredContactMethod1Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__PreferredContactMethod1Code(struct soap*, enum ns1__PreferredContactMethod1Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__PreferredContactMethod1Code(struct soap*, const char *, int, enum ns1__PreferredContactMethod1Code *const*, const char *);
SOAP_FMAC3 enum ns1__PreferredContactMethod1Code ** SOAP_FMAC4 soap_in_PointerTons1__PreferredContactMethod1Code(struct soap*, const char*, enum ns1__PreferredContactMethod1Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__PreferredContactMethod1Code(struct soap*, enum ns1__PreferredContactMethod1Code *const*, const char*, const char*);
SOAP_FMAC3 enum ns1__PreferredContactMethod1Code ** SOAP_FMAC4 soap_get_PointerTons1__PreferredContactMethod1Code(struct soap*, enum ns1__PreferredContactMethod1Code **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__OtherContact1_DEFINED
#define SOAP_TYPE_PointerTons1__OtherContact1_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__OtherContact1(struct soap*, ns1__OtherContact1 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__OtherContact1(struct soap*, const char *, int, ns1__OtherContact1 *const*, const char *);
SOAP_FMAC3 ns1__OtherContact1 ** SOAP_FMAC4 soap_in_PointerTons1__OtherContact1(struct soap*, const char*, ns1__OtherContact1 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__OtherContact1(struct soap*, ns1__OtherContact1 *const*, const char*, const char*);
SOAP_FMAC3 ns1__OtherContact1 ** SOAP_FMAC4 soap_get_PointerTons1__OtherContact1(struct soap*, ns1__OtherContact1 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__Max2048Text_DEFINED
#define SOAP_TYPE_PointerTons1__Max2048Text_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Max2048Text(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Max2048Text(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons1__Max2048Text(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Max2048Text(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons1__Max2048Text(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__PhoneNumber_DEFINED
#define SOAP_TYPE_PointerTons1__PhoneNumber_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__PhoneNumber(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__PhoneNumber(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons1__PhoneNumber(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__PhoneNumber(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons1__PhoneNumber(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__NamePrefix2Code_DEFINED
#define SOAP_TYPE_PointerTons1__NamePrefix2Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__NamePrefix2Code(struct soap*, enum ns1__NamePrefix2Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__NamePrefix2Code(struct soap*, const char *, int, enum ns1__NamePrefix2Code *const*, const char *);
SOAP_FMAC3 enum ns1__NamePrefix2Code ** SOAP_FMAC4 soap_in_PointerTons1__NamePrefix2Code(struct soap*, const char*, enum ns1__NamePrefix2Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__NamePrefix2Code(struct soap*, enum ns1__NamePrefix2Code *const*, const char*, const char*);
SOAP_FMAC3 enum ns1__NamePrefix2Code ** SOAP_FMAC4 soap_get_PointerTons1__NamePrefix2Code(struct soap*, enum ns1__NamePrefix2Code **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ClearingSystemIdentification2Choice_DEFINED
#define SOAP_TYPE_PointerTons1__ClearingSystemIdentification2Choice_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ClearingSystemIdentification2Choice(struct soap*, ns1__ClearingSystemIdentification2Choice *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ClearingSystemIdentification2Choice(struct soap*, const char *, int, ns1__ClearingSystemIdentification2Choice *const*, const char *);
SOAP_FMAC3 ns1__ClearingSystemIdentification2Choice ** SOAP_FMAC4 soap_in_PointerTons1__ClearingSystemIdentification2Choice(struct soap*, const char*, ns1__ClearingSystemIdentification2Choice **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ClearingSystemIdentification2Choice(struct soap*, ns1__ClearingSystemIdentification2Choice *const*, const char*, const char*);
SOAP_FMAC3 ns1__ClearingSystemIdentification2Choice ** SOAP_FMAC4 soap_get_PointerTons1__ClearingSystemIdentification2Choice(struct soap*, ns1__ClearingSystemIdentification2Choice **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ExternalClearingSystemIdentification1Code_DEFINED
#define SOAP_TYPE_PointerTons1__ExternalClearingSystemIdentification1Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ExternalClearingSystemIdentification1Code(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ExternalClearingSystemIdentification1Code(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons1__ExternalClearingSystemIdentification1Code(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ExternalClearingSystemIdentification1Code(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons1__ExternalClearingSystemIdentification1Code(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ISODate_DEFINED
#define SOAP_TYPE_PointerTons1__ISODate_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ISODate(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ISODate(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons1__ISODate(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ISODate(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons1__ISODate(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__Priority2Code_DEFINED
#define SOAP_TYPE_PointerTons1__Priority2Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Priority2Code(struct soap*, enum ns1__Priority2Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Priority2Code(struct soap*, const char *, int, enum ns1__Priority2Code *const*, const char *);
SOAP_FMAC3 enum ns1__Priority2Code ** SOAP_FMAC4 soap_in_PointerTons1__Priority2Code(struct soap*, const char*, enum ns1__Priority2Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Priority2Code(struct soap*, enum ns1__Priority2Code *const*, const char*, const char*);
SOAP_FMAC3 enum ns1__Priority2Code ** SOAP_FMAC4 soap_get_PointerTons1__Priority2Code(struct soap*, enum ns1__Priority2Code **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ChequeDeliveryMethod1Choice_DEFINED
#define SOAP_TYPE_PointerTons1__ChequeDeliveryMethod1Choice_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ChequeDeliveryMethod1Choice(struct soap*, ns1__ChequeDeliveryMethod1Choice *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ChequeDeliveryMethod1Choice(struct soap*, const char *, int, ns1__ChequeDeliveryMethod1Choice *const*, const char *);
SOAP_FMAC3 ns1__ChequeDeliveryMethod1Choice ** SOAP_FMAC4 soap_in_PointerTons1__ChequeDeliveryMethod1Choice(struct soap*, const char*, ns1__ChequeDeliveryMethod1Choice **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ChequeDeliveryMethod1Choice(struct soap*, ns1__ChequeDeliveryMethod1Choice *const*, const char*, const char*);
SOAP_FMAC3 ns1__ChequeDeliveryMethod1Choice ** SOAP_FMAC4 soap_get_PointerTons1__ChequeDeliveryMethod1Choice(struct soap*, ns1__ChequeDeliveryMethod1Choice **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__NameAndAddress16_DEFINED
#define SOAP_TYPE_PointerTons1__NameAndAddress16_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__NameAndAddress16(struct soap*, ns1__NameAndAddress16 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__NameAndAddress16(struct soap*, const char *, int, ns1__NameAndAddress16 *const*, const char *);
SOAP_FMAC3 ns1__NameAndAddress16 ** SOAP_FMAC4 soap_in_PointerTons1__NameAndAddress16(struct soap*, const char*, ns1__NameAndAddress16 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__NameAndAddress16(struct soap*, ns1__NameAndAddress16 *const*, const char*, const char*);
SOAP_FMAC3 ns1__NameAndAddress16 ** SOAP_FMAC4 soap_get_PointerTons1__NameAndAddress16(struct soap*, ns1__NameAndAddress16 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ChequeType2Code_DEFINED
#define SOAP_TYPE_PointerTons1__ChequeType2Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ChequeType2Code(struct soap*, enum ns1__ChequeType2Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ChequeType2Code(struct soap*, const char *, int, enum ns1__ChequeType2Code *const*, const char *);
SOAP_FMAC3 enum ns1__ChequeType2Code ** SOAP_FMAC4 soap_in_PointerTons1__ChequeType2Code(struct soap*, const char*, enum ns1__ChequeType2Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ChequeType2Code(struct soap*, enum ns1__ChequeType2Code *const*, const char*, const char*);
SOAP_FMAC3 enum ns1__ChequeType2Code ** SOAP_FMAC4 soap_get_PointerTons1__ChequeType2Code(struct soap*, enum ns1__ChequeType2Code **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ExternalCategoryPurpose1Code_DEFINED
#define SOAP_TYPE_PointerTons1__ExternalCategoryPurpose1Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ExternalCategoryPurpose1Code(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ExternalCategoryPurpose1Code(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons1__ExternalCategoryPurpose1Code(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ExternalCategoryPurpose1Code(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons1__ExternalCategoryPurpose1Code(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ExternalCashAccountType1Code_DEFINED
#define SOAP_TYPE_PointerTons1__ExternalCashAccountType1Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ExternalCashAccountType1Code(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ExternalCashAccountType1Code(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons1__ExternalCashAccountType1Code(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ExternalCashAccountType1Code(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons1__ExternalCashAccountType1Code(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ProxyAccountIdentification1_DEFINED
#define SOAP_TYPE_PointerTons1__ProxyAccountIdentification1_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ProxyAccountIdentification1(struct soap*, ns1__ProxyAccountIdentification1 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ProxyAccountIdentification1(struct soap*, const char *, int, ns1__ProxyAccountIdentification1 *const*, const char *);
SOAP_FMAC3 ns1__ProxyAccountIdentification1 ** SOAP_FMAC4 soap_in_PointerTons1__ProxyAccountIdentification1(struct soap*, const char*, ns1__ProxyAccountIdentification1 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ProxyAccountIdentification1(struct soap*, ns1__ProxyAccountIdentification1 *const*, const char*, const char*);
SOAP_FMAC3 ns1__ProxyAccountIdentification1 ** SOAP_FMAC4 soap_get_PointerTons1__ProxyAccountIdentification1(struct soap*, ns1__ProxyAccountIdentification1 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__Max70Text_DEFINED
#define SOAP_TYPE_PointerTons1__Max70Text_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Max70Text(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Max70Text(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons1__Max70Text(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Max70Text(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons1__Max70Text(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ActiveOrHistoricCurrencyCode_DEFINED
#define SOAP_TYPE_PointerTons1__ActiveOrHistoricCurrencyCode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ActiveOrHistoricCurrencyCode(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ActiveOrHistoricCurrencyCode(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons1__ActiveOrHistoricCurrencyCode(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ActiveOrHistoricCurrencyCode(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons1__ActiveOrHistoricCurrencyCode(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__CashAccountType2Choice_DEFINED
#define SOAP_TYPE_PointerTons1__CashAccountType2Choice_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CashAccountType2Choice(struct soap*, ns1__CashAccountType2Choice *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CashAccountType2Choice(struct soap*, const char *, int, ns1__CashAccountType2Choice *const*, const char *);
SOAP_FMAC3 ns1__CashAccountType2Choice ** SOAP_FMAC4 soap_in_PointerTons1__CashAccountType2Choice(struct soap*, const char*, ns1__CashAccountType2Choice **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CashAccountType2Choice(struct soap*, ns1__CashAccountType2Choice *const*, const char*, const char*);
SOAP_FMAC3 ns1__CashAccountType2Choice ** SOAP_FMAC4 soap_get_PointerTons1__CashAccountType2Choice(struct soap*, ns1__CashAccountType2Choice **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__AccountIdentification4Choice_DEFINED
#define SOAP_TYPE_PointerTons1__AccountIdentification4Choice_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__AccountIdentification4Choice(struct soap*, ns1__AccountIdentification4Choice *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__AccountIdentification4Choice(struct soap*, const char *, int, ns1__AccountIdentification4Choice *const*, const char *);
SOAP_FMAC3 ns1__AccountIdentification4Choice ** SOAP_FMAC4 soap_in_PointerTons1__AccountIdentification4Choice(struct soap*, const char*, ns1__AccountIdentification4Choice **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__AccountIdentification4Choice(struct soap*, ns1__AccountIdentification4Choice *const*, const char*, const char*);
SOAP_FMAC3 ns1__AccountIdentification4Choice ** SOAP_FMAC4 soap_get_PointerTons1__AccountIdentification4Choice(struct soap*, ns1__AccountIdentification4Choice **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__PostalAddress24_DEFINED
#define SOAP_TYPE_PointerTons1__PostalAddress24_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__PostalAddress24(struct soap*, ns1__PostalAddress24 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__PostalAddress24(struct soap*, const char *, int, ns1__PostalAddress24 *const*, const char *);
SOAP_FMAC3 ns1__PostalAddress24 ** SOAP_FMAC4 soap_in_PointerTons1__PostalAddress24(struct soap*, const char*, ns1__PostalAddress24 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__PostalAddress24(struct soap*, ns1__PostalAddress24 *const*, const char*, const char*);
SOAP_FMAC3 ns1__PostalAddress24 ** SOAP_FMAC4 soap_get_PointerTons1__PostalAddress24(struct soap*, ns1__PostalAddress24 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__Max140Text_DEFINED
#define SOAP_TYPE_PointerTons1__Max140Text_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Max140Text(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Max140Text(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons1__Max140Text(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Max140Text(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons1__Max140Text(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__LEIIdentifier_DEFINED
#define SOAP_TYPE_PointerTons1__LEIIdentifier_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__LEIIdentifier(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__LEIIdentifier(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons1__LEIIdentifier(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__LEIIdentifier(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons1__LEIIdentifier(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__BranchData3_DEFINED
#define SOAP_TYPE_PointerTons1__BranchData3_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__BranchData3(struct soap*, ns1__BranchData3 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__BranchData3(struct soap*, const char *, int, ns1__BranchData3 *const*, const char *);
SOAP_FMAC3 ns1__BranchData3 ** SOAP_FMAC4 soap_in_PointerTons1__BranchData3(struct soap*, const char*, ns1__BranchData3 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__BranchData3(struct soap*, ns1__BranchData3 *const*, const char*, const char*);
SOAP_FMAC3 ns1__BranchData3 ** SOAP_FMAC4 soap_get_PointerTons1__BranchData3(struct soap*, ns1__BranchData3 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__FinancialInstitutionIdentification18_DEFINED
#define SOAP_TYPE_PointerTons1__FinancialInstitutionIdentification18_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__FinancialInstitutionIdentification18(struct soap*, ns1__FinancialInstitutionIdentification18 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__FinancialInstitutionIdentification18(struct soap*, const char *, int, ns1__FinancialInstitutionIdentification18 *const*, const char *);
SOAP_FMAC3 ns1__FinancialInstitutionIdentification18 ** SOAP_FMAC4 soap_in_PointerTons1__FinancialInstitutionIdentification18(struct soap*, const char*, ns1__FinancialInstitutionIdentification18 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__FinancialInstitutionIdentification18(struct soap*, ns1__FinancialInstitutionIdentification18 *const*, const char*, const char*);
SOAP_FMAC3 ns1__FinancialInstitutionIdentification18 ** SOAP_FMAC4 soap_get_PointerTons1__FinancialInstitutionIdentification18(struct soap*, ns1__FinancialInstitutionIdentification18 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__Max128Text_DEFINED
#define SOAP_TYPE_PointerTons1__Max128Text_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Max128Text(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Max128Text(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons1__Max128Text(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Max128Text(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons1__Max128Text(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__EquivalentAmount2_DEFINED
#define SOAP_TYPE_PointerTons1__EquivalentAmount2_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__EquivalentAmount2(struct soap*, ns1__EquivalentAmount2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__EquivalentAmount2(struct soap*, const char *, int, ns1__EquivalentAmount2 *const*, const char *);
SOAP_FMAC3 ns1__EquivalentAmount2 ** SOAP_FMAC4 soap_in_PointerTons1__EquivalentAmount2(struct soap*, const char*, ns1__EquivalentAmount2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__EquivalentAmount2(struct soap*, ns1__EquivalentAmount2 *const*, const char*, const char*);
SOAP_FMAC3 ns1__EquivalentAmount2 ** SOAP_FMAC4 soap_get_PointerTons1__EquivalentAmount2(struct soap*, ns1__EquivalentAmount2 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ActiveOrHistoricCurrencyAndAmount_DEFINED
#define SOAP_TYPE_PointerTons1__ActiveOrHistoricCurrencyAndAmount_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ActiveOrHistoricCurrencyAndAmount(struct soap*, ns1__ActiveOrHistoricCurrencyAndAmount *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ActiveOrHistoricCurrencyAndAmount(struct soap*, const char *, int, ns1__ActiveOrHistoricCurrencyAndAmount *const*, const char *);
SOAP_FMAC3 ns1__ActiveOrHistoricCurrencyAndAmount ** SOAP_FMAC4 soap_in_PointerTons1__ActiveOrHistoricCurrencyAndAmount(struct soap*, const char*, ns1__ActiveOrHistoricCurrencyAndAmount **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ActiveOrHistoricCurrencyAndAmount(struct soap*, ns1__ActiveOrHistoricCurrencyAndAmount *const*, const char*, const char*);
SOAP_FMAC3 ns1__ActiveOrHistoricCurrencyAndAmount ** SOAP_FMAC4 soap_get_PointerTons1__ActiveOrHistoricCurrencyAndAmount(struct soap*, ns1__ActiveOrHistoricCurrencyAndAmount **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__AdviceType1Choice_DEFINED
#define SOAP_TYPE_PointerTons1__AdviceType1Choice_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__AdviceType1Choice(struct soap*, ns1__AdviceType1Choice *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__AdviceType1Choice(struct soap*, const char *, int, ns1__AdviceType1Choice *const*, const char *);
SOAP_FMAC3 ns1__AdviceType1Choice ** SOAP_FMAC4 soap_in_PointerTons1__AdviceType1Choice(struct soap*, const char*, ns1__AdviceType1Choice **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__AdviceType1Choice(struct soap*, ns1__AdviceType1Choice *const*, const char*, const char*);
SOAP_FMAC3 ns1__AdviceType1Choice ** SOAP_FMAC4 soap_get_PointerTons1__AdviceType1Choice(struct soap*, ns1__AdviceType1Choice **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__GenericIdentification30_DEFINED
#define SOAP_TYPE_PointerTons1__GenericIdentification30_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__GenericIdentification30(struct soap*, ns1__GenericIdentification30 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__GenericIdentification30(struct soap*, const char *, int, ns1__GenericIdentification30 *const*, const char *);
SOAP_FMAC3 ns1__GenericIdentification30 ** SOAP_FMAC4 soap_in_PointerTons1__GenericIdentification30(struct soap*, const char*, ns1__GenericIdentification30 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__GenericIdentification30(struct soap*, ns1__GenericIdentification30 *const*, const char*, const char*);
SOAP_FMAC3 ns1__GenericIdentification30 ** SOAP_FMAC4 soap_get_PointerTons1__GenericIdentification30(struct soap*, ns1__GenericIdentification30 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__Max35Text_DEFINED
#define SOAP_TYPE_PointerTons1__Max35Text_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Max35Text(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Max35Text(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons1__Max35Text(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Max35Text(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons1__Max35Text(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ExternalAccountIdentification1Code_DEFINED
#define SOAP_TYPE_PointerTons1__ExternalAccountIdentification1Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ExternalAccountIdentification1Code(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ExternalAccountIdentification1Code(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons1__ExternalAccountIdentification1Code(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ExternalAccountIdentification1Code(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons1__ExternalAccountIdentification1Code(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__GenericAccountIdentification1_DEFINED
#define SOAP_TYPE_PointerTons1__GenericAccountIdentification1_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__GenericAccountIdentification1(struct soap*, ns1__GenericAccountIdentification1 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__GenericAccountIdentification1(struct soap*, const char *, int, ns1__GenericAccountIdentification1 *const*, const char *);
SOAP_FMAC3 ns1__GenericAccountIdentification1 ** SOAP_FMAC4 soap_in_PointerTons1__GenericAccountIdentification1(struct soap*, const char*, ns1__GenericAccountIdentification1 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__GenericAccountIdentification1(struct soap*, ns1__GenericAccountIdentification1 *const*, const char*, const char*);
SOAP_FMAC3 ns1__GenericAccountIdentification1 ** SOAP_FMAC4 soap_get_PointerTons1__GenericAccountIdentification1(struct soap*, ns1__GenericAccountIdentification1 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__IBAN2007Identifier_DEFINED
#define SOAP_TYPE_PointerTons1__IBAN2007Identifier_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__IBAN2007Identifier(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__IBAN2007Identifier(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTons1__IBAN2007Identifier(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__IBAN2007Identifier(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTons1__IBAN2007Identifier(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTounsignedByte_DEFINED
#define SOAP_TYPE_PointerTounsignedByte_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap*, unsigned char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap*, const char *, int, unsigned char *const*, const char *);
SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap*, const char*, unsigned char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap*, unsigned char *const*, const char*, const char*);
SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap*, unsigned char **, const char*, const char*);
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED

inline void soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);

#define soap_instantiate__QName soap_instantiate_string


#define soap_new__QName soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__QName(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__QName(struct soap *soap, char **p)
{
	if (::soap_read__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED

inline void soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_string(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_string(struct soap *soap, char **p)
{
	if (::soap_read_string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__TaxRecord3_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__TaxRecord3_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__TaxRecord3(struct soap*, std::vector<ns1__TaxRecord3 *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__TaxRecord3(struct soap*, const std::vector<ns1__TaxRecord3 *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__TaxRecord3(struct soap*, const char*, int, const std::vector<ns1__TaxRecord3 *> *, const char*);
SOAP_FMAC3 std::vector<ns1__TaxRecord3 *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__TaxRecord3(struct soap*, const char*, std::vector<ns1__TaxRecord3 *> *, const char*);
SOAP_FMAC1 std::vector<ns1__TaxRecord3 *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__TaxRecord3(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__TaxRecord3 *>  * soap_new_std__vectorTemplateOfPointerTons1__TaxRecord3(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__TaxRecord3(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__TaxRecordDetails3_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__TaxRecordDetails3_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__TaxRecordDetails3(struct soap*, std::vector<ns1__TaxRecordDetails3 *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__TaxRecordDetails3(struct soap*, const std::vector<ns1__TaxRecordDetails3 *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__TaxRecordDetails3(struct soap*, const char*, int, const std::vector<ns1__TaxRecordDetails3 *> *, const char*);
SOAP_FMAC3 std::vector<ns1__TaxRecordDetails3 *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__TaxRecordDetails3(struct soap*, const char*, std::vector<ns1__TaxRecordDetails3 *> *, const char*);
SOAP_FMAC1 std::vector<ns1__TaxRecordDetails3 *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__TaxRecordDetails3(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__TaxRecordDetails3 *>  * soap_new_std__vectorTemplateOfPointerTons1__TaxRecordDetails3(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__TaxRecordDetails3(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__ReferredDocumentInformation7_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__ReferredDocumentInformation7_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__ReferredDocumentInformation7(struct soap*, std::vector<ns1__ReferredDocumentInformation7 *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__ReferredDocumentInformation7(struct soap*, const std::vector<ns1__ReferredDocumentInformation7 *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__ReferredDocumentInformation7(struct soap*, const char*, int, const std::vector<ns1__ReferredDocumentInformation7 *> *, const char*);
SOAP_FMAC3 std::vector<ns1__ReferredDocumentInformation7 *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__ReferredDocumentInformation7(struct soap*, const char*, std::vector<ns1__ReferredDocumentInformation7 *> *, const char*);
SOAP_FMAC1 std::vector<ns1__ReferredDocumentInformation7 *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__ReferredDocumentInformation7(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__ReferredDocumentInformation7 *>  * soap_new_std__vectorTemplateOfPointerTons1__ReferredDocumentInformation7(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__ReferredDocumentInformation7(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__RemittanceLocationData1_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__RemittanceLocationData1_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__RemittanceLocationData1(struct soap*, std::vector<ns1__RemittanceLocationData1 *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__RemittanceLocationData1(struct soap*, const std::vector<ns1__RemittanceLocationData1 *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__RemittanceLocationData1(struct soap*, const char*, int, const std::vector<ns1__RemittanceLocationData1 *> *, const char*);
SOAP_FMAC3 std::vector<ns1__RemittanceLocationData1 *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__RemittanceLocationData1(struct soap*, const char*, std::vector<ns1__RemittanceLocationData1 *> *, const char*);
SOAP_FMAC1 std::vector<ns1__RemittanceLocationData1 *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__RemittanceLocationData1(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__RemittanceLocationData1 *>  * soap_new_std__vectorTemplateOfPointerTons1__RemittanceLocationData1(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__RemittanceLocationData1(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__StructuredRemittanceInformation17_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__StructuredRemittanceInformation17_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__StructuredRemittanceInformation17(struct soap*, std::vector<ns1__StructuredRemittanceInformation17 *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__StructuredRemittanceInformation17(struct soap*, const std::vector<ns1__StructuredRemittanceInformation17 *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__StructuredRemittanceInformation17(struct soap*, const char*, int, const std::vector<ns1__StructuredRemittanceInformation17 *> *, const char*);
SOAP_FMAC3 std::vector<ns1__StructuredRemittanceInformation17 *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__StructuredRemittanceInformation17(struct soap*, const char*, std::vector<ns1__StructuredRemittanceInformation17 *> *, const char*);
SOAP_FMAC1 std::vector<ns1__StructuredRemittanceInformation17 *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__StructuredRemittanceInformation17(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__StructuredRemittanceInformation17 *>  * soap_new_std__vectorTemplateOfPointerTons1__StructuredRemittanceInformation17(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__StructuredRemittanceInformation17(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfns1__Max140Text_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfns1__Max140Text_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfns1__Max140Text(struct soap*, std::vector<std::string> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfns1__Max140Text(struct soap*, const std::vector<std::string> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfns1__Max140Text(struct soap*, const char*, int, const std::vector<std::string> *, const char*);
SOAP_FMAC3 std::vector<std::string> * SOAP_FMAC4 soap_in_std__vectorTemplateOfns1__Max140Text(struct soap*, const char*, std::vector<std::string> *, const char*);
SOAP_FMAC1 std::vector<std::string>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfns1__Max140Text(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string>  * soap_new_std__vectorTemplateOfns1__Max140Text(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfns1__Max140Text(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__DocumentAdjustment1_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__DocumentAdjustment1_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__DocumentAdjustment1(struct soap*, std::vector<ns1__DocumentAdjustment1 *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__DocumentAdjustment1(struct soap*, const std::vector<ns1__DocumentAdjustment1 *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__DocumentAdjustment1(struct soap*, const char*, int, const std::vector<ns1__DocumentAdjustment1 *> *, const char*);
SOAP_FMAC3 std::vector<ns1__DocumentAdjustment1 *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__DocumentAdjustment1(struct soap*, const char*, std::vector<ns1__DocumentAdjustment1 *> *, const char*);
SOAP_FMAC1 std::vector<ns1__DocumentAdjustment1 *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__DocumentAdjustment1(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__DocumentAdjustment1 *>  * soap_new_std__vectorTemplateOfPointerTons1__DocumentAdjustment1(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__DocumentAdjustment1(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__TaxAmountAndType1_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__TaxAmountAndType1_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__TaxAmountAndType1(struct soap*, std::vector<ns1__TaxAmountAndType1 *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__TaxAmountAndType1(struct soap*, const std::vector<ns1__TaxAmountAndType1 *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__TaxAmountAndType1(struct soap*, const char*, int, const std::vector<ns1__TaxAmountAndType1 *> *, const char*);
SOAP_FMAC3 std::vector<ns1__TaxAmountAndType1 *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__TaxAmountAndType1(struct soap*, const char*, std::vector<ns1__TaxAmountAndType1 *> *, const char*);
SOAP_FMAC1 std::vector<ns1__TaxAmountAndType1 *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__TaxAmountAndType1(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__TaxAmountAndType1 *>  * soap_new_std__vectorTemplateOfPointerTons1__TaxAmountAndType1(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__TaxAmountAndType1(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__DiscountAmountAndType1_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__DiscountAmountAndType1_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__DiscountAmountAndType1(struct soap*, std::vector<ns1__DiscountAmountAndType1 *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__DiscountAmountAndType1(struct soap*, const std::vector<ns1__DiscountAmountAndType1 *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__DiscountAmountAndType1(struct soap*, const char*, int, const std::vector<ns1__DiscountAmountAndType1 *> *, const char*);
SOAP_FMAC3 std::vector<ns1__DiscountAmountAndType1 *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__DiscountAmountAndType1(struct soap*, const char*, std::vector<ns1__DiscountAmountAndType1 *> *, const char*);
SOAP_FMAC1 std::vector<ns1__DiscountAmountAndType1 *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__DiscountAmountAndType1(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__DiscountAmountAndType1 *>  * soap_new_std__vectorTemplateOfPointerTons1__DiscountAmountAndType1(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__DiscountAmountAndType1(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__StructuredRegulatoryReporting3_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__StructuredRegulatoryReporting3_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__StructuredRegulatoryReporting3(struct soap*, std::vector<ns1__StructuredRegulatoryReporting3 *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__StructuredRegulatoryReporting3(struct soap*, const std::vector<ns1__StructuredRegulatoryReporting3 *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__StructuredRegulatoryReporting3(struct soap*, const char*, int, const std::vector<ns1__StructuredRegulatoryReporting3 *> *, const char*);
SOAP_FMAC3 std::vector<ns1__StructuredRegulatoryReporting3 *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__StructuredRegulatoryReporting3(struct soap*, const char*, std::vector<ns1__StructuredRegulatoryReporting3 *> *, const char*);
SOAP_FMAC1 std::vector<ns1__StructuredRegulatoryReporting3 *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__StructuredRegulatoryReporting3(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__StructuredRegulatoryReporting3 *>  * soap_new_std__vectorTemplateOfPointerTons1__StructuredRegulatoryReporting3(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__StructuredRegulatoryReporting3(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__DocumentLineInformation1_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__DocumentLineInformation1_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__DocumentLineInformation1(struct soap*, std::vector<ns1__DocumentLineInformation1 *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__DocumentLineInformation1(struct soap*, const std::vector<ns1__DocumentLineInformation1 *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__DocumentLineInformation1(struct soap*, const char*, int, const std::vector<ns1__DocumentLineInformation1 *> *, const char*);
SOAP_FMAC3 std::vector<ns1__DocumentLineInformation1 *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__DocumentLineInformation1(struct soap*, const char*, std::vector<ns1__DocumentLineInformation1 *> *, const char*);
SOAP_FMAC1 std::vector<ns1__DocumentLineInformation1 *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__DocumentLineInformation1(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__DocumentLineInformation1 *>  * soap_new_std__vectorTemplateOfPointerTons1__DocumentLineInformation1(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__DocumentLineInformation1(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__GenericPersonIdentification1_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__GenericPersonIdentification1_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__GenericPersonIdentification1(struct soap*, std::vector<ns1__GenericPersonIdentification1 *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__GenericPersonIdentification1(struct soap*, const std::vector<ns1__GenericPersonIdentification1 *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__GenericPersonIdentification1(struct soap*, const char*, int, const std::vector<ns1__GenericPersonIdentification1 *> *, const char*);
SOAP_FMAC3 std::vector<ns1__GenericPersonIdentification1 *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__GenericPersonIdentification1(struct soap*, const char*, std::vector<ns1__GenericPersonIdentification1 *> *, const char*);
SOAP_FMAC1 std::vector<ns1__GenericPersonIdentification1 *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__GenericPersonIdentification1(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__GenericPersonIdentification1 *>  * soap_new_std__vectorTemplateOfPointerTons1__GenericPersonIdentification1(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__GenericPersonIdentification1(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__ServiceLevel8Choice_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__ServiceLevel8Choice_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__ServiceLevel8Choice(struct soap*, std::vector<ns1__ServiceLevel8Choice *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__ServiceLevel8Choice(struct soap*, const std::vector<ns1__ServiceLevel8Choice *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__ServiceLevel8Choice(struct soap*, const char*, int, const std::vector<ns1__ServiceLevel8Choice *> *, const char*);
SOAP_FMAC3 std::vector<ns1__ServiceLevel8Choice *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__ServiceLevel8Choice(struct soap*, const char*, std::vector<ns1__ServiceLevel8Choice *> *, const char*);
SOAP_FMAC1 std::vector<ns1__ServiceLevel8Choice *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__ServiceLevel8Choice(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__ServiceLevel8Choice *>  * soap_new_std__vectorTemplateOfPointerTons1__ServiceLevel8Choice(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__ServiceLevel8Choice(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__CreditTransferTransaction54_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__CreditTransferTransaction54_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__CreditTransferTransaction54(struct soap*, std::vector<ns1__CreditTransferTransaction54 *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__CreditTransferTransaction54(struct soap*, const std::vector<ns1__CreditTransferTransaction54 *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__CreditTransferTransaction54(struct soap*, const char*, int, const std::vector<ns1__CreditTransferTransaction54 *> *, const char*);
SOAP_FMAC3 std::vector<ns1__CreditTransferTransaction54 *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__CreditTransferTransaction54(struct soap*, const char*, std::vector<ns1__CreditTransferTransaction54 *> *, const char*);
SOAP_FMAC1 std::vector<ns1__CreditTransferTransaction54 *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__CreditTransferTransaction54(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__CreditTransferTransaction54 *>  * soap_new_std__vectorTemplateOfPointerTons1__CreditTransferTransaction54(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__CreditTransferTransaction54(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__GenericOrganisationIdentification1_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__GenericOrganisationIdentification1_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__GenericOrganisationIdentification1(struct soap*, std::vector<ns1__GenericOrganisationIdentification1 *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__GenericOrganisationIdentification1(struct soap*, const std::vector<ns1__GenericOrganisationIdentification1 *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__GenericOrganisationIdentification1(struct soap*, const char*, int, const std::vector<ns1__GenericOrganisationIdentification1 *> *, const char*);
SOAP_FMAC3 std::vector<ns1__GenericOrganisationIdentification1 *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__GenericOrganisationIdentification1(struct soap*, const char*, std::vector<ns1__GenericOrganisationIdentification1 *> *, const char*);
SOAP_FMAC1 std::vector<ns1__GenericOrganisationIdentification1 *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__GenericOrganisationIdentification1(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__GenericOrganisationIdentification1 *>  * soap_new_std__vectorTemplateOfPointerTons1__GenericOrganisationIdentification1(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__GenericOrganisationIdentification1(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__Authorisation1Choice_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__Authorisation1Choice_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__Authorisation1Choice(struct soap*, std::vector<ns1__Authorisation1Choice *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__Authorisation1Choice(struct soap*, const std::vector<ns1__Authorisation1Choice *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__Authorisation1Choice(struct soap*, const char*, int, const std::vector<ns1__Authorisation1Choice *> *, const char*);
SOAP_FMAC3 std::vector<ns1__Authorisation1Choice *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__Authorisation1Choice(struct soap*, const char*, std::vector<ns1__Authorisation1Choice *> *, const char*);
SOAP_FMAC1 std::vector<ns1__Authorisation1Choice *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__Authorisation1Choice(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__Authorisation1Choice *>  * soap_new_std__vectorTemplateOfPointerTons1__Authorisation1Choice(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__Authorisation1Choice(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__DocumentLineIdentification1_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__DocumentLineIdentification1_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__DocumentLineIdentification1(struct soap*, std::vector<ns1__DocumentLineIdentification1 *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__DocumentLineIdentification1(struct soap*, const std::vector<ns1__DocumentLineIdentification1 *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__DocumentLineIdentification1(struct soap*, const char*, int, const std::vector<ns1__DocumentLineIdentification1 *> *, const char*);
SOAP_FMAC3 std::vector<ns1__DocumentLineIdentification1 *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__DocumentLineIdentification1(struct soap*, const char*, std::vector<ns1__DocumentLineIdentification1 *> *, const char*);
SOAP_FMAC1 std::vector<ns1__DocumentLineIdentification1 *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__DocumentLineIdentification1(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__DocumentLineIdentification1 *>  * soap_new_std__vectorTemplateOfPointerTons1__DocumentLineIdentification1(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__DocumentLineIdentification1(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__PaymentInstruction40_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__PaymentInstruction40_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__PaymentInstruction40(struct soap*, std::vector<ns1__PaymentInstruction40 *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__PaymentInstruction40(struct soap*, const std::vector<ns1__PaymentInstruction40 *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__PaymentInstruction40(struct soap*, const char*, int, const std::vector<ns1__PaymentInstruction40 *> *, const char*);
SOAP_FMAC3 std::vector<ns1__PaymentInstruction40 *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__PaymentInstruction40(struct soap*, const char*, std::vector<ns1__PaymentInstruction40 *> *, const char*);
SOAP_FMAC1 std::vector<ns1__PaymentInstruction40 *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__PaymentInstruction40(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__PaymentInstruction40 *>  * soap_new_std__vectorTemplateOfPointerTons1__PaymentInstruction40(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__PaymentInstruction40(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__SupplementaryData1_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__SupplementaryData1_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__SupplementaryData1(struct soap*, std::vector<ns1__SupplementaryData1 *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__SupplementaryData1(struct soap*, const std::vector<ns1__SupplementaryData1 *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__SupplementaryData1(struct soap*, const char*, int, const std::vector<ns1__SupplementaryData1 *> *, const char*);
SOAP_FMAC3 std::vector<ns1__SupplementaryData1 *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__SupplementaryData1(struct soap*, const char*, std::vector<ns1__SupplementaryData1 *> *, const char*);
SOAP_FMAC1 std::vector<ns1__SupplementaryData1 *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__SupplementaryData1(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__SupplementaryData1 *>  * soap_new_std__vectorTemplateOfPointerTons1__SupplementaryData1(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__SupplementaryData1(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__RemittanceLocation7_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__RemittanceLocation7_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__RemittanceLocation7(struct soap*, std::vector<ns1__RemittanceLocation7 *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__RemittanceLocation7(struct soap*, const std::vector<ns1__RemittanceLocation7 *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__RemittanceLocation7(struct soap*, const char*, int, const std::vector<ns1__RemittanceLocation7 *> *, const char*);
SOAP_FMAC3 std::vector<ns1__RemittanceLocation7 *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__RemittanceLocation7(struct soap*, const char*, std::vector<ns1__RemittanceLocation7 *> *, const char*);
SOAP_FMAC1 std::vector<ns1__RemittanceLocation7 *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__RemittanceLocation7(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__RemittanceLocation7 *>  * soap_new_std__vectorTemplateOfPointerTons1__RemittanceLocation7(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__RemittanceLocation7(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__RegulatoryReporting3_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__RegulatoryReporting3_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__RegulatoryReporting3(struct soap*, std::vector<ns1__RegulatoryReporting3 *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__RegulatoryReporting3(struct soap*, const std::vector<ns1__RegulatoryReporting3 *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__RegulatoryReporting3(struct soap*, const char*, int, const std::vector<ns1__RegulatoryReporting3 *> *, const char*);
SOAP_FMAC3 std::vector<ns1__RegulatoryReporting3 *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__RegulatoryReporting3(struct soap*, const char*, std::vector<ns1__RegulatoryReporting3 *> *, const char*);
SOAP_FMAC1 std::vector<ns1__RegulatoryReporting3 *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__RegulatoryReporting3(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__RegulatoryReporting3 *>  * soap_new_std__vectorTemplateOfPointerTons1__RegulatoryReporting3(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__RegulatoryReporting3(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__InstructionForCreditorAgent3_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__InstructionForCreditorAgent3_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__InstructionForCreditorAgent3(struct soap*, std::vector<ns1__InstructionForCreditorAgent3 *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__InstructionForCreditorAgent3(struct soap*, const std::vector<ns1__InstructionForCreditorAgent3 *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__InstructionForCreditorAgent3(struct soap*, const char*, int, const std::vector<ns1__InstructionForCreditorAgent3 *> *, const char*);
SOAP_FMAC3 std::vector<ns1__InstructionForCreditorAgent3 *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__InstructionForCreditorAgent3(struct soap*, const char*, std::vector<ns1__InstructionForCreditorAgent3 *> *, const char*);
SOAP_FMAC1 std::vector<ns1__InstructionForCreditorAgent3 *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__InstructionForCreditorAgent3(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__InstructionForCreditorAgent3 *>  * soap_new_std__vectorTemplateOfPointerTons1__InstructionForCreditorAgent3(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__InstructionForCreditorAgent3(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__OtherContact1_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__OtherContact1_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__OtherContact1(struct soap*, std::vector<ns1__OtherContact1 *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__OtherContact1(struct soap*, const std::vector<ns1__OtherContact1 *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__OtherContact1(struct soap*, const char*, int, const std::vector<ns1__OtherContact1 *> *, const char*);
SOAP_FMAC3 std::vector<ns1__OtherContact1 *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__OtherContact1(struct soap*, const char*, std::vector<ns1__OtherContact1 *> *, const char*);
SOAP_FMAC1 std::vector<ns1__OtherContact1 *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__OtherContact1(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__OtherContact1 *>  * soap_new_std__vectorTemplateOfPointerTons1__OtherContact1(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__OtherContact1(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfns1__Max70Text_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfns1__Max70Text_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfns1__Max70Text(struct soap*, std::vector<std::string> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfns1__Max70Text(struct soap*, const std::vector<std::string> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfns1__Max70Text(struct soap*, const char*, int, const std::vector<std::string> *, const char*);
SOAP_FMAC3 std::vector<std::string> * SOAP_FMAC4 soap_in_std__vectorTemplateOfns1__Max70Text(struct soap*, const char*, std::vector<std::string> *, const char*);
SOAP_FMAC1 std::vector<std::string>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfns1__Max70Text(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string>  * soap_new_std__vectorTemplateOfns1__Max70Text(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfns1__Max70Text(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfns1__Max35Text_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfns1__Max35Text_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfns1__Max35Text(struct soap*, std::vector<std::string> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfns1__Max35Text(struct soap*, const std::vector<std::string> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfns1__Max35Text(struct soap*, const char*, int, const std::vector<std::string> *, const char*);
SOAP_FMAC3 std::vector<std::string> * SOAP_FMAC4 soap_in_std__vectorTemplateOfns1__Max35Text(struct soap*, const char*, std::vector<std::string> *, const char*);
SOAP_FMAC1 std::vector<std::string>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfns1__Max35Text(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string>  * soap_new_std__vectorTemplateOfns1__Max35Text(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfns1__Max35Text(soap, n, NULL, NULL, NULL);
}
#endif

#endif

/* End of soapH.h */
